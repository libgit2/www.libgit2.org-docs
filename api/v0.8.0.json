{
  "info": {
    "version": "v0.8.0",
    "commit": "b64e11d1fe13a15edbe0f26dc5aaf96aa07f9d91"
  },
  "groups": {
    "blob": {
      "apis": {
        "git_blob_lookup": {
          "kind": "function",
          "name": "git_blob_lookup",
          "location": {
            "file": "blob.h",
            "line": 52,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success; error code otherwise"
          },
          "params": [
            {
              "name": "blob",
              "type": "git_blob **",
              "direction": "in",
              "comment": "pointer to the looked up blob"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repo to use when locating the blob."
            },
            {
              "name": "id",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "identity of the blob to locate."
            }
          ],
          "comment": [
            "Lookup a blob object from a repository.\n The generated blob object is owned by the revision\n repo and shall not be freed by the user."
          ],
          "group": "blob"
        },
        "git_blob_new": {
          "kind": "function",
          "name": "git_blob_new",
          "location": {
            "file": "blob.h",
            "line": 68,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success; error code otherwise"
          },
          "params": [
            {
              "name": "blob",
              "type": "git_blob **",
              "direction": "in",
              "comment": "pointer to the new blob"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "The repository where the object will reside"
            }
          ],
          "comment": [
            "Create a new in-memory git_blob.",
            "The blob object must be manually filled using\n the 'set_rawcontent' methods before it can\n be written back to disk."
          ],
          "group": "blob"
        },
        "git_blob_set_rawcontent_fromfile": {
          "kind": "function",
          "name": "git_blob_set_rawcontent_fromfile",
          "location": {
            "file": "blob.h",
            "line": 81,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success; error code otherwise"
          },
          "params": [
            {
              "name": "blob",
              "type": "git_blob *",
              "direction": "in",
              "comment": "pointer to the new blob"
            },
            {
              "name": "filename",
              "type": "const char *",
              "direction": "in",
              "comment": "name of the file to read"
            }
          ],
          "comment": [
            "Fill a blob with the contents inside\n the pointed file."
          ],
          "group": "blob"
        },
        "git_blob_set_rawcontent": {
          "kind": "function",
          "name": "git_blob_set_rawcontent",
          "location": {
            "file": "blob.h",
            "line": 92,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success; error code otherwise"
          },
          "params": [
            {
              "name": "blob",
              "type": "git_blob *",
              "direction": "in",
              "comment": "pointer to the blob"
            },
            {
              "name": "buffer",
              "type": "const void *",
              "direction": "in",
              "comment": "buffer with the contents for the blob"
            },
            {
              "name": "len",
              "type": "size_t",
              "direction": "in",
              "comment": "size of the buffer"
            }
          ],
          "comment": [
            "Fill a blob with the contents inside\n the pointed buffer"
          ],
          "group": "blob"
        },
        "git_blob_rawcontent": {
          "kind": "function",
          "name": "git_blob_rawcontent",
          "location": {
            "file": "blob.h",
            "line": 105,
            "column": 26
          },
          "returns": {
            "type": "const char *",
            "comment": "the pointer; NULL if the blob has no contents"
          },
          "params": [
            {
              "name": "blob",
              "type": "git_blob *",
              "direction": "in",
              "comment": "pointer to the blob"
            }
          ],
          "comment": [
            "Get a read-only buffer with the raw content of a blob.",
            "A pointer to the raw content of a blob is returned;\n this pointer is owned internally by the object and shall\n not be free'd. The pointer may be invalidated at a later\n time (e.g. when changing the contents of the blob)."
          ],
          "group": "blob"
        },
        "git_blob_rawsize": {
          "kind": "function",
          "name": "git_blob_rawsize",
          "location": {
            "file": "blob.h",
            "line": 113,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "size on bytes"
          },
          "params": [
            {
              "name": "blob",
              "type": "git_blob *",
              "direction": "in",
              "comment": "pointer to the blob"
            }
          ],
          "comment": [
            "Get the size in bytes of the contents of a blob"
          ],
          "group": "blob"
        },
        "git_blob_writefile": {
          "kind": "function",
          "name": "git_blob_writefile",
          "location": {
            "file": "blob.h",
            "line": 124,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "written_id",
              "type": "git_oid *",
              "direction": "in",
              "comment": "return the id of the written blob"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "repository where the blob will be written"
            },
            {
              "name": "path",
              "type": "const char *",
              "direction": "in",
              "comment": "file from which the blob will be created"
            }
          ],
          "comment": [
            "Read a file from the working folder of a repository\n and write it to the Object Database as a loose blob,\n if such doesn't exist yet."
          ],
          "group": "blob"
        },
        "git_blob": {
          "kind": "struct",
          "name": "git_blob",
          "referenceName": "struct git_blob",
          "opaque": true,
          "comment": [
            "In-memory representation of a blob object."
          ],
          "location": {
            "file": "types.h",
            "line": 111,
            "column": 25
          },
          "group": "blob",
          "parameterTo": [
            "git_blob_lookup",
            "git_blob_new",
            "git_blob_set_rawcontent_fromfile",
            "git_blob_set_rawcontent",
            "git_blob_rawcontent",
            "git_blob_rawsize"
          ]
        }
      },
      "info": {
        "summary": "Git blob load and write routines"
      }
    },
    "commit": {
      "apis": {
        "git_commit_lookup": {
          "kind": "function",
          "name": "git_commit_lookup",
          "location": {
            "file": "commit.h",
            "line": 53,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success; error code otherwise"
          },
          "params": [
            {
              "name": "commit",
              "type": "git_commit **",
              "direction": "in",
              "comment": "pointer to the looked up commit"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repo to use when locating the commit."
            },
            {
              "name": "id",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "identity of the commit to locate.  If the object is\n        an annotated tag it will be peeled back to the commit."
            }
          ],
          "comment": [
            "Lookup a commit object from a repository.\n The generated commit object is owned by the revision\n repo and shall not be freed by the user."
          ],
          "group": "commit"
        },
        "git_commit_new": {
          "kind": "function",
          "name": "git_commit_new",
          "location": {
            "file": "commit.h",
            "line": 69,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success; error code otherwise"
          },
          "params": [
            {
              "name": "commit",
              "type": "git_commit **",
              "direction": "in",
              "comment": "pointer to the new commit"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "The repository where the object will reside"
            }
          ],
          "comment": [
            "Create a new in-memory git_commit.",
            "The commit object must be manually filled using\n setter methods before it can be written to its\n repository."
          ],
          "group": "commit"
        },
        "git_commit_id": {
          "kind": "function",
          "name": "git_commit_id",
          "location": {
            "file": "commit.h",
            "line": 79,
            "column": 29
          },
          "returns": {
            "type": "const git_oid *",
            "comment": "object identity for the commit."
          },
          "params": [
            {
              "name": "commit",
              "type": "git_commit *",
              "direction": "in",
              "comment": "a previously loaded commit."
            }
          ],
          "comment": [
            "Get the id of a commit."
          ],
          "group": "commit"
        },
        "git_commit_message_short": {
          "kind": "function",
          "name": "git_commit_message_short",
          "location": {
            "file": "commit.h",
            "line": 86,
            "column": 26
          },
          "returns": {
            "type": "const char *",
            "comment": "the short message of a commit"
          },
          "params": [
            {
              "name": "commit",
              "type": "git_commit *",
              "direction": "in",
              "comment": "a previously loaded commit."
            }
          ],
          "comment": [
            "Get the short (one line) message of a commit."
          ],
          "group": "commit"
        },
        "git_commit_message": {
          "kind": "function",
          "name": "git_commit_message",
          "location": {
            "file": "commit.h",
            "line": 93,
            "column": 26
          },
          "returns": {
            "type": "const char *",
            "comment": "the message of a commit"
          },
          "params": [
            {
              "name": "commit",
              "type": "git_commit *",
              "direction": "in",
              "comment": "a previously loaded commit."
            }
          ],
          "comment": [
            "Get the full message of a commit."
          ],
          "group": "commit"
        },
        "git_commit_time": {
          "kind": "function",
          "name": "git_commit_time",
          "location": {
            "file": "commit.h",
            "line": 100,
            "column": 20
          },
          "returns": {
            "type": "time_t",
            "comment": "the time of a commit"
          },
          "params": [
            {
              "name": "commit",
              "type": "git_commit *",
              "direction": "in",
              "comment": "a previously loaded commit."
            }
          ],
          "comment": [
            "Get the commit time (i.e. committer time) of a commit."
          ],
          "group": "commit"
        },
        "git_commit_time_offset": {
          "kind": "function",
          "name": "git_commit_time_offset",
          "location": {
            "file": "commit.h",
            "line": 107,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "positive or negative timezone offset, in minutes from UTC"
          },
          "params": [
            {
              "name": "commit",
              "type": "git_commit *",
              "direction": "in",
              "comment": "a previously loaded commit."
            }
          ],
          "comment": [
            "Get the commit timezone offset (i.e. committer's preferred timezone) of a commit."
          ],
          "group": "commit"
        },
        "git_commit_committer": {
          "kind": "function",
          "name": "git_commit_committer",
          "location": {
            "file": "commit.h",
            "line": 114,
            "column": 35
          },
          "returns": {
            "type": "const git_signature *",
            "comment": "the committer of a commit"
          },
          "params": [
            {
              "name": "commit",
              "type": "git_commit *",
              "direction": "in",
              "comment": "a previously loaded commit."
            }
          ],
          "comment": [
            "Get the committer of a commit."
          ],
          "group": "commit"
        },
        "git_commit_author": {
          "kind": "function",
          "name": "git_commit_author",
          "location": {
            "file": "commit.h",
            "line": 121,
            "column": 35
          },
          "returns": {
            "type": "const git_signature *",
            "comment": "the author of a commit"
          },
          "params": [
            {
              "name": "commit",
              "type": "git_commit *",
              "direction": "in",
              "comment": "a previously loaded commit."
            }
          ],
          "comment": [
            "Get the author of a commit."
          ],
          "group": "commit"
        },
        "git_commit_tree": {
          "kind": "function",
          "name": "git_commit_tree",
          "location": {
            "file": "commit.h",
            "line": 128,
            "column": 30
          },
          "returns": {
            "type": "const git_tree *",
            "comment": "the tree of a commit"
          },
          "params": [
            {
              "name": "commit",
              "type": "git_commit *",
              "direction": "in",
              "comment": "a previously loaded commit."
            }
          ],
          "comment": [
            "Get the tree pointed to by a commit."
          ],
          "group": "commit"
        },
        "git_commit_parentcount": {
          "kind": "function",
          "name": "git_commit_parentcount",
          "location": {
            "file": "commit.h",
            "line": 136,
            "column": 26
          },
          "returns": {
            "type": "unsigned int",
            "comment": "integer of count of parents"
          },
          "params": [
            {
              "name": "commit",
              "type": "git_commit *",
              "direction": "in",
              "comment": "a previously loaded commit."
            }
          ],
          "comment": [
            "Get the number of parents of this commit"
          ],
          "group": "commit"
        },
        "git_commit_parent": {
          "kind": "function",
          "name": "git_commit_parent",
          "location": {
            "file": "commit.h",
            "line": 144,
            "column": 26
          },
          "returns": {
            "type": "git_commit *",
            "comment": "a pointer to the commit; NULL if out of bounds"
          },
          "params": [
            {
              "name": "commit",
              "type": "git_commit *",
              "direction": "in",
              "comment": "a previously loaded commit."
            },
            {
              "name": "n",
              "type": "unsigned int",
              "direction": "in",
              "comment": "the position of the entry"
            }
          ],
          "comment": [
            "Get the specified parent of the commit."
          ],
          "group": "commit"
        },
        "git_commit_add_parent": {
          "kind": "function",
          "name": "git_commit_add_parent",
          "location": {
            "file": "commit.h",
            "line": 152,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success; error code otherwise"
          },
          "params": [
            {
              "name": "commit",
              "type": "git_commit *",
              "direction": "in",
              "comment": "the commit object"
            },
            {
              "name": "new_parent",
              "type": "git_commit *",
              "direction": "in",
              "comment": "the new commit which will be a parent"
            }
          ],
          "comment": [
            "Add a new parent commit to an existing commit"
          ],
          "group": "commit"
        },
        "git_commit_set_message": {
          "kind": "function",
          "name": "git_commit_set_message",
          "location": {
            "file": "commit.h",
            "line": 159,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "commit",
              "type": "git_commit *",
              "direction": "in",
              "comment": "the commit object"
            },
            {
              "name": "message",
              "type": "const char *",
              "direction": "in",
              "comment": "the new message"
            }
          ],
          "comment": [
            "Set the message of a commit"
          ],
          "group": "commit"
        },
        "git_commit_set_committer": {
          "kind": "function",
          "name": "git_commit_set_committer",
          "location": {
            "file": "commit.h",
            "line": 166,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "commit",
              "type": "git_commit *",
              "direction": "in",
              "comment": "the commit object"
            },
            {
              "name": "committer_sig",
              "type": "const git_signature *"
            }
          ],
          "comment": [
            "Set the committer of a commit"
          ],
          "group": "commit"
        },
        "git_commit_set_author": {
          "kind": "function",
          "name": "git_commit_set_author",
          "location": {
            "file": "commit.h",
            "line": 173,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "commit",
              "type": "git_commit *",
              "direction": "in",
              "comment": "the commit object"
            },
            {
              "name": "author_sig",
              "type": "const git_signature *",
              "direction": "in",
              "comment": "signature of the author"
            }
          ],
          "comment": [
            "Set the author of a commit"
          ],
          "group": "commit"
        },
        "git_commit_set_tree": {
          "kind": "function",
          "name": "git_commit_set_tree",
          "location": {
            "file": "commit.h",
            "line": 180,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "commit",
              "type": "git_commit *",
              "direction": "in",
              "comment": "the commit object"
            },
            {
              "name": "tree",
              "type": "git_tree *",
              "direction": "in",
              "comment": "the new tree"
            }
          ],
          "comment": [
            "Set the tree which is pointed to by a commit"
          ],
          "group": "commit"
        },
        "git_commit": {
          "kind": "struct",
          "name": "git_commit",
          "referenceName": "struct git_commit",
          "opaque": true,
          "comment": [
            "Parsed representation of a commit object."
          ],
          "location": {
            "file": "types.h",
            "line": 114,
            "column": 27
          },
          "group": "commit",
          "returnedBy": [
            "git_commit_parent"
          ],
          "parameterTo": [
            "git_commit_lookup",
            "git_commit_new",
            "git_commit_id",
            "git_commit_message_short",
            "git_commit_message",
            "git_commit_time",
            "git_commit_time_offset",
            "git_commit_committer",
            "git_commit_author",
            "git_commit_tree",
            "git_commit_parentcount",
            "git_commit_parent",
            "git_commit_add_parent",
            "git_commit_set_message",
            "git_commit_set_committer",
            "git_commit_set_author",
            "git_commit_set_tree",
            "git_revwalk_push",
            "git_revwalk_hide",
            "git_revwalk_next"
          ]
        }
      },
      "info": {
        "summary": "Git commit parsing, formatting routines"
      }
    },
    "common": {
      "apis": {
        "GIT_EXTERN(type)": {
          "kind": "macro",
          "name": "GIT_EXTERN(type)",
          "location": {
            "file": "common.h",
            "line": 45,
            "column": 10
          },
          "value": "extern __attribute__((visibility(\"default\"))) type",
          "comment": "Declare a public function exported for application use.",
          "group": "common"
        },
        "GIT_EXTERN_TLS(type)": {
          "kind": "macro",
          "name": "GIT_EXTERN_TLS(type)",
          "location": {
            "file": "common.h",
            "line": 57,
            "column": 10
          },
          "value": "extern __attribute__((visibility(\"default\"))) GIT_TLS type",
          "comment": "Declare a public TLS symbol exported for application use.",
          "group": "common"
        },
        "GIT_INLINE(type)": {
          "kind": "macro",
          "name": "GIT_INLINE(type)",
          "location": {
            "file": "common.h",
            "line": 66,
            "column": 10
          },
          "value": "static __inline type",
          "comment": "Declare a function as always inlined.",
          "group": "common"
        },
        "GIT_FORMAT_PRINTF(a,b)": {
          "kind": "macro",
          "name": "GIT_FORMAT_PRINTF(a,b)",
          "location": {
            "file": "common.h",
            "line": 73,
            "column": 10
          },
          "value": "__attribute__((format (printf, a, b)))",
          "comment": "Declare a function's takes printf style arguments.",
          "group": "common"
        },
        "GIT_SUCCESS": {
          "kind": "macro",
          "name": "GIT_SUCCESS",
          "location": {
            "file": "common.h",
            "line": 87,
            "column": 9
          },
          "value": "0",
          "comment": "Operation completed successfully.",
          "group": "common"
        },
        "GIT_ERROR": {
          "kind": "macro",
          "name": "GIT_ERROR",
          "location": {
            "file": "common.h",
            "line": 95,
            "column": 9
          },
          "value": "-1",
          "comment": "Operation failed, with unspecified reason. This value also serves as the base error code; all other error codes are subtracted from it such that all errors are < 0, in typical POSIX C tradition.",
          "group": "common"
        },
        "GIT_ENOTOID": {
          "kind": "macro",
          "name": "GIT_ENOTOID",
          "location": {
            "file": "common.h",
            "line": 98,
            "column": 9
          },
          "value": "(GIT_ERROR - 1)",
          "comment": "Input was not a properly formatted Git object id.",
          "group": "common"
        },
        "GIT_ENOTFOUND": {
          "kind": "macro",
          "name": "GIT_ENOTFOUND",
          "location": {
            "file": "common.h",
            "line": 101,
            "column": 9
          },
          "value": "(GIT_ERROR - 2)",
          "comment": "Input does not exist in the scope searched.",
          "group": "common"
        },
        "GIT_ENOMEM": {
          "kind": "macro",
          "name": "GIT_ENOMEM",
          "location": {
            "file": "common.h",
            "line": 104,
            "column": 9
          },
          "value": "(GIT_ERROR - 3)",
          "comment": "Not enough space available.",
          "group": "common"
        },
        "GIT_EOSERR": {
          "kind": "macro",
          "name": "GIT_EOSERR",
          "location": {
            "file": "common.h",
            "line": 107,
            "column": 9
          },
          "value": "(GIT_ERROR - 4)",
          "comment": "Consult the OS error information.",
          "group": "common"
        },
        "GIT_EOBJTYPE": {
          "kind": "macro",
          "name": "GIT_EOBJTYPE",
          "location": {
            "file": "common.h",
            "line": 110,
            "column": 9
          },
          "value": "(GIT_ERROR - 5)",
          "comment": "The specified object is of invalid type",
          "group": "common"
        },
        "GIT_EOBJCORRUPTED": {
          "kind": "macro",
          "name": "GIT_EOBJCORRUPTED",
          "location": {
            "file": "common.h",
            "line": 113,
            "column": 9
          },
          "value": "(GIT_ERROR - 6)",
          "comment": "The specified object has its data corrupted",
          "group": "common"
        },
        "GIT_ENOTAREPO": {
          "kind": "macro",
          "name": "GIT_ENOTAREPO",
          "location": {
            "file": "common.h",
            "line": 116,
            "column": 9
          },
          "value": "(GIT_ERROR - 7)",
          "comment": "The specified repository is invalid",
          "group": "common"
        },
        "GIT_EINVALIDTYPE": {
          "kind": "macro",
          "name": "GIT_EINVALIDTYPE",
          "location": {
            "file": "common.h",
            "line": 119,
            "column": 9
          },
          "value": "(GIT_ERROR - 8)",
          "comment": "The object type is invalid or doesn't match",
          "group": "common"
        },
        "GIT_EMISSINGOBJDATA": {
          "kind": "macro",
          "name": "GIT_EMISSINGOBJDATA",
          "location": {
            "file": "common.h",
            "line": 122,
            "column": 9
          },
          "value": "(GIT_ERROR - 9)",
          "comment": "The object cannot be written that because it's missing internal data",
          "group": "common"
        },
        "GIT_EPACKCORRUPTED": {
          "kind": "macro",
          "name": "GIT_EPACKCORRUPTED",
          "location": {
            "file": "common.h",
            "line": 125,
            "column": 9
          },
          "value": "(GIT_ERROR - 10)",
          "comment": "The packfile for the ODB is corrupted",
          "group": "common"
        },
        "GIT_EFLOCKFAIL": {
          "kind": "macro",
          "name": "GIT_EFLOCKFAIL",
          "location": {
            "file": "common.h",
            "line": 128,
            "column": 9
          },
          "value": "(GIT_ERROR - 11)",
          "comment": "Failed to adquire or release a file lock",
          "group": "common"
        },
        "GIT_EZLIB": {
          "kind": "macro",
          "name": "GIT_EZLIB",
          "location": {
            "file": "common.h",
            "line": 131,
            "column": 9
          },
          "value": "(GIT_ERROR - 12)",
          "comment": "The Z library failed to inflate/deflate an object's data",
          "group": "common"
        },
        "GIT_EBUSY": {
          "kind": "macro",
          "name": "GIT_EBUSY",
          "location": {
            "file": "common.h",
            "line": 134,
            "column": 9
          },
          "value": "(GIT_ERROR - 13)",
          "comment": "The queried object is currently busy",
          "group": "common"
        },
        "GIT_EBAREINDEX": {
          "kind": "macro",
          "name": "GIT_EBAREINDEX",
          "location": {
            "file": "common.h",
            "line": 137,
            "column": 9
          },
          "value": "(GIT_ERROR - 14)",
          "comment": "The index file is not backed up by an existing repository",
          "group": "common"
        },
        "GIT_EINVALIDREFNAME": {
          "kind": "macro",
          "name": "GIT_EINVALIDREFNAME",
          "location": {
            "file": "common.h",
            "line": 140,
            "column": 9
          },
          "value": "(GIT_ERROR - 15)",
          "comment": "The name of the reference is not valid",
          "group": "common"
        },
        "GIT_EREFCORRUPTED": {
          "kind": "macro",
          "name": "GIT_EREFCORRUPTED",
          "location": {
            "file": "common.h",
            "line": 143,
            "column": 9
          },
          "value": "(GIT_ERROR - 16)",
          "comment": "The specified reference has its data corrupted",
          "group": "common"
        },
        "GIT_ETOONESTEDSYMREF": {
          "kind": "macro",
          "name": "GIT_ETOONESTEDSYMREF",
          "location": {
            "file": "common.h",
            "line": 146,
            "column": 9
          },
          "value": "(GIT_ERROR - 17)",
          "comment": "The specified symbolic reference is too deeply nested",
          "group": "common"
        },
        "GIT_EPACKEDREFSCORRUPTED": {
          "kind": "macro",
          "name": "GIT_EPACKEDREFSCORRUPTED",
          "location": {
            "file": "common.h",
            "line": 149,
            "column": 9
          },
          "value": "(GIT_ERROR - 18)",
          "comment": "The pack-refs file is either corrupted of its format is not currently supported",
          "group": "common"
        },
        "GIT_EINVALIDPATH": {
          "kind": "macro",
          "name": "GIT_EINVALIDPATH",
          "location": {
            "file": "common.h",
            "line": 152,
            "column": 9
          },
          "value": "(GIT_ERROR - 19)",
          "comment": "The path is invalid",
          "group": "common"
        },
        "GIT_EREVWALKOVER": {
          "kind": "macro",
          "name": "GIT_EREVWALKOVER",
          "location": {
            "file": "common.h",
            "line": 155,
            "column": 9
          },
          "value": "(GIT_ERROR - 20)",
          "comment": "The revision walker is empty; there are no more commits left to iterate",
          "group": "common"
        },
        "GIT_EINVALIDREFSTATE": {
          "kind": "macro",
          "name": "GIT_EINVALIDREFSTATE",
          "location": {
            "file": "common.h",
            "line": 158,
            "column": 9
          },
          "value": "(GIT_ERROR - 21)",
          "comment": "The state of the reference is not valid",
          "group": "common"
        }
      },
      "info": {
        "details": "#define GIT_EINVALIDREFSTATE (GIT_ERROR - 21)"
      }
    },
    "errors": {
      "apis": {
        "git_strerror": {
          "kind": "function",
          "name": "git_strerror",
          "location": {
            "file": "errors.h",
            "line": 41,
            "column": 26
          },
          "returns": {
            "type": "const char *",
            "comment": "a string explaining the error code"
          },
          "params": [
            {
              "name": "num",
              "type": "int",
              "direction": "in",
              "comment": "The error code to explain"
            }
          ],
          "comment": [
            "strerror() for the Git library"
          ],
          "group": "errors"
        }
      },
      "info": {
        "summary": "Git error handling routines and variables"
      }
    },
    "index": {
      "apis": {
        "GIT_IDXENTRY_NAMEMASK": {
          "kind": "macro",
          "name": "GIT_IDXENTRY_NAMEMASK",
          "location": {
            "file": "index.h",
            "line": 41,
            "column": 9
          },
          "value": "(0x0fff)",
          "comment": "",
          "group": "index"
        },
        "GIT_IDXENTRY_STAGEMASK": {
          "kind": "macro",
          "name": "GIT_IDXENTRY_STAGEMASK",
          "location": {
            "file": "index.h",
            "line": 42,
            "column": 9
          },
          "value": "(0x3000)",
          "comment": "",
          "group": "index"
        },
        "GIT_IDXENTRY_EXTENDED": {
          "kind": "macro",
          "name": "GIT_IDXENTRY_EXTENDED",
          "location": {
            "file": "index.h",
            "line": 43,
            "column": 9
          },
          "value": "(0x4000)",
          "comment": "",
          "group": "index"
        },
        "GIT_IDXENTRY_VALID": {
          "kind": "macro",
          "name": "GIT_IDXENTRY_VALID",
          "location": {
            "file": "index.h",
            "line": 44,
            "column": 9
          },
          "value": "(0x8000)",
          "comment": "",
          "group": "index"
        },
        "GIT_IDXENTRY_STAGESHIFT": {
          "kind": "macro",
          "name": "GIT_IDXENTRY_STAGESHIFT",
          "location": {
            "file": "index.h",
            "line": 45,
            "column": 9
          },
          "value": "12",
          "comment": "",
          "group": "index"
        },
        "git_index_time": {
          "kind": "struct",
          "name": "git_index_time",
          "referenceName": "git_index_time",
          "comment": [
            "Time used in a git index entry"
          ],
          "members": [
            {
              "name": "seconds",
              "type": "git_time_t",
              "referenceType": "time_t"
            },
            {
              "name": "nanoseconds",
              "type": "unsigned int"
            }
          ],
          "location": {
            "file": "index.h",
            "line": 48,
            "column": 9
          },
          "group": "index"
        },
        "git_index_entry": {
          "kind": "struct",
          "name": "git_index_entry",
          "referenceName": "git_index_entry",
          "comment": [
            "Memory representation of a file entry in the index."
          ],
          "members": [
            {
              "name": "ctime",
              "type": "git_index_time",
              "referenceType": "struct git_index_time"
            },
            {
              "name": "mtime",
              "type": "git_index_time",
              "referenceType": "struct git_index_time"
            },
            {
              "name": "dev",
              "type": "unsigned int"
            },
            {
              "name": "ino",
              "type": "unsigned int"
            },
            {
              "name": "mode",
              "type": "unsigned int"
            },
            {
              "name": "uid",
              "type": "unsigned int"
            },
            {
              "name": "gid",
              "type": "unsigned int"
            },
            {
              "name": "file_size",
              "type": "git_off_t",
              "referenceType": "long long"
            },
            {
              "name": "oid",
              "type": "git_oid",
              "referenceType": "struct git_oid"
            },
            {
              "name": "flags",
              "type": "unsigned short"
            },
            {
              "name": "flags_extended",
              "type": "unsigned short"
            },
            {
              "name": "path",
              "type": "char *"
            }
          ],
          "location": {
            "file": "index.h",
            "line": 55,
            "column": 16
          },
          "group": "index",
          "returnedBy": [
            "git_index_get"
          ],
          "parameterTo": [
            "git_index_insert"
          ]
        },
        "git_index_open_bare": {
          "kind": "function",
          "name": "git_index_open_bare",
          "location": {
            "file": "index.h",
            "line": 88,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success; error code otherwise"
          },
          "params": [
            {
              "name": "index",
              "type": "git_index **",
              "direction": "in",
              "comment": "the pointer for the new index"
            },
            {
              "name": "index_path",
              "type": "const char *",
              "direction": "in",
              "comment": "the path to the index file in disk"
            }
          ],
          "comment": [
            "Create a new Git index object as a memory representation\n of the Git index file in 'index_path', without a repository\n to back it.",
            "Since there is no ODB behind this index, any Index methods\n which rely on the ODB (e.g. index_add) will fail with the\n GIT_EBAREINDEX error code."
          ],
          "group": "index"
        },
        "git_index_open_inrepo": {
          "kind": "function",
          "name": "git_index_open_inrepo",
          "location": {
            "file": "index.h",
            "line": 98,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success; error code otherwise"
          },
          "params": [
            {
              "name": "index",
              "type": "git_index **"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the git repo which owns the index"
            }
          ],
          "comment": [
            "Open the Index inside the git repository pointed\n by 'repo'."
          ],
          "group": "index"
        },
        "git_index_clear": {
          "kind": "function",
          "name": "git_index_clear",
          "location": {
            "file": "index.h",
            "line": 107,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "index",
              "type": "git_index *",
              "direction": "in",
              "comment": "an existing index object"
            }
          ],
          "comment": [
            "Clear the contents (all the entries) of an index object.\n This clears the index object in memory; changes must be manually\n written to disk for them to take effect."
          ],
          "group": "index"
        },
        "git_index_free": {
          "kind": "function",
          "name": "git_index_free",
          "location": {
            "file": "index.h",
            "line": 114,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "index",
              "type": "git_index *",
              "direction": "in",
              "comment": "an existing index object"
            }
          ],
          "comment": [
            "Free an existing index object."
          ],
          "group": "index"
        },
        "git_index_read": {
          "kind": "function",
          "name": "git_index_read",
          "location": {
            "file": "index.h",
            "line": 123,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, otherwise an error code"
          },
          "params": [
            {
              "name": "index",
              "type": "git_index *",
              "direction": "in",
              "comment": "an existing index object"
            }
          ],
          "comment": [
            "Update the contents of an existing index object in memory\n by reading from the hard disk."
          ],
          "group": "index"
        },
        "git_index_write": {
          "kind": "function",
          "name": "git_index_write",
          "location": {
            "file": "index.h",
            "line": 132,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, otherwise an error code"
          },
          "params": [
            {
              "name": "index",
              "type": "git_index *",
              "direction": "in",
              "comment": "an existing index object"
            }
          ],
          "comment": [
            "Write an existing index object from memory back to disk\n using an atomic file lock."
          ],
          "group": "index"
        },
        "git_index_find": {
          "kind": "function",
          "name": "git_index_find",
          "location": {
            "file": "index.h",
            "line": 142,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "an index >= 0 if found, -1 otherwise"
          },
          "params": [
            {
              "name": "index",
              "type": "git_index *",
              "direction": "in",
              "comment": "an existing index object"
            },
            {
              "name": "path",
              "type": "const char *",
              "direction": "in",
              "comment": "path to search"
            }
          ],
          "comment": [
            "Find the first index of any entires which point to given\n path in the Git index."
          ],
          "group": "index"
        },
        "git_index_add": {
          "kind": "function",
          "name": "git_index_add",
          "location": {
            "file": "index.h",
            "line": 152,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, otherwise an error code"
          },
          "params": [
            {
              "name": "index",
              "type": "git_index *",
              "direction": "in",
              "comment": "an existing index object"
            },
            {
              "name": "path",
              "type": "const char *",
              "direction": "in",
              "comment": "filename to add"
            },
            {
              "name": "stage",
              "type": "int",
              "direction": "in",
              "comment": "stage for the entry"
            }
          ],
          "comment": [
            "Add or update an index entry from a file in disk."
          ],
          "group": "index"
        },
        "git_index_remove": {
          "kind": "function",
          "name": "git_index_remove",
          "location": {
            "file": "index.h",
            "line": 161,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, otherwise an error code"
          },
          "params": [
            {
              "name": "index",
              "type": "git_index *",
              "direction": "in",
              "comment": "an existing index object"
            },
            {
              "name": "position",
              "type": "int",
              "direction": "in",
              "comment": "position of the entry to remove"
            }
          ],
          "comment": [
            "Remove an entry from the index"
          ],
          "group": "index"
        },
        "git_index_insert": {
          "kind": "function",
          "name": "git_index_insert",
          "location": {
            "file": "index.h",
            "line": 174,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, otherwise an error code"
          },
          "params": [
            {
              "name": "index",
              "type": "git_index *",
              "direction": "in",
              "comment": "an existing index object"
            },
            {
              "name": "source_entry",
              "type": "const git_index_entry *",
              "direction": "in",
              "comment": "new entry object"
            }
          ],
          "comment": [
            "Insert an entry into the index.\n A full copy (including the 'path' string) of the given\n 'source_entry' will be inserted on the index; if the index\n already contains an entry for the same path, the entry\n will be updated."
          ],
          "group": "index"
        },
        "git_index_get": {
          "kind": "function",
          "name": "git_index_get",
          "location": {
            "file": "index.h",
            "line": 186,
            "column": 31
          },
          "returns": {
            "type": "git_index_entry *",
            "comment": "a pointer to the entry; NULL if out of bounds"
          },
          "params": [
            {
              "name": "index",
              "type": "git_index *",
              "direction": "in",
              "comment": "an existing index object"
            },
            {
              "name": "n",
              "type": "int",
              "direction": "in",
              "comment": "the position of the entry"
            }
          ],
          "comment": [
            "Get a pointer to one of the entries in the index",
            "This entry can be modified, and the changes will be written\n back to disk on the next write() call."
          ],
          "group": "index"
        },
        "git_index_entrycount": {
          "kind": "function",
          "name": "git_index_entrycount",
          "location": {
            "file": "index.h",
            "line": 194,
            "column": 26
          },
          "returns": {
            "type": "unsigned int",
            "comment": "integer of count of current entries"
          },
          "params": [
            {
              "name": "index",
              "type": "git_index *",
              "direction": "in",
              "comment": "an existing index object"
            }
          ],
          "comment": [
            "Get the count of entries currently in the index"
          ],
          "group": "index"
        },
        "git_index": {
          "kind": "struct",
          "name": "git_index",
          "referenceName": "struct git_index",
          "opaque": true,
          "comment": [
            "Memory representation of an index file."
          ],
          "location": {
            "file": "types.h",
            "line": 123,
            "column": 26
          },
          "group": "index",
          "parameterTo": [
            "git_index_open_bare",
            "git_index_open_inrepo",
            "git_index_clear",
            "git_index_free",
            "git_index_read",
            "git_index_write",
            "git_index_find",
            "git_index_add",
            "git_index_remove",
            "git_index_insert",
            "git_index_get",
            "git_index_entrycount",
            "git_repository_index"
          ]
        }
      },
      "info": {
        "summary": "Git index parsing and manipulation routines"
      }
    },
    "object": {
      "apis": {
        "git_object_lookup": {
          "kind": "function",
          "name": "git_object_lookup",
          "location": {
            "file": "object.h",
            "line": 58,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "a reference to the object"
          },
          "params": [
            {
              "name": "object",
              "type": "git_object **",
              "direction": "in",
              "comment": "pointer to the looked-up object"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repository to look up the object"
            },
            {
              "name": "id",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "the unique identifier for the object"
            },
            {
              "name": "type",
              "type": "git_otype",
              "direction": "in",
              "comment": "the type of the object",
              "referenceType": "enum git_otype"
            }
          ],
          "comment": [
            "Lookup a reference to one of the objects in a repostory.",
            "The generated reference is owned by the repository and\n should not be freed by the user.",
            "The 'type' parameter must match the type of the object\n in the odb; the method will fail otherwise.\n The special value 'GIT_OBJ_ANY' may be passed to let\n the method guess the object's type."
          ],
          "group": "object"
        },
        "git_object_new": {
          "kind": "function",
          "name": "git_object_new",
          "location": {
            "file": "object.h",
            "line": 81,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "the new object"
          },
          "params": [
            {
              "name": "object",
              "type": "git_object **",
              "direction": "in",
              "comment": "pointer to the new object"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "Repository where the object belongs"
            },
            {
              "name": "type",
              "type": "git_otype",
              "direction": "in",
              "comment": "Type of the object to be created",
              "referenceType": "enum git_otype"
            }
          ],
          "comment": [
            "Create a new in-memory repository object with\n the given type.",
            "The object's attributes can be filled in using the\n corresponding setter methods.",
            "The object will be written back to given git_repository\n when the git_object_write() function is called; objects\n cannot be written to disk until all their main\n attributes have been properly filled.",
            "Objects are instantiated with no SHA1 id; their id\n will be automatically generated when writing to the\n repository."
          ],
          "group": "object"
        },
        "git_object_write": {
          "kind": "function",
          "name": "git_object_write",
          "location": {
            "file": "object.h",
            "line": 101,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success; otherwise an error code"
          },
          "params": [
            {
              "name": "object",
              "type": "git_object *",
              "direction": "in",
              "comment": "Git object to write back"
            }
          ],
          "comment": [
            "Write back an object to disk.",
            "The object will be written to its corresponding\n repository.",
            "If the object has no changes since it was first\n read from the repository, no actions will take place.",
            "If the object has been modified since it was read from\n the repository, or it has been created from scratch\n in memory, it will be written to the repository and\n its SHA1 ID will be updated accordingly."
          ],
          "group": "object"
        },
        "git_object_id": {
          "kind": "function",
          "name": "git_object_id",
          "location": {
            "file": "object.h",
            "line": 112,
            "column": 29
          },
          "returns": {
            "type": "const git_oid *",
            "comment": "the SHA1 id"
          },
          "params": [
            {
              "name": "obj",
              "type": "const git_object *",
              "direction": "in",
              "comment": "the repository object"
            }
          ],
          "comment": [
            "Get the id (SHA1) of a repository object",
            "In-memory objects created by git_object_new() do not\n have a SHA1 ID until they are written on a repository."
          ],
          "group": "object"
        },
        "git_object_type": {
          "kind": "function",
          "name": "git_object_type",
          "location": {
            "file": "object.h",
            "line": 120,
            "column": 23
          },
          "returns": {
            "type": "git_otype",
            "comment": "the object's type"
          },
          "params": [
            {
              "name": "obj",
              "type": "const git_object *",
              "direction": "in",
              "comment": "the repository object"
            }
          ],
          "comment": [
            "Get the object type of an object"
          ],
          "group": "object"
        },
        "git_object_owner": {
          "kind": "function",
          "name": "git_object_owner",
          "location": {
            "file": "object.h",
            "line": 128,
            "column": 30
          },
          "returns": {
            "type": "git_repository *",
            "comment": "the repository who owns this object"
          },
          "params": [
            {
              "name": "obj",
              "type": "const git_object *",
              "direction": "in",
              "comment": "the object"
            }
          ],
          "comment": [
            "Get the repository that owns this object"
          ],
          "group": "object"
        },
        "git_object_close": {
          "kind": "function",
          "name": "git_object_close",
          "location": {
            "file": "object.h",
            "line": 151,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "object",
              "type": "git_object *",
              "direction": "in",
              "comment": "the object to close"
            }
          ],
          "comment": [
            "Close an open object",
            "This method instructs the library to close an existing\n object; note that git_objects are owned by the repository\n and are reference counted, so the object may or may not be\n freed after this library call, depending on whether any other \n objects still depend on it.",
            "IMPORTANT:\n It is *not* necessary to call this method when you stop using\n an object, since all object memory is automatically reclaimed\n by the repository when it is freed.",
            "Forgetting to call `git_object_close` does not cause memory\n leaks, but it's is recommended to close as soon as possible\n the biggest objects (e.g. blobs) to prevent wasting memory\n space."
          ],
          "group": "object"
        },
        "git_object_type2string": {
          "kind": "function",
          "name": "git_object_type2string",
          "location": {
            "file": "object.h",
            "line": 162,
            "column": 26
          },
          "returns": {
            "type": "const char *",
            "comment": "the corresponding string representation."
          },
          "params": [
            {
              "name": "type",
              "type": "git_otype",
              "direction": "in",
              "comment": "object type to convert.",
              "referenceType": "enum git_otype"
            }
          ],
          "comment": [
            "Convert an object type to it's string representation.",
            "The result is a pointer to a string in static memory and\n should not be free()'ed."
          ],
          "group": "object"
        },
        "git_object_string2type": {
          "kind": "function",
          "name": "git_object_string2type",
          "location": {
            "file": "object.h",
            "line": 170,
            "column": 23
          },
          "returns": {
            "type": "git_otype",
            "comment": "the corresponding git_otype."
          },
          "params": [
            {
              "name": "str",
              "type": "const char *",
              "direction": "in",
              "comment": "the string to convert."
            }
          ],
          "comment": [
            "Convert a string object type representation to it's git_otype."
          ],
          "group": "object"
        },
        "git_object_typeisloose": {
          "kind": "function",
          "name": "git_object_typeisloose",
          "location": {
            "file": "object.h",
            "line": 179,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "true if the type represents a valid loose object type,\n false otherwise."
          },
          "params": [
            {
              "name": "type",
              "type": "git_otype",
              "direction": "in",
              "comment": "object type to test.",
              "referenceType": "enum git_otype"
            }
          ],
          "comment": [
            "Determine if the given git_otype is a valid loose object type."
          ],
          "group": "object"
        },
        "git_object__size": {
          "kind": "function",
          "name": "git_object__size",
          "location": {
            "file": "object.h",
            "line": 193,
            "column": 20
          },
          "returns": {
            "type": "size_t",
            "comment": "size in bytes of the object"
          },
          "params": [
            {
              "name": "type",
              "type": "git_otype",
              "direction": "in",
              "comment": "object type to get its size",
              "referenceType": "enum git_otype"
            }
          ],
          "comment": [
            "Get the size in bytes for the structure which\n acts as an in-memory representation of any given\n object type.",
            "For all the core types, this would the equivalent\n of calling `sizeof(git_commit)` if the core types\n were not opaque on the external API."
          ],
          "group": "object"
        },
        "git_object": {
          "kind": "struct",
          "name": "git_object",
          "referenceName": "struct git_object",
          "opaque": true,
          "comment": [
            "Representation of a generic object in a repository"
          ],
          "location": {
            "file": "types.h",
            "line": 102,
            "column": 27
          },
          "group": "object",
          "returnedBy": [
            "git_tag_target"
          ],
          "parameterTo": [
            "git_object_lookup",
            "git_object_new",
            "git_object_write",
            "git_object_id",
            "git_object_type",
            "git_object_owner",
            "git_object_close",
            "git_tag_set_target",
            "git_tree_entry_2object"
          ]
        }
      },
      "info": {
        "summary": "Git revision object management routines"
      }
    },
    "odb": {
      "apis": {
        "git_odb_new": {
          "kind": "function",
          "name": "git_odb_new",
          "location": {
            "file": "odb.h",
            "line": 52,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "GIT_SUCCESS if the database was created; otherwise an error\n         code describing why the open was not possible."
          },
          "params": [
            {
              "name": "out",
              "type": "git_odb **",
              "direction": "in",
              "comment": "location to store the database pointer, if opened.\n            Set to NULL if the open failed."
            }
          ],
          "comment": [
            "Create a new object database with no backends.",
            "Before the ODB can be used for read/writing, a custom database\n backend must be manually added using `git_odb_add_backend()`"
          ],
          "group": "odb"
        },
        "git_odb_open": {
          "kind": "function",
          "name": "git_odb_open",
          "location": {
            "file": "odb.h",
            "line": 71,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "GIT_SUCCESS if the database opened; otherwise an error\n         code describing why the open was not possible."
          },
          "params": [
            {
              "name": "out",
              "type": "git_odb **",
              "direction": "in",
              "comment": "location to store the database pointer, if opened.\n            Set to NULL if the open failed."
            },
            {
              "name": "objects_dir",
              "type": "const char *",
              "direction": "in",
              "comment": "path of the backends' \"objects\" directory."
            }
          ],
          "comment": [
            "Create a new object database and automatically add\n the two default backends:",
            "- git_odb_backend_loose: read and write loose object files\n\t\tfrom disk, assuming `objects_dir` as the Objects folder",
            "- git_odb_backend_pack: read objects from packfiles,\n\t\tassuming `objects_dir` as the Objects folder which\n\t\tcontains a 'pack/' folder with the corresponding data"
          ],
          "group": "odb"
        },
        "git_odb_add_backend": {
          "kind": "function",
          "name": "git_odb_add_backend",
          "location": {
            "file": "odb.h",
            "line": 82,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on sucess; error code otherwise"
          },
          "params": [
            {
              "name": "odb",
              "type": "git_odb *",
              "direction": "in",
              "comment": "database to add the backend to"
            },
            {
              "name": "backend",
              "type": "git_odb_backend *",
              "direction": "in",
              "comment": "pointer to a git_odb_backend instance"
            },
            {
              "name": "priority",
              "type": "int"
            }
          ],
          "comment": [
            "Add a custom backend to an existing Object DB",
            "Read \n<odb\n_backends.h> for more information."
          ],
          "group": "odb"
        },
        "git_odb_add_alternate": {
          "kind": "function",
          "name": "git_odb_add_alternate",
          "location": {
            "file": "odb.h",
            "line": 99,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on sucess; error code otherwise"
          },
          "params": [
            {
              "name": "odb",
              "type": "git_odb *",
              "direction": "in",
              "comment": "database to add the backend to"
            },
            {
              "name": "backend",
              "type": "git_odb_backend *",
              "direction": "in",
              "comment": "pointer to a git_odb_backend instance"
            },
            {
              "name": "priority",
              "type": "int"
            }
          ],
          "comment": [
            "Add a custom backend to an existing Object DB; this\n backend will work as an alternate.",
            "Alternate backends are always checked for objects *after*\n all the main backends have been exhausted.",
            "Writing is disabled on alternate backends.",
            "Read \n<odb\n_backends.h> for more information."
          ],
          "group": "odb"
        },
        "git_odb_close": {
          "kind": "function",
          "name": "git_odb_close",
          "location": {
            "file": "odb.h",
            "line": 105,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "db",
              "type": "git_odb *",
              "direction": "in",
              "comment": "database pointer to close.  If NULL no action is taken."
            }
          ],
          "comment": [
            "Close an open object database."
          ],
          "group": "odb"
        },
        "git_rawobj": {
          "kind": "struct",
          "name": "git_rawobj",
          "referenceName": "git_rawobj",
          "comment": [
            "An object read from the database."
          ],
          "members": [
            {
              "name": "data",
              "type": "void *",
              "comment": [
                "Raw, decompressed object data."
              ]
            },
            {
              "name": "len",
              "type": "size_t",
              "comment": [
                "Total number of bytes in data."
              ]
            },
            {
              "name": "type",
              "type": "git_otype",
              "comment": [
                "Type of this object."
              ],
              "referenceType": "enum git_otype"
            }
          ],
          "location": {
            "file": "odb.h",
            "line": 108,
            "column": 9
          },
          "group": "odb",
          "parameterTo": [
            "git_odb_read",
            "git_odb_read_header",
            "git_odb_write",
            "git_rawobj_hash",
            "git_rawobj_close"
          ]
        },
        "git_odb_read": {
          "kind": "function",
          "name": "git_odb_read",
          "location": {
            "file": "odb.h",
            "line": 126,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "- GIT_SUCCESS if the object was read;\n - GIT_ENOTFOUND if the object is not in the database."
          },
          "params": [
            {
              "name": "out",
              "type": "git_rawobj *",
              "direction": "in",
              "comment": "object descriptor to populate upon reading."
            },
            {
              "name": "db",
              "type": "git_odb *",
              "direction": "in",
              "comment": "database to search for the object in."
            },
            {
              "name": "id",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "identity of the object to read."
            }
          ],
          "comment": [
            "Read an object from the database.",
            "If GIT_ENOTFOUND then out->data is set to NULL."
          ],
          "group": "odb"
        },
        "git_odb_read_header": {
          "kind": "function",
          "name": "git_odb_read_header",
          "location": {
            "file": "odb.h",
            "line": 145,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "- GIT_SUCCESS if the object was read;\n - GIT_ENOTFOUND if the object is not in the database."
          },
          "params": [
            {
              "name": "out",
              "type": "git_rawobj *",
              "direction": "in",
              "comment": "object descriptor to populate upon reading."
            },
            {
              "name": "db",
              "type": "git_odb *",
              "direction": "in",
              "comment": "database to search for the object in."
            },
            {
              "name": "id",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "identity of the object to read."
            }
          ],
          "comment": [
            "Read the header of an object from the database, without\n reading its full contents.",
            "Only the 'type' and 'len' fields of the git_rawobj structure\n are filled. The 'data' pointer will always be NULL.",
            "The raw object pointed by 'out' doesn't need to be manually\n closed with git_rawobj_close()."
          ],
          "group": "odb"
        },
        "git_odb_write": {
          "kind": "function",
          "name": "git_odb_write",
          "location": {
            "file": "odb.h",
            "line": 157,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "- GIT_SUCCESS if the object was written;\n - GIT_ERROR otherwise."
          },
          "params": [
            {
              "name": "id",
              "type": "git_oid *",
              "direction": "in",
              "comment": "identity of the object written."
            },
            {
              "name": "db",
              "type": "git_odb *",
              "direction": "in",
              "comment": "database to which the object should be written."
            },
            {
              "name": "obj",
              "type": "git_rawobj *",
              "direction": "in",
              "comment": "object descriptor for the object to write."
            }
          ],
          "comment": [
            "Write an object to the database."
          ],
          "group": "odb"
        },
        "git_odb_exists": {
          "kind": "function",
          "name": "git_odb_exists",
          "location": {
            "file": "odb.h",
            "line": 168,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "- true, if the object was found\n - false, otherwise"
          },
          "params": [
            {
              "name": "db",
              "type": "git_odb *",
              "direction": "in",
              "comment": "database to be searched for the given object."
            },
            {
              "name": "id",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "the object to search for."
            }
          ],
          "comment": [
            "Determine if the given object can be found in the object database."
          ],
          "group": "odb"
        },
        "git_rawobj_hash": {
          "kind": "function",
          "name": "git_rawobj_hash",
          "location": {
            "file": "odb.h",
            "line": 186,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "- GIT_SUCCESS if the object-ID was correctly determined.\n - GIT_ERROR if the given object is malformed."
          },
          "params": [
            {
              "name": "id",
              "type": "git_oid *",
              "direction": "in",
              "comment": "the resulting object-ID."
            },
            {
              "name": "obj",
              "type": "git_rawobj *",
              "direction": "in",
              "comment": "the object whose hash is to be determined."
            }
          ],
          "comment": [
            "Determine the object-ID (sha1 hash) of the given git_rawobj.",
            "The input obj must be a valid loose object type and the data\n pointer must not be NULL, unless the len field is also zero."
          ],
          "group": "odb"
        },
        "git_rawobj_close": {
          "kind": "function",
          "name": "git_rawobj_close",
          "location": {
            "file": "odb.h",
            "line": 197,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "obj",
              "type": "git_rawobj *",
              "direction": "in",
              "comment": "object descriptor to free."
            }
          ],
          "comment": [
            "Release all memory used by the obj structure.",
            "As a result of this call, obj->data will be set to NULL.",
            "If obj->data is already NULL, nothing happens."
          ],
          "group": "odb"
        },
        "git_odb": {
          "kind": "struct",
          "name": "git_odb",
          "referenceName": "struct git_odb",
          "opaque": true,
          "comment": [
            "An open object database handle."
          ],
          "location": {
            "file": "types.h",
            "line": 90,
            "column": 24
          },
          "group": "odb",
          "returnedBy": [
            "git_repository_database"
          ],
          "parameterTo": [
            "git_odb_new",
            "git_odb_open",
            "git_odb_add_backend",
            "git_odb_add_alternate",
            "git_odb_close",
            "git_odb_read",
            "git_odb_read_header",
            "git_odb_write",
            "git_odb_exists",
            "git_repository_open3"
          ]
        }
      },
      "info": {
        "summary": "Git object database routines"
      }
    },
    "odb_backend": {
      "apis": {
        "git_odb_backend": {
          "kind": "struct",
          "name": "git_odb_backend",
          "referenceName": "struct git_odb_backend",
          "comment": [
            "An instance for a custom backend"
          ],
          "members": [
            {
              "name": "odb",
              "type": "git_odb *"
            },
            {
              "name": "read",
              "type": "int (*)(git_rawobj *, struct git_odb_backend *, const git_oid *)"
            },
            {
              "name": "read_header",
              "type": "int (*)(git_rawobj *, struct git_odb_backend *, const git_oid *)"
            },
            {
              "name": "write",
              "type": "int (*)(git_oid *, struct git_odb_backend *, git_rawobj *)"
            },
            {
              "name": "exists",
              "type": "int (*)(struct git_odb_backend *, const git_oid *)"
            },
            {
              "name": "free",
              "type": "void (*)(struct git_odb_backend *)"
            }
          ],
          "location": {
            "file": "odb_backend.h",
            "line": 43,
            "column": 8
          },
          "group": "odb_backend",
          "parameterTo": [
            "git_odb_add_backend",
            "git_odb_add_alternate",
            "git_odb_backend_pack",
            "git_odb_backend_loose"
          ]
        },
        "git_odb_backend_pack": {
          "kind": "function",
          "name": "git_odb_backend_pack",
          "location": {
            "file": "odb_backend.h",
            "line": 68,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "backend_out",
              "type": "git_odb_backend **"
            },
            {
              "name": "objects_dir",
              "type": "const char *"
            }
          ],
          "group": "odb_backend"
        },
        "git_odb_backend_loose": {
          "kind": "function",
          "name": "git_odb_backend_loose",
          "location": {
            "file": "odb_backend.h",
            "line": 69,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "backend_out",
              "type": "git_odb_backend **"
            },
            {
              "name": "objects_dir",
              "type": "const char *"
            }
          ],
          "group": "odb_backend"
        }
      },
      "info": {
        "summary": "Git custom backend functions"
      }
    },
    "oid": {
      "apis": {
        "GIT_OID_RAWSZ": {
          "kind": "macro",
          "name": "GIT_OID_RAWSZ",
          "location": {
            "file": "oid.h",
            "line": 41,
            "column": 9
          },
          "value": "20",
          "comment": "Size (in bytes) of a raw/binary oid",
          "group": "oid"
        },
        "GIT_OID_HEXSZ": {
          "kind": "macro",
          "name": "GIT_OID_HEXSZ",
          "location": {
            "file": "oid.h",
            "line": 44,
            "column": 9
          },
          "value": "(GIT_OID_RAWSZ * 2)",
          "comment": "Size (in bytes) of a hex formatted oid",
          "group": "oid"
        },
        "git_oid": {
          "kind": "struct",
          "name": "git_oid",
          "referenceName": "git_oid",
          "comment": [
            "Unique identity of any object (commit, tree, blob, tag)."
          ],
          "members": [
            {
              "name": "id",
              "type": "unsigned char[20]",
              "comment": [
                "raw binary formatted id"
              ]
            }
          ],
          "location": {
            "file": "oid.h",
            "line": 47,
            "column": 9
          },
          "group": "oid",
          "returnedBy": [
            "git_commit_id",
            "git_object_id",
            "git_reference_oid",
            "git_tag_id",
            "git_tree_id",
            "git_tree_entry_id"
          ],
          "parameterTo": [
            "git_blob_lookup",
            "git_blob_writefile",
            "git_commit_lookup",
            "git_object_lookup",
            "git_odb_read",
            "git_odb_read_header",
            "git_odb_write",
            "git_odb_exists",
            "git_rawobj_hash",
            "git_oid_mkstr",
            "git_oid_mkraw",
            "git_oid_fmt",
            "git_oid_pathfmt",
            "git_oid_allocfmt",
            "git_oid_to_string",
            "git_oid_cpy",
            "git_oid_cmp",
            "git_reference_create_oid",
            "git_reference_set_oid",
            "git_tag_lookup",
            "git_tree_lookup",
            "git_tree_add_entry",
            "git_tree_entry_set_id"
          ]
        },
        "git_oid_mkstr": {
          "kind": "function",
          "name": "git_oid_mkstr",
          "location": {
            "file": "oid.h",
            "line": 60,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "GIT_SUCCESS if valid; GIT_ENOTOID on failure."
          },
          "params": [
            {
              "name": "out",
              "type": "git_oid *",
              "direction": "in",
              "comment": "oid structure the result is written into."
            },
            {
              "name": "str",
              "type": "const char *",
              "direction": "in",
              "comment": "input hex string; must be pointing at the start of\n        the hex sequence and have at least the number of bytes\n        needed for an oid encoded in hex (40 bytes)."
            }
          ],
          "comment": [
            "Parse a hex formatted object id into a git_oid."
          ],
          "group": "oid"
        },
        "git_oid_mkraw": {
          "kind": "function",
          "name": "git_oid_mkraw",
          "location": {
            "file": "oid.h",
            "line": 67,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "out",
              "type": "git_oid *",
              "direction": "in",
              "comment": "oid structure the result is written into."
            },
            {
              "name": "raw",
              "type": "const unsigned char *",
              "direction": "in",
              "comment": "the raw input bytes to be copied."
            }
          ],
          "comment": [
            "Copy an already raw oid into a git_oid structure."
          ],
          "group": "oid"
        },
        "git_oid_fmt": {
          "kind": "function",
          "name": "git_oid_fmt",
          "location": {
            "file": "oid.h",
            "line": 78,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "str",
              "type": "char *",
              "direction": "in",
              "comment": "output hex string; must be pointing at the start of\n        the hex sequence and have at least the number of bytes\n        needed for an oid encoded in hex (40 bytes).  Only the\n        oid digits are written; a '\n\\\n0' terminator must be added\n        by the caller if it is required."
            },
            {
              "name": "oid",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "oid structure to format."
            }
          ],
          "comment": [
            "Format a git_oid into a hex string."
          ],
          "group": "oid"
        },
        "git_oid_pathfmt": {
          "kind": "function",
          "name": "git_oid_pathfmt",
          "location": {
            "file": "oid.h",
            "line": 93,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "str",
              "type": "char *",
              "direction": "in",
              "comment": "output hex string; must be pointing at the start of\n        the hex sequence and have at least the number of bytes\n        needed for an oid encoded in hex (41 bytes).  Only the\n        oid digits are written; a '\n\\\n0' terminator must be added\n        by the caller if it is required."
            },
            {
              "name": "oid",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "oid structure to format."
            }
          ],
          "comment": [
            "Format a git_oid into a loose-object path string.\n \n\n The resulting string is \"aa/...\", where \"aa\" is the first two\n hex digitis of the oid and \"...\" is the remaining 38 digits."
          ],
          "group": "oid"
        },
        "git_oid_allocfmt": {
          "kind": "function",
          "name": "git_oid_allocfmt",
          "location": {
            "file": "oid.h",
            "line": 101,
            "column": 20
          },
          "returns": {
            "type": "char *",
            "comment": "the c-string; NULL if memory is exhausted.  Caller must\n         deallocate the string with free()."
          },
          "params": [
            {
              "name": "oid",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "the oid structure to format"
            }
          ],
          "comment": [
            "Format a gid_oid into a newly allocated c-string."
          ],
          "group": "oid"
        },
        "git_oid_to_string": {
          "kind": "function",
          "name": "git_oid_to_string",
          "location": {
            "file": "oid.h",
            "line": 118,
            "column": 20
          },
          "returns": {
            "type": "char *",
            "comment": "the out buffer pointer, assuming no input parameter\n         errors, otherwise a pointer to an empty string."
          },
          "params": [
            {
              "name": "out",
              "type": "char *",
              "direction": "in",
              "comment": "the buffer into which the oid string is output."
            },
            {
              "name": "n",
              "type": "size_t",
              "direction": "in",
              "comment": "the size of the out buffer."
            },
            {
              "name": "oid",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "the oid structure to format."
            }
          ],
          "comment": [
            "Format a git_oid into a buffer as a hex format c-string.\n \n\n If the buffer is smaller than GIT_OID_HEXSZ+1, then the resulting\n oid c-string will be truncated to n-1 characters. If there are\n any input parameter errors (out == NULL, n == 0, oid == NULL),\n then a pointer to an empty string is returned, so that the return\n value can always be printed."
          ],
          "group": "oid"
        },
        "git_oid_cpy": {
          "kind": "function",
          "name": "git_oid_cpy",
          "location": {
            "file": "oid.h",
            "line": 125,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "out",
              "type": "git_oid *",
              "direction": "in",
              "comment": "oid structure the result is written into."
            },
            {
              "name": "src",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "oid structure to copy from."
            }
          ],
          "comment": [
            "Copy an oid from one structure to another."
          ],
          "group": "oid"
        },
        "git_oid_cmp": {
          "kind": "function",
          "name": "git_oid_cmp",
          "location": {
            "file": "oid.h",
            "line": 133,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "<\n0, 0, >0 if a \n<\n b, a == b, a > b."
          },
          "params": [
            {
              "name": "a",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "first oid structure."
            },
            {
              "name": "b",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "second oid structure."
            }
          ],
          "comment": [
            "Compare two oid structures."
          ],
          "group": "oid"
        }
      },
      "info": {
        "summary": "Git object id routines"
      }
    },
    "refs": {
      "apis": {
        "git_reference_lookup": {
          "kind": "function",
          "name": "git_reference_lookup",
          "location": {
            "file": "refs.h",
            "line": 52,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success; error code otherwise"
          },
          "params": [
            {
              "name": "reference_out",
              "type": "git_reference **",
              "direction": "in",
              "comment": "pointer to the looked-up reference"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repository to look up the reference"
            },
            {
              "name": "name",
              "type": "const char *",
              "direction": "in",
              "comment": "the long name for the reference (e.g. HEAD, ref/heads/master, refs/tags/v0.1.0, ...)"
            }
          ],
          "comment": [
            "Lookup a reference by its name in a repository.",
            "The generated reference is owned by the repository and\n should not be freed by the user."
          ],
          "group": "refs"
        },
        "git_reference_create_symbolic": {
          "kind": "function",
          "name": "git_reference_create_symbolic",
          "location": {
            "file": "refs.h",
            "line": 69,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success; error code otherwise"
          },
          "params": [
            {
              "name": "ref_out",
              "type": "git_reference **",
              "direction": "in",
              "comment": "Pointer to the newly created reference"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "Repository where that reference will live"
            },
            {
              "name": "name",
              "type": "const char *",
              "direction": "in",
              "comment": "The name of the reference"
            },
            {
              "name": "target",
              "type": "const char *",
              "direction": "in",
              "comment": "The target of the reference"
            }
          ],
          "comment": [
            "Create a new symbolic reference.",
            "The reference will be created in the repository and written\n to the disk.",
            "This reference is owned by the repository and shall not\n be free'd by the user."
          ],
          "group": "refs"
        },
        "git_reference_create_oid": {
          "kind": "function",
          "name": "git_reference_create_oid",
          "location": {
            "file": "refs.h",
            "line": 86,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success; error code otherwise"
          },
          "params": [
            {
              "name": "ref_out",
              "type": "git_reference **",
              "direction": "in",
              "comment": "Pointer to the newly created reference"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "Repository where that reference will live"
            },
            {
              "name": "name",
              "type": "const char *",
              "direction": "in",
              "comment": "The name of the reference"
            },
            {
              "name": "id",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "The object id pointed to by the reference."
            }
          ],
          "comment": [
            "Create a new object id reference.",
            "The reference will be created in the repository and written\n to the disk.",
            "This reference is owned by the repository and shall not\n be free'd by the user."
          ],
          "group": "refs"
        },
        "git_reference_oid": {
          "kind": "function",
          "name": "git_reference_oid",
          "location": {
            "file": "refs.h",
            "line": 96,
            "column": 29
          },
          "returns": {
            "type": "const git_oid *",
            "comment": "a pointer to the oid if available, NULL otherwise"
          },
          "params": [
            {
              "name": "ref",
              "type": "git_reference *",
              "direction": "in",
              "comment": "The reference"
            }
          ],
          "comment": [
            "Get the OID pointed to by a reference.",
            "Only available if the reference is direct (i.e. not symbolic)"
          ],
          "group": "refs"
        },
        "git_reference_target": {
          "kind": "function",
          "name": "git_reference_target",
          "location": {
            "file": "refs.h",
            "line": 106,
            "column": 26
          },
          "returns": {
            "type": "const char *",
            "comment": "a pointer to the name if available, NULL otherwise"
          },
          "params": [
            {
              "name": "ref",
              "type": "git_reference *",
              "direction": "in",
              "comment": "The reference"
            }
          ],
          "comment": [
            "Get full name to the reference pointed by this reference",
            "Only available if the reference is symbolic"
          ],
          "group": "refs"
        },
        "git_reference_type": {
          "kind": "function",
          "name": "git_reference_type",
          "location": {
            "file": "refs.h",
            "line": 116,
            "column": 23
          },
          "returns": {
            "type": "git_rtype",
            "comment": "the type"
          },
          "params": [
            {
              "name": "ref",
              "type": "git_reference *",
              "direction": "in",
              "comment": "The reference"
            }
          ],
          "comment": [
            "Get the type of a reference",
            "Either direct (GIT_REF_OID) or symbolic (GIT_REF_SYMBOLIC)"
          ],
          "group": "refs"
        },
        "git_reference_name": {
          "kind": "function",
          "name": "git_reference_name",
          "location": {
            "file": "refs.h",
            "line": 124,
            "column": 26
          },
          "returns": {
            "type": "const char *",
            "comment": "the full name for the ref"
          },
          "params": [
            {
              "name": "ref",
              "type": "git_reference *",
              "direction": "in",
              "comment": "The reference"
            }
          ],
          "comment": [
            "Get the full name of a reference"
          ],
          "group": "refs"
        },
        "git_reference_resolve": {
          "kind": "function",
          "name": "git_reference_resolve",
          "location": {
            "file": "refs.h",
            "line": 139,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success; error code otherwise"
          },
          "params": [
            {
              "name": "resolved_ref",
              "type": "git_reference **",
              "direction": "in",
              "comment": "Pointer to the peeled reference"
            },
            {
              "name": "ref",
              "type": "git_reference *",
              "direction": "in",
              "comment": "The reference"
            }
          ],
          "comment": [
            "Resolve a symbolic reference",
            "Thie method iteratively peels a symbolic reference\n until it resolves to a direct reference to an OID.",
            "If a direct reference is passed as an argument,\n that reference is returned immediately"
          ],
          "group": "refs"
        },
        "git_reference_owner": {
          "kind": "function",
          "name": "git_reference_owner",
          "location": {
            "file": "refs.h",
            "line": 147,
            "column": 30
          },
          "returns": {
            "type": "git_repository *",
            "comment": "a pointer to the repo"
          },
          "params": [
            {
              "name": "ref",
              "type": "git_reference *",
              "direction": "in",
              "comment": "The reference"
            }
          ],
          "comment": [
            "Get the repository where a reference resides"
          ],
          "group": "refs"
        },
        "git_reference_set_target": {
          "kind": "function",
          "name": "git_reference_set_target",
          "location": {
            "file": "refs.h",
            "line": 162,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success; error code otherwise"
          },
          "params": [
            {
              "name": "ref",
              "type": "git_reference *",
              "direction": "in",
              "comment": "The reference"
            },
            {
              "name": "target",
              "type": "const char *",
              "direction": "in",
              "comment": "The new target for the reference"
            }
          ],
          "comment": [
            "Set the symbolic target of a reference.",
            "The reference must be a symbolic reference, otherwise\n this method will fail.",
            "The reference will be automatically updated in\n memory and on disk."
          ],
          "group": "refs"
        },
        "git_reference_set_oid": {
          "kind": "function",
          "name": "git_reference_set_oid",
          "location": {
            "file": "refs.h",
            "line": 177,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success; error code otherwise"
          },
          "params": [
            {
              "name": "ref",
              "type": "git_reference *",
              "direction": "in",
              "comment": "The reference"
            },
            {
              "name": "id",
              "type": "const git_oid *"
            }
          ],
          "comment": [
            "Set the OID target of a reference.",
            "The reference must be a direct reference, otherwise\n this method will fail.",
            "The reference will be automatically updated in\n memory and on disk."
          ],
          "group": "refs"
        },
        "git_reference_rename": {
          "kind": "function",
          "name": "git_reference_rename",
          "location": {
            "file": "refs.h",
            "line": 190,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "ref",
              "type": "git_reference *"
            },
            {
              "name": "new_name",
              "type": "const char *"
            }
          ],
          "comment": [
            "Rename an existing reference",
            "This method works for both direct and symbolic references.\n The new name will be checked for validity and may be\n modified into a normalized form.",
            "The refernece will be immediately renamed in-memory\n and on disk."
          ],
          "group": "refs"
        },
        "git_reference_delete": {
          "kind": "function",
          "name": "git_reference_delete",
          "location": {
            "file": "refs.h",
            "line": 201,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "ref",
              "type": "git_reference *"
            }
          ],
          "comment": [
            "Delete an existing reference",
            "This method works for both direct and symbolic references.",
            "The reference will be immediately removed on disk and from\n memory. The given reference pointer will no longer be valid."
          ],
          "group": "refs"
        },
        "git_reference_packall": {
          "kind": "function",
          "name": "git_reference_packall",
          "location": {
            "file": "refs.h",
            "line": 219,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success; error code otherwise"
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "Repository where the loose refs will be packed"
            }
          ],
          "comment": [
            "Pack all the loose references in the repository",
            "This method will load into the cache all the loose\n references on the repository and update the \n `packed-refs` file with them.",
            "Once the `packed-refs` file has been written properly,\n the loose references will be removed from disk.",
            "WARNING: calling this method may invalidate any existing\n references previously loaded on the cache."
          ],
          "group": "refs"
        },
        "git_reference": {
          "kind": "struct",
          "name": "git_reference",
          "referenceName": "struct git_reference",
          "opaque": true,
          "comment": [
            "In-memory representation of a reference."
          ],
          "location": {
            "file": "types.h",
            "line": 139,
            "column": 30
          },
          "group": "refs",
          "parameterTo": [
            "git_reference_lookup",
            "git_reference_create_symbolic",
            "git_reference_create_oid",
            "git_reference_oid",
            "git_reference_target",
            "git_reference_type",
            "git_reference_name",
            "git_reference_resolve",
            "git_reference_owner",
            "git_reference_set_target",
            "git_reference_set_oid",
            "git_reference_rename",
            "git_reference_delete"
          ]
        }
      },
      "info": {
        "summary": "Git reference management routines"
      }
    },
    "repository": {
      "apis": {
        "git_repository_open": {
          "kind": "function",
          "name": "git_repository_open",
          "location": {
            "file": "repository.h",
            "line": 64,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success; error code otherwise"
          },
          "params": [
            {
              "name": "repository",
              "type": "git_repository **",
              "direction": "in",
              "comment": "pointer to the repo which will be opened"
            },
            {
              "name": "path",
              "type": "const char *",
              "direction": "in",
              "comment": "the path to the repository"
            }
          ],
          "comment": [
            "Open a git repository.",
            "The 'path' argument must point to an existing git repository\n folder, e.g.",
            "/path/to/my_repo/.git/\t(normal repository)\n\t\t\t\t\t\t\tobjects/\n\t\t\t\t\t\t\tindex\n\t\t\t\t\t\t\tHEAD",
            "/path/to/bare_repo/\t\t(bare repository)\n\t\t\t\t\t\tobjects/\n\t\t\t\t\t\tindex\n\t\t\t\t\t\tHEAD",
            "The method will automatically detect if 'path' is a normal\n\tor bare repository or fail is 'path' is neither."
          ],
          "group": "repository"
        },
        "git_repository_open2": {
          "kind": "function",
          "name": "git_repository_open2",
          "location": {
            "file": "repository.h",
            "line": 93,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success; error code otherwise"
          },
          "params": [
            {
              "name": "repository",
              "type": "git_repository **",
              "direction": "in",
              "comment": "pointer to the repo which will be opened"
            },
            {
              "name": "git_dir",
              "type": "const char *",
              "direction": "in",
              "comment": "The full path to the repository folder\n\t\te.g. a '.git' folder for live repos, any folder for bare\n\t\tEquivalent to $GIT_DIR. \n\t\tCannot be NULL."
            },
            {
              "name": "git_object_directory",
              "type": "const char *",
              "direction": "in",
              "comment": "The full path to the ODB folder.\n\t\tthe folder where all the loose and packed objects are stored\n\t\tEquivalent to $GIT_OBJECT_DIRECTORY.\n\t\tIf NULL, \"$GIT_DIR/objects/\" is assumed."
            },
            {
              "name": "git_index_file",
              "type": "const char *",
              "direction": "in",
              "comment": "The full path to the index (dircache) file\n\t\tEquivalent to $GIT_INDEX_FILE.\n\t\tIf NULL, \"$GIT_DIR/index\" is assumed."
            },
            {
              "name": "git_work_tree",
              "type": "const char *",
              "direction": "in",
              "comment": "The full path to the working tree of the repository,\n\t\tif the repository is not bare.\n\t\tEquivalent to $GIT_WORK_TREE.\n\t\tIf NULL, the repository is assumed to be bare."
            }
          ],
          "comment": [
            "Open a git repository by manually specifying all its paths"
          ],
          "group": "repository"
        },
        "git_repository_open3": {
          "kind": "function",
          "name": "git_repository_open3",
          "location": {
            "file": "repository.h",
            "line": 129,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success; error code otherwise"
          },
          "params": [
            {
              "name": "repository",
              "type": "git_repository **",
              "direction": "in",
              "comment": "pointer to the repo which will be opened"
            },
            {
              "name": "git_dir",
              "type": "const char *",
              "direction": "in",
              "comment": "The full path to the repository folder\n\t\te.g. a '.git' folder for live repos, any folder for bare\n\t\tEquivalent to $GIT_DIR. \n\t\tCannot be NULL."
            },
            {
              "name": "object_database",
              "type": "git_odb *",
              "direction": "in",
              "comment": "A pointer to a git_odb created \n&\n initialized\n\t\tby the user (e.g. with custom backends). This object database\n\t\twill be owned by the repository and will be automatically free'd.\n\t\tIt should not be manually free'd by the user, or this\n\t\tgit_repository object will become invalid."
            },
            {
              "name": "git_index_file",
              "type": "const char *",
              "direction": "in",
              "comment": "The full path to the index (dircache) file\n\t\tEquivalent to $GIT_INDEX_FILE.\n\t\tIf NULL, \"$GIT_DIR/index\" is assumed."
            },
            {
              "name": "git_work_tree",
              "type": "const char *",
              "direction": "in",
              "comment": "The full path to the working tree of the repository,\n\t\tif the repository is not bare.\n\t\tEquivalent to $GIT_WORK_TREE.\n\t\tIf NULL, the repository is assumed to be bare."
            }
          ],
          "comment": [
            "Open a git repository by manually specifying its paths and\n the object database it will use."
          ],
          "group": "repository"
        },
        "git_repository_database": {
          "kind": "function",
          "name": "git_repository_database",
          "location": {
            "file": "repository.h",
            "line": 141,
            "column": 23
          },
          "returns": {
            "type": "git_odb *",
            "comment": "a pointer to the object db"
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "a repository object"
            }
          ],
          "comment": [
            "Get the object database behind a Git repository"
          ],
          "group": "repository"
        },
        "git_repository_index": {
          "kind": "function",
          "name": "git_repository_index",
          "location": {
            "file": "repository.h",
            "line": 153,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success; error code if the index could not be opened"
          },
          "params": [
            {
              "name": "index",
              "type": "git_index **",
              "direction": "in",
              "comment": "Pointer where to store the index"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "a repository object"
            }
          ],
          "comment": [
            "Get the Index file of a Git repository",
            "This is a cheap operation; the index is only opened on the first call,\n and subsequent calls only retrieve the previous pointer."
          ],
          "group": "repository"
        },
        "git_repository_free": {
          "kind": "function",
          "name": "git_repository_free",
          "location": {
            "file": "repository.h",
            "line": 159,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "repository handle to close. If NULL nothing occurs."
            }
          ],
          "comment": [
            "Free a previously allocated repository"
          ],
          "group": "repository"
        },
        "git_repository_free__no_gc": {
          "kind": "function",
          "name": "git_repository_free__no_gc",
          "location": {
            "file": "repository.h",
            "line": 162,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *"
            }
          ],
          "group": "repository"
        },
        "git_repository_init": {
          "kind": "function",
          "name": "git_repository_init",
          "location": {
            "file": "repository.h",
            "line": 179,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success; error code otherwise"
          },
          "params": [
            {
              "name": "repo_out",
              "type": "git_repository **",
              "direction": "in",
              "comment": "pointer to the repo which will be created or reinitialized"
            },
            {
              "name": "path",
              "type": "const char *",
              "direction": "in",
              "comment": "the path to the repository"
            },
            {
              "name": "is_bare",
              "type": "unsigned int",
              "direction": "in",
              "comment": "if true, a Git repository without a working directory is created \n\t\tat the pointed path. If false, provided path will be considered as the working \n\t\tdirectory into which the .git directory will be created."
            }
          ],
          "comment": [
            "Creates a new Git repository in the given folder.",
            "TODO:\n\t- Reinit the repository\n\t- Create config files"
          ],
          "group": "repository"
        },
        "git_repository": {
          "kind": "struct",
          "name": "git_repository",
          "referenceName": "struct git_repository",
          "opaque": true,
          "comment": [
            "Representation of an existing git repository,\n including all its object contents"
          ],
          "location": {
            "file": "types.h",
            "line": 99,
            "column": 31
          },
          "group": "repository",
          "returnedBy": [
            "git_object_owner",
            "git_reference_owner",
            "git_revwalk_repository"
          ],
          "parameterTo": [
            "git_blob_lookup",
            "git_blob_new",
            "git_blob_writefile",
            "git_commit_lookup",
            "git_commit_new",
            "git_index_open_inrepo",
            "git_object_lookup",
            "git_object_new",
            "git_reference_lookup",
            "git_reference_create_symbolic",
            "git_reference_create_oid",
            "git_reference_packall",
            "git_repository_open",
            "git_repository_open2",
            "git_repository_open3",
            "git_repository_database",
            "git_repository_index",
            "git_repository_free",
            "git_repository_free__no_gc",
            "git_repository_init",
            "git_revwalk_new",
            "git_tag_lookup",
            "git_tag_new",
            "git_tree_lookup",
            "git_tree_new"
          ]
        }
      },
      "info": {
        "summary": "Git repository management routines"
      }
    },
    "revwalk": {
      "apis": {
        "GIT_SORT_NONE": {
          "kind": "macro",
          "name": "GIT_SORT_NONE",
          "location": {
            "file": "revwalk.h",
            "line": 46,
            "column": 9
          },
          "value": "(0)",
          "comment": "Sort the repository contents in no particular ordering; this sorting is arbitrary, implementation-specific and subject to change at any time. This is the default sorting for new walkers.",
          "group": "revwalk"
        },
        "GIT_SORT_TOPOLOGICAL": {
          "kind": "macro",
          "name": "GIT_SORT_TOPOLOGICAL",
          "location": {
            "file": "revwalk.h",
            "line": 53,
            "column": 9
          },
          "value": "(1 << 0)",
          "comment": "Sort the repository contents in topological order (parents before children); this sorting mode can be combined with time sorting.",
          "group": "revwalk"
        },
        "GIT_SORT_TIME": {
          "kind": "macro",
          "name": "GIT_SORT_TIME",
          "location": {
            "file": "revwalk.h",
            "line": 60,
            "column": 9
          },
          "value": "(1 << 1)",
          "comment": "Sort the repository contents by commit time; this sorting mode can be combined with topological sorting.",
          "group": "revwalk"
        },
        "GIT_SORT_REVERSE": {
          "kind": "macro",
          "name": "GIT_SORT_REVERSE",
          "location": {
            "file": "revwalk.h",
            "line": 67,
            "column": 9
          },
          "value": "(1 << 2)",
          "comment": "Iterate through the repository contents in reverse order; this sorting mode can be combined with any of the above.",
          "group": "revwalk"
        },
        "git_revwalk_new": {
          "kind": "function",
          "name": "git_revwalk_new",
          "location": {
            "file": "revwalk.h",
            "line": 76,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success; error code otherwise"
          },
          "params": [
            {
              "name": "walker",
              "type": "git_revwalk **",
              "direction": "in",
              "comment": "pointer to the new revision walker"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repo to walk through"
            }
          ],
          "comment": [
            "Allocate a new revision walker to iterate through a repo."
          ],
          "group": "revwalk"
        },
        "git_revwalk_reset": {
          "kind": "function",
          "name": "git_revwalk_reset",
          "location": {
            "file": "revwalk.h",
            "line": 82,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "walker",
              "type": "git_revwalk *",
              "direction": "in",
              "comment": "handle to reset."
            }
          ],
          "comment": [
            "Reset the walking machinery for reuse."
          ],
          "group": "revwalk"
        },
        "git_revwalk_push": {
          "kind": "function",
          "name": "git_revwalk_push",
          "location": {
            "file": "revwalk.h",
            "line": 91,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "walk",
              "type": "git_revwalk *"
            },
            {
              "name": "commit",
              "type": "git_commit *",
              "direction": "in",
              "comment": "the commit to start from."
            }
          ],
          "comment": [
            "Mark a commit to start traversal from.\n The commit object must belong to the repo which is being walked through."
          ],
          "group": "revwalk"
        },
        "git_revwalk_hide": {
          "kind": "function",
          "name": "git_revwalk_hide",
          "location": {
            "file": "revwalk.h",
            "line": 98,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "walk",
              "type": "git_revwalk *"
            },
            {
              "name": "commit",
              "type": "git_commit *",
              "direction": "in",
              "comment": "the commit that will be ignored during the traversal"
            }
          ],
          "comment": [
            "Mark a commit (and its ancestors) uninteresting for the output."
          ],
          "group": "revwalk"
        },
        "git_revwalk_next": {
          "kind": "function",
          "name": "git_revwalk_next",
          "location": {
            "file": "revwalk.h",
            "line": 108,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "GIT_SUCCESS if the next commit was found;\n\tGIT_EREVWALKOVER if there are no commits left to iterate"
          },
          "params": [
            {
              "name": "commit",
              "type": "git_commit **",
              "direction": "in",
              "comment": "Pointer where to store the next commit"
            },
            {
              "name": "walk",
              "type": "git_revwalk *",
              "direction": "in",
              "comment": "the walker to pop the commit from."
            }
          ],
          "comment": [
            "Get the next commit from the revision traversal."
          ],
          "group": "revwalk"
        },
        "git_revwalk_sorting": {
          "kind": "function",
          "name": "git_revwalk_sorting",
          "location": {
            "file": "revwalk.h",
            "line": 117,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "walk",
              "type": "git_revwalk *",
              "direction": "in",
              "comment": "the walker being used for the traversal."
            },
            {
              "name": "sort_mode",
              "type": "unsigned int",
              "direction": "in",
              "comment": "combination of GIT_RPSORT_XXX flags"
            }
          ],
          "comment": [
            "Change the sorting mode when iterating through the\n repository's contents.\n Changing the sorting mode resets the walker."
          ],
          "group": "revwalk"
        },
        "git_revwalk_free": {
          "kind": "function",
          "name": "git_revwalk_free",
          "location": {
            "file": "revwalk.h",
            "line": 123,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "walk",
              "type": "git_revwalk *",
              "direction": "in",
              "comment": "traversal handle to close.  If NULL nothing occurs."
            }
          ],
          "comment": [
            "Free a revwalk previously allocated."
          ],
          "group": "revwalk"
        },
        "git_revwalk_repository": {
          "kind": "function",
          "name": "git_revwalk_repository",
          "location": {
            "file": "revwalk.h",
            "line": 132,
            "column": 30
          },
          "returns": {
            "type": "git_repository *",
            "comment": "the repository being walked"
          },
          "params": [
            {
              "name": "walk",
              "type": "git_revwalk *",
              "direction": "in",
              "comment": "the revision walker"
            }
          ],
          "comment": [
            "Return the repository on which this walker\n is operating."
          ],
          "group": "revwalk"
        },
        "git_revwalk": {
          "kind": "struct",
          "name": "git_revwalk",
          "referenceName": "struct git_revwalk",
          "opaque": true,
          "comment": [
            "Representation of an in-progress walk through the commits in a repo"
          ],
          "location": {
            "file": "types.h",
            "line": 105,
            "column": 28
          },
          "group": "revwalk",
          "parameterTo": [
            "git_revwalk_new",
            "git_revwalk_reset",
            "git_revwalk_push",
            "git_revwalk_hide",
            "git_revwalk_next",
            "git_revwalk_sorting",
            "git_revwalk_free",
            "git_revwalk_repository"
          ]
        }
      },
      "info": {
        "summary": "Git revision traversal routines"
      }
    },
    "signature": {
      "apis": {
        "git_signature_new": {
          "kind": "function",
          "name": "git_signature_new",
          "location": {
            "file": "signature.h",
            "line": 50,
            "column": 29
          },
          "returns": {
            "type": "git_signature *",
            "comment": "the new sig, NULl on out of memory"
          },
          "params": [
            {
              "name": "name",
              "type": "const char *"
            },
            {
              "name": "email",
              "type": "const char *"
            },
            {
              "name": "time",
              "type": "time_t"
            },
            {
              "name": "offset",
              "type": "int"
            }
          ],
          "comment": [
            "Create a new action signature. The signature must be freed\n manually or using git_signature_free",
            "name of the person",
            "\\email\n email of the person\n \\time\n time when the action happened\n \\offset\n timezone offset in minutes for the time"
          ],
          "group": "signature"
        },
        "git_signature_dup": {
          "kind": "function",
          "name": "git_signature_dup",
          "location": {
            "file": "signature.h",
            "line": 59,
            "column": 29
          },
          "returns": {
            "type": "git_signature *",
            "comment": "a copy of sig, NULL on out of memory"
          },
          "params": [
            {
              "name": "sig",
              "type": "const git_signature *"
            }
          ],
          "comment": [
            "Create a copy of an existing signature.",
            "All internal strings are also duplicated.\n \\sig\n signature to duplicated"
          ],
          "group": "signature"
        },
        "git_signature_free": {
          "kind": "function",
          "name": "git_signature_free",
          "location": {
            "file": "signature.h",
            "line": 66,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "sig",
              "type": "git_signature *"
            }
          ],
          "comment": [
            "Free an existing signature",
            "\\sig\n signature to free"
          ],
          "group": "signature"
        },
        "git_signature": {
          "kind": "struct",
          "name": "git_signature",
          "referenceName": "git_signature",
          "comment": [
            "An action signature (e.g. for committers, taggers, etc)"
          ],
          "members": [
            {
              "name": "name",
              "type": "char *"
            },
            {
              "name": "email",
              "type": "char *",
              "comment": [
                "full name of the author"
              ]
            },
            {
              "name": "when",
              "type": "git_time",
              "comment": [
                "email of the author"
              ],
              "referenceType": "struct git_time"
            }
          ],
          "location": {
            "file": "types.h",
            "line": 132,
            "column": 16
          },
          "group": "signature",
          "returnedBy": [
            "git_commit_committer",
            "git_commit_author",
            "git_signature_new",
            "git_signature_dup",
            "git_tag_tagger"
          ],
          "parameterTo": [
            "git_commit_set_committer",
            "git_commit_set_author",
            "git_signature_dup",
            "git_signature_free",
            "git_tag_set_tagger"
          ]
        }
      },
      "info": {
        "summary": "Git signature creation"
      }
    },
    "tag": {
      "apis": {
        "git_tag_lookup": {
          "kind": "function",
          "name": "git_tag_lookup",
          "location": {
            "file": "tag.h",
            "line": 52,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success; error code otherwise"
          },
          "params": [
            {
              "name": "tag",
              "type": "git_tag **",
              "direction": "in",
              "comment": "pointer to the looked up tag"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repo to use when locating the tag."
            },
            {
              "name": "id",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "identity of the tag to locate."
            }
          ],
          "comment": [
            "Lookup a tag object from the repository.\n The generated tag object is owned by the revision\n repo and shall not be freed by the user."
          ],
          "group": "tag"
        },
        "git_tag_new": {
          "kind": "function",
          "name": "git_tag_new",
          "location": {
            "file": "tag.h",
            "line": 68,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success; error code otherwise"
          },
          "params": [
            {
              "name": "tag",
              "type": "git_tag **",
              "direction": "in",
              "comment": "pointer to the new tag"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "The repository where the object will reside"
            }
          ],
          "comment": [
            "Create a new in-memory git_tag.",
            "The tag object must be manually filled using\n setter methods before it can be written to its\n repository."
          ],
          "group": "tag"
        },
        "git_tag_id": {
          "kind": "function",
          "name": "git_tag_id",
          "location": {
            "file": "tag.h",
            "line": 78,
            "column": 29
          },
          "returns": {
            "type": "const git_oid *",
            "comment": "object identity for the tag."
          },
          "params": [
            {
              "name": "tag",
              "type": "git_tag *",
              "direction": "in",
              "comment": "a previously loaded tag."
            }
          ],
          "comment": [
            "Get the id of a tag."
          ],
          "group": "tag"
        },
        "git_tag_target": {
          "kind": "function",
          "name": "git_tag_target",
          "location": {
            "file": "tag.h",
            "line": 85,
            "column": 32
          },
          "returns": {
            "type": "const git_object *",
            "comment": "reference to a repository object"
          },
          "params": [
            {
              "name": "t",
              "type": "git_tag *"
            }
          ],
          "comment": [
            "Get the tagged object of a tag"
          ],
          "group": "tag"
        },
        "git_tag_type": {
          "kind": "function",
          "name": "git_tag_type",
          "location": {
            "file": "tag.h",
            "line": 92,
            "column": 23
          },
          "returns": {
            "type": "git_otype",
            "comment": "type of the tagged object"
          },
          "params": [
            {
              "name": "t",
              "type": "git_tag *"
            }
          ],
          "comment": [
            "Get the type of a tag's tagged object"
          ],
          "group": "tag"
        },
        "git_tag_name": {
          "kind": "function",
          "name": "git_tag_name",
          "location": {
            "file": "tag.h",
            "line": 99,
            "column": 26
          },
          "returns": {
            "type": "const char *",
            "comment": "name of the tag"
          },
          "params": [
            {
              "name": "t",
              "type": "git_tag *"
            }
          ],
          "comment": [
            "Get the name of a tag"
          ],
          "group": "tag"
        },
        "git_tag_tagger": {
          "kind": "function",
          "name": "git_tag_tagger",
          "location": {
            "file": "tag.h",
            "line": 106,
            "column": 35
          },
          "returns": {
            "type": "const git_signature *",
            "comment": "reference to the tag's author"
          },
          "params": [
            {
              "name": "t",
              "type": "git_tag *"
            }
          ],
          "comment": [
            "Get the tagger (author) of a tag"
          ],
          "group": "tag"
        },
        "git_tag_message": {
          "kind": "function",
          "name": "git_tag_message",
          "location": {
            "file": "tag.h",
            "line": 113,
            "column": 26
          },
          "returns": {
            "type": "const char *",
            "comment": "message of the tag"
          },
          "params": [
            {
              "name": "t",
              "type": "git_tag *"
            }
          ],
          "comment": [
            "Get the message of a tag"
          ],
          "group": "tag"
        },
        "git_tag_set_target": {
          "kind": "function",
          "name": "git_tag_set_target",
          "location": {
            "file": "tag.h",
            "line": 120,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "tag",
              "type": "git_tag *",
              "direction": "in",
              "comment": "The tag to modify"
            },
            {
              "name": "target",
              "type": "git_object *",
              "direction": "in",
              "comment": "the new tagged target"
            }
          ],
          "comment": [
            "Set the target of a tag (i.e. the object that the tag points to)"
          ],
          "group": "tag"
        },
        "git_tag_set_name": {
          "kind": "function",
          "name": "git_tag_set_name",
          "location": {
            "file": "tag.h",
            "line": 127,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "tag",
              "type": "git_tag *",
              "direction": "in",
              "comment": "The tag to modify"
            },
            {
              "name": "name",
              "type": "const char *",
              "direction": "in",
              "comment": "the new name for the tag"
            }
          ],
          "comment": [
            "Set the name of a tag"
          ],
          "group": "tag"
        },
        "git_tag_set_tagger": {
          "kind": "function",
          "name": "git_tag_set_tagger",
          "location": {
            "file": "tag.h",
            "line": 134,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "tag",
              "type": "git_tag *",
              "direction": "in",
              "comment": "The tag to modify"
            },
            {
              "name": "tagger_sig",
              "type": "const git_signature *",
              "direction": "in",
              "comment": "signature of the tagging action"
            }
          ],
          "comment": [
            "Set the tagger of a tag"
          ],
          "group": "tag"
        },
        "git_tag_set_message": {
          "kind": "function",
          "name": "git_tag_set_message",
          "location": {
            "file": "tag.h",
            "line": 141,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "tag",
              "type": "git_tag *",
              "direction": "in",
              "comment": "The tag to modify"
            },
            {
              "name": "message",
              "type": "const char *",
              "direction": "in",
              "comment": "the new tagger for the tag"
            }
          ],
          "comment": [
            "Set the message of a tag"
          ],
          "group": "tag"
        },
        "git_tag": {
          "kind": "struct",
          "name": "git_tag",
          "referenceName": "struct git_tag",
          "opaque": true,
          "comment": [
            "Parsed representation of a tag object."
          ],
          "location": {
            "file": "types.h",
            "line": 108,
            "column": 24
          },
          "group": "tag",
          "parameterTo": [
            "git_tag_lookup",
            "git_tag_new",
            "git_tag_id",
            "git_tag_target",
            "git_tag_type",
            "git_tag_name",
            "git_tag_tagger",
            "git_tag_message",
            "git_tag_set_target",
            "git_tag_set_name",
            "git_tag_set_tagger",
            "git_tag_set_message"
          ]
        }
      },
      "info": {
        "summary": "Git tag parsing routines"
      }
    },
    "thread-utils": {
      "apis": {
        "GIT_HAS_TLS": {
          "kind": "macro",
          "name": "GIT_HAS_TLS",
          "location": {
            "file": "thread-utils.h",
            "line": 34,
            "column": 9
          },
          "value": "1",
          "comment": "",
          "group": "thread-utils"
        },
        "GIT_HAS_PTHREAD": {
          "kind": "macro",
          "name": "GIT_HAS_PTHREAD",
          "location": {
            "file": "thread-utils.h",
            "line": 35,
            "column": 9
          },
          "value": "1",
          "comment": "",
          "group": "thread-utils"
        },
        "GIT_TLS": {
          "kind": "macro",
          "name": "GIT_TLS",
          "location": {
            "file": "thread-utils.h",
            "line": 45,
            "column": 10
          },
          "value": "__thread",
          "comment": "",
          "group": "thread-utils"
        },
        "GIT_THREADS": {
          "kind": "macro",
          "name": "GIT_THREADS",
          "location": {
            "file": "thread-utils.h",
            "line": 75,
            "column": 10
          },
          "value": "1",
          "comment": "",
          "group": "thread-utils"
        }
      },
      "info": {}
    },
    "tree": {
      "apis": {
        "git_tree_lookup": {
          "kind": "function",
          "name": "git_tree_lookup",
          "location": {
            "file": "tree.h",
            "line": 52,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success; error code otherwise"
          },
          "params": [
            {
              "name": "tree",
              "type": "git_tree **",
              "direction": "in",
              "comment": "pointer to the looked up tree"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repo to use when locating the tree."
            },
            {
              "name": "id",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "identity of the tree to locate."
            }
          ],
          "comment": [
            "Lookup a tree object from the repository.\n The generated tree object is owned by the revision\n repo and shall not be freed by the user."
          ],
          "group": "tree"
        },
        "git_tree_new": {
          "kind": "function",
          "name": "git_tree_new",
          "location": {
            "file": "tree.h",
            "line": 68,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success; error code otherwise"
          },
          "params": [
            {
              "name": "tree",
              "type": "git_tree **",
              "direction": "in",
              "comment": "pointer to the new tree"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "The repository where the object will reside"
            }
          ],
          "comment": [
            "Create a new in-memory git_tree.",
            "The tree object must be manually filled using\n setter methods before it can be written to its\n repository."
          ],
          "group": "tree"
        },
        "git_tree_id": {
          "kind": "function",
          "name": "git_tree_id",
          "location": {
            "file": "tree.h",
            "line": 78,
            "column": 29
          },
          "returns": {
            "type": "const git_oid *",
            "comment": "object identity for the tree."
          },
          "params": [
            {
              "name": "tree",
              "type": "git_tree *",
              "direction": "in",
              "comment": "a previously loaded tree."
            }
          ],
          "comment": [
            "Get the id of a tree."
          ],
          "group": "tree"
        },
        "git_tree_entrycount": {
          "kind": "function",
          "name": "git_tree_entrycount",
          "location": {
            "file": "tree.h",
            "line": 86,
            "column": 20
          },
          "returns": {
            "type": "size_t",
            "comment": "the number of entries in the tree"
          },
          "params": [
            {
              "name": "tree",
              "type": "git_tree *",
              "direction": "in",
              "comment": "a previously loaded tree."
            }
          ],
          "comment": [
            "Get the number of entries listed in a tree"
          ],
          "group": "tree"
        },
        "git_tree_entry_byname": {
          "kind": "function",
          "name": "git_tree_entry_byname",
          "location": {
            "file": "tree.h",
            "line": 94,
            "column": 30
          },
          "returns": {
            "type": "git_tree_entry *",
            "comment": "the tree entry; NULL if not found"
          },
          "params": [
            {
              "name": "tree",
              "type": "git_tree *",
              "direction": "in",
              "comment": "a previously loaded tree."
            },
            {
              "name": "filename",
              "type": "const char *",
              "direction": "in",
              "comment": "the filename of the desired entry"
            }
          ],
          "comment": [
            "Lookup a tree entry by its filename"
          ],
          "group": "tree"
        },
        "git_tree_entry_byindex": {
          "kind": "function",
          "name": "git_tree_entry_byindex",
          "location": {
            "file": "tree.h",
            "line": 102,
            "column": 30
          },
          "returns": {
            "type": "git_tree_entry *",
            "comment": "the tree entry; NULL if not found"
          },
          "params": [
            {
              "name": "tree",
              "type": "git_tree *",
              "direction": "in",
              "comment": "a previously loaded tree."
            },
            {
              "name": "idx",
              "type": "int",
              "direction": "in",
              "comment": "the position in the entry list"
            }
          ],
          "comment": [
            "Lookup a tree entry by its position in the tree"
          ],
          "group": "tree"
        },
        "git_tree_entry_attributes": {
          "kind": "function",
          "name": "git_tree_entry_attributes",
          "location": {
            "file": "tree.h",
            "line": 109,
            "column": 26
          },
          "returns": {
            "type": "unsigned int",
            "comment": "attributes as an integer"
          },
          "params": [
            {
              "name": "entry",
              "type": "git_tree_entry *",
              "direction": "in",
              "comment": "a tree entry"
            }
          ],
          "comment": [
            "Get the UNIX file attributes of a tree entry"
          ],
          "group": "tree"
        },
        "git_tree_entry_name": {
          "kind": "function",
          "name": "git_tree_entry_name",
          "location": {
            "file": "tree.h",
            "line": 116,
            "column": 26
          },
          "returns": {
            "type": "const char *",
            "comment": "the name of the file"
          },
          "params": [
            {
              "name": "entry",
              "type": "git_tree_entry *",
              "direction": "in",
              "comment": "a tree entry"
            }
          ],
          "comment": [
            "Get the filename of a tree entry"
          ],
          "group": "tree"
        },
        "git_tree_entry_id": {
          "kind": "function",
          "name": "git_tree_entry_id",
          "location": {
            "file": "tree.h",
            "line": 123,
            "column": 29
          },
          "returns": {
            "type": "const git_oid *",
            "comment": "the oid of the object"
          },
          "params": [
            {
              "name": "entry",
              "type": "git_tree_entry *",
              "direction": "in",
              "comment": "a tree entry"
            }
          ],
          "comment": [
            "Get the id of the object pointed by the entry"
          ],
          "group": "tree"
        },
        "git_tree_entry_2object": {
          "kind": "function",
          "name": "git_tree_entry_2object",
          "location": {
            "file": "tree.h",
            "line": 132,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "a reference to the pointed object in the repository"
          },
          "params": [
            {
              "name": "object",
              "type": "git_object **",
              "direction": "in",
              "comment": "pointer to the converted object"
            },
            {
              "name": "entry",
              "type": "git_tree_entry *",
              "direction": "in",
              "comment": "a tree entry"
            }
          ],
          "comment": [
            "Convert a tree entry to the git_object it points too."
          ],
          "group": "tree"
        },
        "git_tree_add_entry": {
          "kind": "function",
          "name": "git_tree_add_entry",
          "location": {
            "file": "tree.h",
            "line": 149,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success; otherwise error code"
          },
          "params": [
            {
              "name": "entry_out",
              "type": "git_tree_entry **",
              "direction": "in",
              "comment": "Pointer to the entry that just got\n\tcreated. May be NULL if you are not interested on\n\tgetting the new entry"
            },
            {
              "name": "tree",
              "type": "git_tree *",
              "direction": "in",
              "comment": "Tree object to store the entry\n \\iparam\n id OID for the tree entry"
            },
            {
              "name": "id",
              "type": "const git_oid *"
            },
            {
              "name": "filename",
              "type": "const char *",
              "direction": "in",
              "comment": "Filename for the tree entry"
            },
            {
              "name": "attributes",
              "type": "int",
              "direction": "in",
              "comment": "UNIX file attributes for the entry"
            }
          ],
          "comment": [
            "Add a new entry to a tree and return the new entry.",
            "This will mark the tree as modified; the new entry will\n be written back to disk on the next git_object_write()"
          ],
          "group": "tree"
        },
        "git_tree_remove_entry_byindex": {
          "kind": "function",
          "name": "git_tree_remove_entry_byindex",
          "location": {
            "file": "tree.h",
            "line": 163,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on successful removal; GIT_ENOTFOUND if the entry wasn't found"
          },
          "params": [
            {
              "name": "tree",
              "type": "git_tree *",
              "direction": "in",
              "comment": "Tree where to remove the entry"
            },
            {
              "name": "idx",
              "type": "int",
              "direction": "in",
              "comment": "index of the entry"
            }
          ],
          "comment": [
            "Remove an entry by its index.",
            "Index must be >= 0 and \n<\n than git_tree_entrycount().",
            "This will mark the tree as modified; the modified entry will\n be written back to disk on the next git_object_write()"
          ],
          "group": "tree"
        },
        "git_tree_remove_entry_byname": {
          "kind": "function",
          "name": "git_tree_remove_entry_byname",
          "location": {
            "file": "tree.h",
            "line": 175,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on successful removal; GIT_ENOTFOUND if the entry wasn't found"
          },
          "params": [
            {
              "name": "tree",
              "type": "git_tree *",
              "direction": "in",
              "comment": "Tree where to remove the entry"
            },
            {
              "name": "filename",
              "type": "const char *",
              "direction": "in",
              "comment": "File name of the entry"
            }
          ],
          "comment": [
            "Remove an entry by its filename.",
            "This will mark the tree as modified; the modified entry will\n be written back to disk on the next git_object_write()"
          ],
          "group": "tree"
        },
        "git_tree_clear_entries": {
          "kind": "function",
          "name": "git_tree_clear_entries",
          "location": {
            "file": "tree.h",
            "line": 185,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "tree",
              "type": "git_tree *",
              "direction": "in",
              "comment": "Tree object whose entries are to be sorted"
            }
          ],
          "comment": [
            "Clear all the entries in a tree.",
            "This will mark the tree as modified; the modified entry will\n be written back to disk on the next git_object_write()."
          ],
          "group": "tree"
        },
        "git_tree_entry_set_id": {
          "kind": "function",
          "name": "git_tree_entry_set_id",
          "location": {
            "file": "tree.h",
            "line": 196,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "entry",
              "type": "git_tree_entry *",
              "direction": "in",
              "comment": "Entry object which will be modified"
            },
            {
              "name": "oid",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "new SHA1 oid for the entry"
            }
          ],
          "comment": [
            "Change the SHA1 id of a tree entry.",
            "This will mark the tree that contains the entry as modified;\n the modified entry will be written back to disk on the next git_object_write()"
          ],
          "group": "tree"
        },
        "git_tree_entry_set_name": {
          "kind": "function",
          "name": "git_tree_entry_set_name",
          "location": {
            "file": "tree.h",
            "line": 207,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "entry",
              "type": "git_tree_entry *",
              "direction": "in",
              "comment": "Entry object which will be modified"
            },
            {
              "name": "name",
              "type": "const char *"
            }
          ],
          "comment": [
            "Change the filename of a tree entry.",
            "This will mark the tree that contains the entry as modified;\n the modified entry will be written back to disk on the next git_object_write()"
          ],
          "group": "tree"
        },
        "git_tree_entry_set_attributes": {
          "kind": "function",
          "name": "git_tree_entry_set_attributes",
          "location": {
            "file": "tree.h",
            "line": 218,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "entry",
              "type": "git_tree_entry *",
              "direction": "in",
              "comment": "Entry object which will be modified"
            },
            {
              "name": "attr",
              "type": "int"
            }
          ],
          "comment": [
            "Change the attributes of a tree entry.",
            "This will mark the tree that contains the entry as modified;\n the modified entry will be written back to disk on the next git_object_write()"
          ],
          "group": "tree"
        },
        "git_tree_entry": {
          "kind": "struct",
          "name": "git_tree_entry",
          "referenceName": "struct git_tree_entry",
          "opaque": true,
          "comment": [
            "Representation of each one of the entries in a tree object."
          ],
          "location": {
            "file": "types.h",
            "line": 117,
            "column": 31
          },
          "group": "tree",
          "returnedBy": [
            "git_tree_entry_byname",
            "git_tree_entry_byindex"
          ],
          "parameterTo": [
            "git_tree_entry_attributes",
            "git_tree_entry_name",
            "git_tree_entry_id",
            "git_tree_entry_2object",
            "git_tree_add_entry",
            "git_tree_entry_set_id",
            "git_tree_entry_set_name",
            "git_tree_entry_set_attributes"
          ]
        },
        "git_tree": {
          "kind": "struct",
          "name": "git_tree",
          "referenceName": "struct git_tree",
          "opaque": true,
          "comment": [
            "Representation of a tree object."
          ],
          "location": {
            "file": "types.h",
            "line": 120,
            "column": 25
          },
          "group": "tree",
          "returnedBy": [
            "git_commit_tree"
          ],
          "parameterTo": [
            "git_commit_set_tree",
            "git_tree_lookup",
            "git_tree_new",
            "git_tree_id",
            "git_tree_entrycount",
            "git_tree_entry_byname",
            "git_tree_entry_byindex",
            "git_tree_add_entry",
            "git_tree_remove_entry_byindex",
            "git_tree_remove_entry_byname",
            "git_tree_clear_entries"
          ]
        }
      },
      "info": {
        "summary": "Git tree parsing, loading routines"
      }
    },
    "types": {
      "apis": {
        "git_off_t": {
          "kind": "alias",
          "name": "git_off_t",
          "type": "long long",
          "location": {
            "file": "types.h",
            "line": 69,
            "column": 19
          },
          "typedef": true,
          "group": "types"
        },
        "git_time_t": {
          "kind": "alias",
          "name": "git_time_t",
          "type": "time_t",
          "location": {
            "file": "types.h",
            "line": 70,
            "column": 16
          },
          "typedef": true,
          "group": "types"
        },
        "git_otype": {
          "kind": "enum",
          "name": "git_otype",
          "referenceName": "git_otype",
          "members": [
            {
              "name": "GIT_OBJ_ANY",
              "value": "-2",
              "comment": [
                "Object can be any of the following"
              ]
            },
            {
              "name": "GIT_OBJ_BAD",
              "value": "-1",
              "comment": [
                "Object is invalid."
              ]
            },
            {
              "name": "GIT_OBJ__EXT1",
              "value": "0",
              "comment": [
                "Reserved for future use."
              ]
            },
            {
              "name": "GIT_OBJ_COMMIT",
              "value": "1",
              "comment": [
                "A commit object."
              ]
            },
            {
              "name": "GIT_OBJ_TREE",
              "value": "2",
              "comment": [
                "A tree (directory listing) object."
              ]
            },
            {
              "name": "GIT_OBJ_BLOB",
              "value": "3",
              "comment": [
                "A file revision object."
              ]
            },
            {
              "name": "GIT_OBJ_TAG",
              "value": "4",
              "comment": [
                "An annotated tag object."
              ]
            },
            {
              "name": "GIT_OBJ__EXT2",
              "value": "5",
              "comment": [
                "Reserved for future use."
              ]
            },
            {
              "name": "GIT_OBJ_OFS_DELTA",
              "value": "6",
              "comment": [
                "A delta, base is given by an offset."
              ]
            },
            {
              "name": "GIT_OBJ_REF_DELTA",
              "value": "7",
              "comment": [
                "A delta, base is given by object id."
              ]
            }
          ],
          "comment": [
            "Basic type (loose or packed) of any Git object."
          ],
          "location": {
            "file": "types.h",
            "line": 76,
            "column": 9
          },
          "group": "types",
          "returnedBy": [
            "git_object_type",
            "git_object_string2type",
            "git_tag_type"
          ],
          "parameterTo": [
            "git_object_lookup",
            "git_object_new",
            "git_object_type2string",
            "git_object_typeisloose",
            "git_object__size"
          ]
        },
        "git_time": {
          "kind": "struct",
          "name": "git_time",
          "referenceName": "git_time",
          "comment": [
            "Time in a signature"
          ],
          "members": [
            {
              "name": "time",
              "type": "time_t"
            },
            {
              "name": "offset",
              "type": "int",
              "comment": [
                "time in seconds from epoch"
              ]
            }
          ],
          "location": {
            "file": "types.h",
            "line": 126,
            "column": 16
          },
          "group": "types"
        },
        "git_rtype": {
          "kind": "enum",
          "name": "git_rtype",
          "referenceName": "git_rtype",
          "members": [
            {
              "name": "GIT_REF_INVALID",
              "value": "0"
            },
            {
              "name": "GIT_REF_OID",
              "value": "1",
              "comment": [
                "Invalid reference"
              ]
            },
            {
              "name": "GIT_REF_SYMBOLIC",
              "value": "2",
              "comment": [
                "A reference which points at an object id"
              ]
            },
            {
              "name": "GIT_REF_PACKED",
              "value": "4",
              "comment": [
                "A reference which points at another reference"
              ]
            },
            {
              "name": "GIT_REF_HAS_PEEL",
              "value": "8",
              "comment": [
                "A reference which points at another reference"
              ]
            }
          ],
          "comment": [
            "Basic type of any Git reference."
          ],
          "location": {
            "file": "types.h",
            "line": 142,
            "column": 9
          },
          "group": "types",
          "returnedBy": [
            "git_reference_type"
          ]
        }
      },
      "info": {
        "summary": "libgit2 base & compatibility types"
      }
    }
  }
}
