{
  "info": {
    "version": "v0.17.0",
    "commit": "5b9fac39d8a76b9139667c26a63e6b3f204b3977"
  },
  "groups": {
    "attr": {
      "apis": {
        "GIT_ATTR_TRUE(attr)": {
          "kind": "macro",
          "name": "GIT_ATTR_TRUE(attr)",
          "location": {
            "file": "attr.h",
            "line": 33,
            "column": 9
          },
          "value": "((attr) == git_attr__true)",
          "comment": "GIT_ATTR_TRUE checks if an attribute is set on.  In core git parlance, this the value for \"Set\" attributes. For example, if the attribute file contains: *.c foo Then for file `xyz.c` looking up attribute \"foo\" gives a value for which `GIT_ATTR_TRUE(value)` is true.",
          "group": "attr"
        },
        "GIT_ATTR_FALSE(attr)": {
          "kind": "macro",
          "name": "GIT_ATTR_FALSE(attr)",
          "location": {
            "file": "attr.h",
            "line": 47,
            "column": 9
          },
          "value": "((attr) == git_attr__false)",
          "comment": "GIT_ATTR_FALSE checks if an attribute is set off.  In core git parlance, this is the value for attributes that are \"Unset\" (not to be confused with values that a \"Unspecified\"). For example, if the attribute file contains: *.h -foo Then for file `zyx.h` looking up attribute \"foo\" gives a value for which `GIT_ATTR_FALSE(value)` is true.",
          "group": "attr"
        },
        "GIT_ATTR_UNSPECIFIED(attr)": {
          "kind": "macro",
          "name": "GIT_ATTR_UNSPECIFIED(attr)",
          "location": {
            "file": "attr.h",
            "line": 65,
            "column": 9
          },
          "value": "(!(attr) || (attr) == git_attr__unset)",
          "comment": "GIT_ATTR_UNSPECIFIED checks if an attribute is unspecified.  This may be due to the attribute not being mentioned at all or because the attribute was explicitly set unspecified via the `!` operator. For example, if the attribute file contains: *.c foo *.h -foo onefile.c !foo Then for `onefile.c` looking up attribute \"foo\" yields a value with `GIT_ATTR_UNSPECIFIED(value)` of true.  Also, looking up \"foo\" on file `onefile.rb` or looking up \"bar\" on any file will all give `GIT_ATTR_UNSPECIFIED(value)` of true.",
          "group": "attr"
        },
        "GIT_ATTR_HAS_VALUE(attr)": {
          "kind": "macro",
          "name": "GIT_ATTR_HAS_VALUE(attr)",
          "location": {
            "file": "attr.h",
            "line": 79,
            "column": 9
          },
          "value": " ((attr) && (attr) != git_attr__unset && (attr) != git_attr__true && (attr) != git_attr__false)",
          "comment": "GIT_ATTR_HAS_VALUE checks if an attribute is set to a value (as opposied to TRUE, FALSE or UNSPECIFIED).  This would be the case if for a file with something like: *.txt eol=lf Given this, looking up \"eol\" for `onefile.txt` will give back the string \"lf\" and `GIT_ATTR_SET_TO_VALUE(attr)` will return true.",
          "group": "attr"
        },
        "GIT_ATTR_CHECK_FILE_THEN_INDEX": {
          "kind": "macro",
          "name": "GIT_ATTR_CHECK_FILE_THEN_INDEX",
          "location": {
            "file": "attr.h",
            "line": 98,
            "column": 9
          },
          "value": "0",
          "comment": "Check attribute flags: Reading values from index and working directory. When checking attributes, it is possible to check attribute files in both the working directory (if there is one) and the index (if there is one).  You can explicitly choose where to check and in which order using the following flags. Core git usually checks the working directory then the index, except during a checkout when it checks the index first.  It will use index only for creating archives or for a bare repo (if an index has been specified for the bare repo).",
          "group": "attr"
        },
        "GIT_ATTR_CHECK_INDEX_THEN_FILE": {
          "kind": "macro",
          "name": "GIT_ATTR_CHECK_INDEX_THEN_FILE",
          "location": {
            "file": "attr.h",
            "line": 99,
            "column": 9
          },
          "value": "1",
          "comment": "",
          "group": "attr"
        },
        "GIT_ATTR_CHECK_INDEX_ONLY": {
          "kind": "macro",
          "name": "GIT_ATTR_CHECK_INDEX_ONLY",
          "location": {
            "file": "attr.h",
            "line": 100,
            "column": 9
          },
          "value": "2",
          "comment": "",
          "group": "attr"
        },
        "GIT_ATTR_CHECK_NO_SYSTEM": {
          "kind": "macro",
          "name": "GIT_ATTR_CHECK_NO_SYSTEM",
          "location": {
            "file": "attr.h",
            "line": 109,
            "column": 9
          },
          "value": "(1 << 2)",
          "comment": "Check attribute flags: Using the system attributes file. Normally, attribute checks include looking in the /etc (or system equivalent) directory for a `gitattributes` file.  Passing this flag will cause attribute checks to ignore that file.",
          "group": "attr"
        },
        "git_attr_get": {
          "kind": "function",
          "name": "git_attr_get",
          "location": {
            "file": "attr.h",
            "line": 126,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "value_out",
              "type": "const char **",
              "direction": "in",
              "comment": "Output of the value of the attribute.  Use the GIT_ATTR_...\n             macros to test for TRUE, FALSE, UNSPECIFIED, etc. or just\n             use the string value for attributes set to a value.  You\n             should NOT modify or free this value."
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "The repository containing the path."
            },
            {
              "name": "flags",
              "type": "uint32_t",
              "direction": "in",
              "comment": "A combination of GIT_ATTR_CHECK... flags."
            },
            {
              "name": "path",
              "type": "const char *",
              "direction": "in",
              "comment": "The path to check for attributes.  Relative paths are\n             interpreted relative to the repo root.  The file does\n             not have to exist, but if it does not, then it will be\n             treated as a plain file (not a directory)."
            },
            {
              "name": "name",
              "type": "const char *",
              "direction": "in",
              "comment": "The name of the attribute to look up."
            }
          ],
          "comment": [
            "Look up the value of one git attribute for path."
          ],
          "group": "attr"
        },
        "git_attr_get_many": {
          "kind": "function",
          "name": "git_attr_get_many",
          "location": {
            "file": "attr.h",
            "line": 162,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "values_out",
              "type": "const char **"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "The repository containing the path."
            },
            {
              "name": "flags",
              "type": "uint32_t",
              "direction": "in",
              "comment": "A combination of GIT_ATTR_CHECK... flags."
            },
            {
              "name": "path",
              "type": "const char *",
              "direction": "in",
              "comment": "The path inside the repo to check attributes.  This\n             does not have to exist, but if it does not, then\n             it will be treated as a plain file (i.e. not a directory)."
            },
            {
              "name": "num_attr",
              "type": "size_t",
              "direction": "in",
              "comment": "The number of attributes being looked up"
            },
            {
              "name": "names",
              "type": "const char **",
              "direction": "in",
              "comment": "An array of num_attr strings containing attribute names."
            }
          ],
          "comment": [
            "Look up a list of git attributes for path.",
            "Use this if you have a known list of attributes that you want to\n look up in a single call.  This is somewhat more efficient than\n calling `git_attr_get()` multiple times.",
            "For example, you might write:",
            "const char *attrs[] = { \"crlf\", \"diff\", \"foo\" };\n     const char **values[3];\n     git_attr_get_many(values, repo, 0, \"my/fun/file.c\", 3, attrs);",
            "Then you could loop through the 3 values to get the settings for\n the three attributes you asked about."
          ],
          "group": "attr"
        },
        "git_attr_foreach": {
          "kind": "function",
          "name": "git_attr_foreach",
          "location": {
            "file": "attr.h",
            "line": 188,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "The repository containing the path."
            },
            {
              "name": "flags",
              "type": "uint32_t",
              "direction": "in",
              "comment": "A combination of GIT_ATTR_CHECK... flags."
            },
            {
              "name": "path",
              "type": "const char *",
              "direction": "in",
              "comment": "The path inside the repo to check attributes.  This\n             does not have to exist, but if it does not, then\n             it will be treated as a plain file (i.e. not a directory)."
            },
            {
              "name": "callback",
              "type": "int (*)(const char *, const char *, void *)",
              "direction": "in",
              "comment": "The function that will be invoked on each attribute\n             and attribute value.  The name parameter will be the name\n             of the attribute and the value will be the value it is\n             set to, including possibly NULL if the attribute is\n             explicitly set to UNSPECIFIED using the ! sign.  This\n             will be invoked only once per attribute name, even if\n             there are multiple rules for a given file.  The highest\n             priority rule will be used."
            },
            {
              "name": "payload",
              "type": "void *",
              "direction": "in",
              "comment": "Passed on as extra parameter to callback function."
            }
          ],
          "comment": [
            "Loop over all the git attributes for a path."
          ],
          "group": "attr"
        },
        "git_attr_cache_flush": {
          "kind": "function",
          "name": "git_attr_cache_flush",
          "location": {
            "file": "attr.h",
            "line": 203,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *"
            }
          ],
          "comment": [
            "Flush the gitattributes cache.",
            "Call this if you have reason to believe that the attributes files on\n disk no longer match the cached contents of memory.  This will cause\n the attributes files to be reloaded the next time that an attribute\n access function is called."
          ],
          "group": "attr"
        },
        "git_attr_add_macro": {
          "kind": "function",
          "name": "git_attr_add_macro",
          "location": {
            "file": "attr.h",
            "line": 216,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *"
            },
            {
              "name": "name",
              "type": "const char *"
            },
            {
              "name": "values",
              "type": "const char *"
            }
          ],
          "comment": [
            "Add a macro definition.",
            "Macros will automatically be loaded from the top level `.gitattributes`\n file of the repository (plus the build-in \"binary\" macro).  This\n function allows you to add others.  For example, to add the default\n macro, you would call:",
            "git_attr_add_macro(repo, \"binary\", \"-diff -crlf\");"
          ],
          "group": "attr"
        }
      },
      "info": {
        "summary": "Git attribute management routines"
      }
    },
    "blob": {
      "apis": {
        "git_blob_lookup": {
          "kind": "function",
          "name": "git_blob_lookup",
          "location": {
            "file": "blob.h",
            "line": 32,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "blob",
              "type": "git_blob **",
              "direction": "in",
              "comment": "pointer to the looked up blob"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repo to use when locating the blob."
            },
            {
              "name": "id",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "identity of the blob to locate."
            }
          ],
          "comment": [
            "Lookup a blob object from a repository."
          ],
          "group": "blob"
        },
        "git_blob_lookup_prefix": {
          "kind": "function",
          "name": "git_blob_lookup_prefix",
          "location": {
            "file": "blob.h",
            "line": 49,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "blob",
              "type": "git_blob **",
              "direction": "in",
              "comment": "pointer to the looked up blob"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repo to use when locating the blob."
            },
            {
              "name": "id",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "identity of the blob to locate."
            },
            {
              "name": "len",
              "type": "unsigned int",
              "direction": "in",
              "comment": "the length of the short identifier"
            }
          ],
          "comment": [
            "Lookup a blob object from a repository,\n given a prefix of its identifier (short id)."
          ],
          "see": [
            "git_object_lookup_prefix"
          ],
          "group": "blob"
        },
        "git_blob_free": {
          "kind": "function",
          "name": "git_blob_free",
          "location": {
            "file": "blob.h",
            "line": 66,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "blob",
              "type": "git_blob *",
              "direction": "in",
              "comment": "the blob to close"
            }
          ],
          "comment": [
            "Close an open blob",
            "This is a wrapper around git_object_free()",
            "IMPORTANT:\n It *is* necessary to call this method when you stop\n using a blob. Failure to do so will cause a memory leak."
          ],
          "group": "blob"
        },
        "git_blob_rawcontent": {
          "kind": "function",
          "name": "git_blob_rawcontent",
          "location": {
            "file": "blob.h",
            "line": 83,
            "column": 26
          },
          "returns": {
            "type": "const void *",
            "comment": "the pointer; NULL if the blob has no contents"
          },
          "params": [
            {
              "name": "blob",
              "type": "git_blob *",
              "direction": "in",
              "comment": "pointer to the blob"
            }
          ],
          "comment": [
            "Get a read-only buffer with the raw content of a blob.",
            "A pointer to the raw content of a blob is returned;\n this pointer is owned internally by the object and shall\n not be free'd. The pointer may be invalidated at a later\n time."
          ],
          "group": "blob"
        },
        "git_blob_rawsize": {
          "kind": "function",
          "name": "git_blob_rawsize",
          "location": {
            "file": "blob.h",
            "line": 91,
            "column": 20
          },
          "returns": {
            "type": "size_t",
            "comment": "size on bytes"
          },
          "params": [
            {
              "name": "blob",
              "type": "git_blob *",
              "direction": "in",
              "comment": "pointer to the blob"
            }
          ],
          "comment": [
            "Get the size in bytes of the contents of a blob"
          ],
          "group": "blob"
        },
        "git_blob_create_fromfile": {
          "kind": "function",
          "name": "git_blob_create_fromfile",
          "location": {
            "file": "blob.h",
            "line": 104,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "oid",
              "type": "git_oid *",
              "direction": "in",
              "comment": "return the id of the written blob"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "repository where the blob will be written.\n\tthis repository cannot be bare"
            },
            {
              "name": "path",
              "type": "const char *",
              "direction": "in",
              "comment": "file from which the blob will be created,\n\trelative to the repository's working dir"
            }
          ],
          "comment": [
            "Read a file from the working folder of a repository\n and write it to the Object Database as a loose blob"
          ],
          "group": "blob"
        },
        "git_blob_create_fromdisk": {
          "kind": "function",
          "name": "git_blob_create_fromdisk",
          "location": {
            "file": "blob.h",
            "line": 116,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "oid",
              "type": "git_oid *",
              "direction": "in",
              "comment": "return the id of the written blob"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "repository where the blob will be written.\n\tthis repository can be bare or not"
            },
            {
              "name": "path",
              "type": "const char *",
              "direction": "in",
              "comment": "file from which the blob will be created"
            }
          ],
          "comment": [
            "Read a file from the filesystem and write its content\n to the Object Database as a loose blob"
          ],
          "group": "blob"
        },
        "git_blob_create_frombuffer": {
          "kind": "function",
          "name": "git_blob_create_frombuffer",
          "location": {
            "file": "blob.h",
            "line": 128,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "oid",
              "type": "git_oid *",
              "direction": "in",
              "comment": "return the oid of the written blob"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "repository where to blob will be written"
            },
            {
              "name": "buffer",
              "type": "const void *",
              "direction": "in",
              "comment": "data to be written into the blob"
            },
            {
              "name": "len",
              "type": "size_t",
              "direction": "in",
              "comment": "length of the data"
            }
          ],
          "comment": [
            "Write an in-memory buffer to the ODB as a blob"
          ],
          "group": "blob"
        },
        "git_blob": {
          "kind": "struct",
          "name": "git_blob",
          "referenceName": "struct git_blob",
          "opaque": true,
          "comment": [
            "In-memory representation of a blob object."
          ],
          "location": {
            "file": "types.h",
            "line": 105,
            "column": 25
          },
          "group": "blob",
          "parameterTo": [
            "git_blob_lookup",
            "git_blob_lookup_prefix",
            "git_blob_free",
            "git_blob_rawcontent",
            "git_blob_rawsize",
            "git_diff_blobs"
          ]
        }
      },
      "info": {
        "summary": "Git blob load and write routines"
      }
    },
    "branch": {
      "apis": {
        "git_branch_create": {
          "kind": "function",
          "name": "git_branch_create",
          "location": {
            "file": "branch.h",
            "line": 48,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code.\n A proper reference is written in the refs/heads namespace\n pointing to the provided target commit."
          },
          "params": [
            {
              "name": "oid_out",
              "type": "git_oid *",
              "direction": "in",
              "comment": "Pointer where to store the OID of the target commit."
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "Repository where to store the branch."
            },
            {
              "name": "branch_name",
              "type": "const char *",
              "direction": "in",
              "comment": "Name for the branch; this name is\n validated for consistency. It should also not conflict with\n an already existing branch name."
            },
            {
              "name": "target",
              "type": "const git_object *",
              "direction": "in",
              "comment": "Object to which this branch should point. This object\n must belong to the given `repo` and can either be a git_commit or a\n git_tag. When a git_tag is being passed, it should be dereferencable\n to a git_commit which oid will be used as the target of the branch."
            },
            {
              "name": "force",
              "type": "int",
              "direction": "in",
              "comment": "Overwrite existing branch."
            }
          ],
          "comment": [
            "Create a new branch pointing at a target commit",
            "A new direct reference will be created pointing to\n this target commit. If `force` is true and a reference\n already exists with the given name, it'll be replaced."
          ],
          "group": "branch"
        },
        "git_branch_delete": {
          "kind": "function",
          "name": "git_branch_delete",
          "location": {
            "file": "branch.h",
            "line": 69,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, GIT_ENOTFOUND if the branch\n doesn't exist or an error code."
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "Repository where lives the branch."
            },
            {
              "name": "branch_name",
              "type": "const char *",
              "direction": "in",
              "comment": "Name of the branch to be deleted;\n this name is validated for consistency."
            },
            {
              "name": "branch_type",
              "type": "git_branch_t",
              "direction": "in",
              "comment": "Type of the considered branch. This should\n be valued with either GIT_BRANCH_LOCAL or GIT_BRANCH_REMOTE.",
              "referenceType": "enum git_branch_t"
            }
          ],
          "comment": [
            "Delete an existing branch reference."
          ],
          "group": "branch"
        },
        "git_branch_list": {
          "kind": "function",
          "name": "git_branch_list",
          "location": {
            "file": "branch.h",
            "line": 93,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code."
          },
          "params": [
            {
              "name": "branch_names",
              "type": "git_strarray *",
              "direction": "in",
              "comment": "Pointer to a git_strarray structure\n where the branch names will be stored."
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "Repository where to find the branches."
            },
            {
              "name": "list_flags",
              "type": "unsigned int",
              "direction": "in",
              "comment": "Filtering flags for the branch\n listing. Valid values are GIT_BRANCH_LOCAL, GIT_BRANCH_REMOTE\n or a combination of the two."
            }
          ],
          "comment": [
            "Fill a list with all the branches in the Repository",
            "The string array will be filled with the names of the\n matching branches; these values are owned by the user and\n should be free'd manually when no longer needed, using\n `git_strarray_free`."
          ],
          "group": "branch"
        },
        "git_branch_move": {
          "kind": "function",
          "name": "git_branch_move",
          "location": {
            "file": "branch.h",
            "line": 114,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, GIT_ENOTFOUND if the branch\n doesn't exist or an error code."
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "Repository where lives the branch."
            },
            {
              "name": "old_branch_name",
              "type": "const char *",
              "direction": "in",
              "comment": "Current name of the branch to be moved;\n this name is validated for consistency."
            },
            {
              "name": "new_branch_name",
              "type": "const char *",
              "direction": "in",
              "comment": "Target name of the branch once the move\n is performed; this name is validated for consistency."
            },
            {
              "name": "force",
              "type": "int",
              "direction": "in",
              "comment": "Overwrite existing branch."
            }
          ],
          "comment": [
            "Move/rename an existing branch reference."
          ],
          "group": "branch"
        },
        "git_branch_t": {
          "kind": "enum",
          "name": "git_branch_t",
          "referenceName": "git_branch_t",
          "members": [
            {
              "name": "GIT_BRANCH_LOCAL",
              "value": "1"
            },
            {
              "name": "GIT_BRANCH_REMOTE",
              "value": "2"
            }
          ],
          "comment": [
            "Basic type of any Git branch."
          ],
          "location": {
            "file": "types.h",
            "line": 164,
            "column": 9
          },
          "group": "branch",
          "parameterTo": [
            "git_branch_delete"
          ]
        }
      },
      "info": {
        "summary": "Git branch parsing routines"
      }
    },
    "commit": {
      "apis": {
        "git_commit_lookup": {
          "kind": "function",
          "name": "git_commit_lookup",
          "location": {
            "file": "commit.h",
            "line": 33,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "commit",
              "type": "git_commit **",
              "direction": "in",
              "comment": "pointer to the looked up commit"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repo to use when locating the commit."
            },
            {
              "name": "id",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "identity of the commit to locate. If the object is\n\t\tan annotated tag it will be peeled back to the commit."
            }
          ],
          "comment": [
            "Lookup a commit object from a repository."
          ],
          "group": "commit"
        },
        "git_commit_lookup_prefix": {
          "kind": "function",
          "name": "git_commit_lookup_prefix",
          "location": {
            "file": "commit.h",
            "line": 51,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "commit",
              "type": "git_commit **",
              "direction": "in",
              "comment": "pointer to the looked up commit"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repo to use when locating the commit."
            },
            {
              "name": "id",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "identity of the commit to locate. If the object is\n\t\tan annotated tag it will be peeled back to the commit."
            },
            {
              "name": "len",
              "type": "unsigned int",
              "direction": "in",
              "comment": "the length of the short identifier"
            }
          ],
          "comment": [
            "Lookup a commit object from a repository,\n given a prefix of its identifier (short id)."
          ],
          "see": [
            "git_object_lookup_prefix"
          ],
          "group": "commit"
        },
        "git_commit_free": {
          "kind": "function",
          "name": "git_commit_free",
          "location": {
            "file": "commit.h",
            "line": 68,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "commit",
              "type": "git_commit *",
              "direction": "in",
              "comment": "the commit to close"
            }
          ],
          "comment": [
            "Close an open commit",
            "This is a wrapper around git_object_free()",
            "IMPORTANT:\n It *is* necessary to call this method when you stop\n using a commit. Failure to do so will cause a memory leak."
          ],
          "group": "commit"
        },
        "git_commit_id": {
          "kind": "function",
          "name": "git_commit_id",
          "location": {
            "file": "commit.h",
            "line": 79,
            "column": 29
          },
          "returns": {
            "type": "const git_oid *",
            "comment": "object identity for the commit."
          },
          "params": [
            {
              "name": "commit",
              "type": "git_commit *",
              "direction": "in",
              "comment": "a previously loaded commit."
            }
          ],
          "comment": [
            "Get the id of a commit."
          ],
          "group": "commit"
        },
        "git_commit_message_encoding": {
          "kind": "function",
          "name": "git_commit_message_encoding",
          "location": {
            "file": "commit.h",
            "line": 91,
            "column": 26
          },
          "returns": {
            "type": "const char *",
            "comment": "NULL, or the encoding"
          },
          "params": [
            {
              "name": "commit",
              "type": "git_commit *",
              "direction": "in",
              "comment": "a previously loaded commit."
            }
          ],
          "comment": [
            "Get the encoding for the message of a commit,\n as a string representing a standard encoding name.",
            "The encoding may be NULL if the `encoding` header\n in the commit is missing; in that case UTF-8 is assumed."
          ],
          "group": "commit"
        },
        "git_commit_message": {
          "kind": "function",
          "name": "git_commit_message",
          "location": {
            "file": "commit.h",
            "line": 99,
            "column": 26
          },
          "returns": {
            "type": "const char *",
            "comment": "the message of a commit"
          },
          "params": [
            {
              "name": "commit",
              "type": "git_commit *",
              "direction": "in",
              "comment": "a previously loaded commit."
            }
          ],
          "comment": [
            "Get the full message of a commit."
          ],
          "group": "commit"
        },
        "git_commit_time": {
          "kind": "function",
          "name": "git_commit_time",
          "location": {
            "file": "commit.h",
            "line": 107,
            "column": 24
          },
          "returns": {
            "type": "git_time_t",
            "comment": "the time of a commit"
          },
          "params": [
            {
              "name": "commit",
              "type": "git_commit *",
              "direction": "in",
              "comment": "a previously loaded commit."
            }
          ],
          "comment": [
            "Get the commit time (i.e. committer time) of a commit."
          ],
          "group": "commit"
        },
        "git_commit_time_offset": {
          "kind": "function",
          "name": "git_commit_time_offset",
          "location": {
            "file": "commit.h",
            "line": 115,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "positive or negative timezone offset, in minutes from UTC"
          },
          "params": [
            {
              "name": "commit",
              "type": "git_commit *",
              "direction": "in",
              "comment": "a previously loaded commit."
            }
          ],
          "comment": [
            "Get the commit timezone offset (i.e. committer's preferred timezone) of a commit."
          ],
          "group": "commit"
        },
        "git_commit_committer": {
          "kind": "function",
          "name": "git_commit_committer",
          "location": {
            "file": "commit.h",
            "line": 123,
            "column": 35
          },
          "returns": {
            "type": "const git_signature *",
            "comment": "the committer of a commit"
          },
          "params": [
            {
              "name": "commit",
              "type": "git_commit *",
              "direction": "in",
              "comment": "a previously loaded commit."
            }
          ],
          "comment": [
            "Get the committer of a commit."
          ],
          "group": "commit"
        },
        "git_commit_author": {
          "kind": "function",
          "name": "git_commit_author",
          "location": {
            "file": "commit.h",
            "line": 131,
            "column": 35
          },
          "returns": {
            "type": "const git_signature *",
            "comment": "the author of a commit"
          },
          "params": [
            {
              "name": "commit",
              "type": "git_commit *",
              "direction": "in",
              "comment": "a previously loaded commit."
            }
          ],
          "comment": [
            "Get the author of a commit."
          ],
          "group": "commit"
        },
        "git_commit_tree": {
          "kind": "function",
          "name": "git_commit_tree",
          "location": {
            "file": "commit.h",
            "line": 140,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "tree_out",
              "type": "git_tree **",
              "direction": "in",
              "comment": "pointer where to store the tree object"
            },
            {
              "name": "commit",
              "type": "git_commit *",
              "direction": "in",
              "comment": "a previously loaded commit."
            }
          ],
          "comment": [
            "Get the tree pointed to by a commit."
          ],
          "group": "commit"
        },
        "git_commit_tree_oid": {
          "kind": "function",
          "name": "git_commit_tree_oid",
          "location": {
            "file": "commit.h",
            "line": 150,
            "column": 29
          },
          "returns": {
            "type": "const git_oid *",
            "comment": "the id of tree pointed to by commit."
          },
          "params": [
            {
              "name": "commit",
              "type": "git_commit *",
              "direction": "in",
              "comment": "a previously loaded commit."
            }
          ],
          "comment": [
            "Get the id of the tree pointed to by a commit. This differs from\n `git_commit_tree` in that no attempts are made to fetch an object\n from the ODB."
          ],
          "group": "commit"
        },
        "git_commit_parentcount": {
          "kind": "function",
          "name": "git_commit_parentcount",
          "location": {
            "file": "commit.h",
            "line": 158,
            "column": 26
          },
          "returns": {
            "type": "unsigned int",
            "comment": "integer of count of parents"
          },
          "params": [
            {
              "name": "commit",
              "type": "git_commit *",
              "direction": "in",
              "comment": "a previously loaded commit."
            }
          ],
          "comment": [
            "Get the number of parents of this commit"
          ],
          "group": "commit"
        },
        "git_commit_parent": {
          "kind": "function",
          "name": "git_commit_parent",
          "location": {
            "file": "commit.h",
            "line": 168,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "parent",
              "type": "git_commit **",
              "direction": "in",
              "comment": "Pointer where to store the parent commit"
            },
            {
              "name": "commit",
              "type": "git_commit *",
              "direction": "in",
              "comment": "a previously loaded commit."
            },
            {
              "name": "n",
              "type": "unsigned int",
              "direction": "in",
              "comment": "the position of the parent (from 0 to `parentcount`)"
            }
          ],
          "comment": [
            "Get the specified parent of the commit."
          ],
          "group": "commit"
        },
        "git_commit_parent_oid": {
          "kind": "function",
          "name": "git_commit_parent_oid",
          "location": {
            "file": "commit.h",
            "line": 179,
            "column": 29
          },
          "returns": {
            "type": "const git_oid *",
            "comment": "the id of the parent, NULL on error."
          },
          "params": [
            {
              "name": "commit",
              "type": "git_commit *",
              "direction": "in",
              "comment": "a previously loaded commit."
            },
            {
              "name": "n",
              "type": "unsigned int",
              "direction": "in",
              "comment": "the position of the parent (from 0 to `parentcount`)"
            }
          ],
          "comment": [
            "Get the oid of a specified parent for a commit. This is different from\n `git_commit_parent`, which will attempt to load the parent commit from\n the ODB."
          ],
          "group": "commit"
        },
        "git_commit_create": {
          "kind": "function",
          "name": "git_commit_create",
          "location": {
            "file": "commit.h",
            "line": 228,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code\n\tThe created commit will be written to the Object Database and\n\tthe given reference will be updated to point to it"
          },
          "params": [
            {
              "name": "oid",
              "type": "git_oid *",
              "direction": "in",
              "comment": "Pointer where to store the OID of the\n\tnewly created commit"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "Repository where to store the commit"
            },
            {
              "name": "update_ref",
              "type": "const char *",
              "direction": "in",
              "comment": "If not NULL, name of the reference that\n\twill be updated to point to this commit. If the reference\n\tis not direct, it will be resolved to a direct reference.\n\tUse \"HEAD\" to update the HEAD of the current branch and\n\tmake it point to this commit. If the reference doesn't\n\texist yet, it will be created."
            },
            {
              "name": "author",
              "type": "const git_signature *",
              "direction": "in",
              "comment": "Signature representing the author and the authory\n\ttime of this commit"
            },
            {
              "name": "committer",
              "type": "const git_signature *",
              "direction": "in",
              "comment": "Signature representing the committer and the\n commit time of this commit"
            },
            {
              "name": "message_encoding",
              "type": "const char *",
              "direction": "in",
              "comment": "The encoding for the message in the\n commit, represented with a standard encoding name.\n E.g. \"UTF-8\". If NULL, no encoding header is written and\n UTF-8 is assumed."
            },
            {
              "name": "message",
              "type": "const char *",
              "direction": "in",
              "comment": "Full message for this commit"
            },
            {
              "name": "tree",
              "type": "const git_tree *",
              "direction": "in",
              "comment": "An instance of a `git_tree` object that will\n be used as the tree for the commit. This tree object must\n also be owned by the given `repo`."
            },
            {
              "name": "parent_count",
              "type": "int",
              "direction": "in",
              "comment": "Number of parents for this commit"
            },
            {
              "name": "parents",
              "type": "const git_commit **"
            }
          ],
          "comment": [
            "Create a new commit in the repository using `git_object`\n instances as parameters.",
            "The message will be cleaned up from excess whitespace\n it will be made sure that the last line ends with a '\\n\n'."
          ],
          "group": "commit"
        },
        "git_commit_create_v": {
          "kind": "function",
          "name": "git_commit_create_v",
          "location": {
            "file": "commit.h",
            "line": 256,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "oid",
              "type": "git_oid *"
            },
            {
              "name": "repo",
              "type": "git_repository *"
            },
            {
              "name": "update_ref",
              "type": "const char *"
            },
            {
              "name": "author",
              "type": "const git_signature *"
            },
            {
              "name": "committer",
              "type": "const git_signature *"
            },
            {
              "name": "message_encoding",
              "type": "const char *"
            },
            {
              "name": "message",
              "type": "const char *"
            },
            {
              "name": "tree",
              "type": "const git_tree *"
            },
            {
              "name": "parent_count",
              "type": "int"
            }
          ],
          "comment": [
            "Create a new commit in the repository using a variable\n argument list.",
            "The message will be cleaned up from excess whitespace\n it will be made sure that the last line ends with a '\\n\n'.",
            "The parents for the commit are specified as a variable\n list of pointers to `const git_commit *`. Note that this\n is a convenience method which may not be safe to export\n for certain languages or compilers",
            "All other parameters remain the same"
          ],
          "see": [
            "git_commit_create"
          ],
          "group": "commit"
        },
        "git_commit": {
          "kind": "struct",
          "name": "git_commit",
          "referenceName": "struct git_commit",
          "opaque": true,
          "comment": [
            "Parsed representation of a commit object."
          ],
          "location": {
            "file": "types.h",
            "line": 108,
            "column": 27
          },
          "group": "commit",
          "parameterTo": [
            "git_commit_lookup",
            "git_commit_lookup_prefix",
            "git_commit_free",
            "git_commit_id",
            "git_commit_message_encoding",
            "git_commit_message",
            "git_commit_time",
            "git_commit_time_offset",
            "git_commit_committer",
            "git_commit_author",
            "git_commit_tree",
            "git_commit_tree_oid",
            "git_commit_parentcount",
            "git_commit_parent",
            "git_commit_parent_oid",
            "git_commit_create"
          ]
        }
      },
      "info": {
        "summary": "Git commit parsing, formatting routines"
      }
    },
    "common": {
      "apis": {
        "GIT_EXTERN(type)": {
          "kind": "macro",
          "name": "GIT_EXTERN(type)",
          "location": {
            "file": "common.h",
            "line": 33,
            "column": 10
          },
          "value": "extern __attribute__((visibility(\"default\"))) type",
          "comment": "Declare a public function exported for application use.",
          "group": "common"
        },
        "GIT_INLINE(type)": {
          "kind": "macro",
          "name": "GIT_INLINE(type)",
          "location": {
            "file": "common.h",
            "line": 42,
            "column": 10
          },
          "value": "static __inline type",
          "comment": "Declare a function as always inlined.",
          "group": "common"
        },
        "GIT_FORMAT_PRINTF(a,b)": {
          "kind": "macro",
          "name": "GIT_FORMAT_PRINTF(a,b)",
          "location": {
            "file": "common.h",
            "line": 49,
            "column": 10
          },
          "value": "__attribute__((format (printf, a, b)))",
          "comment": "Declare a function's takes printf style arguments.",
          "group": "common"
        },
        "GIT_PATH_LIST_SEPARATOR": {
          "kind": "macro",
          "name": "GIT_PATH_LIST_SEPARATOR",
          "location": {
            "file": "common.h",
            "line": 74,
            "column": 9
          },
          "value": "';'",
          "comment": "The separator used in path list strings (ie like in the PATH environment variable). A semi-colon \";\" is used on Windows, and a colon \":\" for all other systems.",
          "group": "common"
        },
        "GIT_PATH_MAX": {
          "kind": "macro",
          "name": "GIT_PATH_MAX",
          "location": {
            "file": "common.h",
            "line": 82,
            "column": 9
          },
          "value": "4096",
          "comment": "The maximum length of a valid git path.",
          "group": "common"
        },
        "git_strarray": {
          "kind": "struct",
          "name": "git_strarray",
          "referenceName": "git_strarray",
          "members": [
            {
              "name": "strings",
              "type": "char **"
            },
            {
              "name": "count",
              "type": "size_t"
            }
          ],
          "location": {
            "file": "common.h",
            "line": 84,
            "column": 9
          },
          "group": "common",
          "parameterTo": [
            "git_branch_list",
            "git_strarray_free",
            "git_strarray_copy",
            "git_reference_list",
            "git_remote_list",
            "git_tag_list",
            "git_tag_list_match"
          ]
        },
        "git_strarray_free": {
          "kind": "function",
          "name": "git_strarray_free",
          "location": {
            "file": "common.h",
            "line": 89,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "array",
              "type": "git_strarray *"
            }
          ],
          "group": "common"
        },
        "git_strarray_copy": {
          "kind": "function",
          "name": "git_strarray_copy",
          "location": {
            "file": "common.h",
            "line": 90,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "tgt",
              "type": "git_strarray *"
            },
            {
              "name": "src",
              "type": "const git_strarray *"
            }
          ],
          "group": "common"
        },
        "git_libgit2_version": {
          "kind": "function",
          "name": "git_libgit2_version",
          "location": {
            "file": "common.h",
            "line": 100,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "major",
              "type": "int *",
              "direction": "in",
              "comment": "Store the major version number"
            },
            {
              "name": "minor",
              "type": "int *",
              "direction": "in",
              "comment": "Store the minor version number"
            },
            {
              "name": "rev",
              "type": "int *",
              "direction": "in",
              "comment": "Store the revision (patch) number"
            }
          ],
          "comment": [
            "Return the version of the libgit2 library\n being currently used."
          ],
          "group": "common"
        }
      },
      "info": {
        "summary": "Git common platform definitions"
      }
    },
    "config": {
      "apis": {
        "git_config_file": {
          "kind": "struct",
          "name": "git_config_file",
          "referenceName": "struct git_config_file",
          "comment": [
            "Generic backend that implements the interface to\n access a configuration file"
          ],
          "members": [
            {
              "name": "cfg",
              "type": "struct git_config *"
            },
            {
              "name": "open",
              "type": "int (*)(struct git_config_file *)"
            },
            {
              "name": "get",
              "type": "int (*)(struct git_config_file *, const char *, const char **)"
            },
            {
              "name": "get_multivar",
              "type": "int (*)(struct git_config_file *, const char *, const char *, int (*)(const char *, void *), void *)"
            },
            {
              "name": "set",
              "type": "int (*)(struct git_config_file *, const char *, const char *)"
            },
            {
              "name": "set_multivar",
              "type": "int (*)(git_config_file *, const char *, const char *, const char *)"
            },
            {
              "name": "del",
              "type": "int (*)(struct git_config_file *, const char *)"
            },
            {
              "name": "foreach",
              "type": "int (*)(struct git_config_file *, int (*)(const char *, const char *, void *), void *)"
            },
            {
              "name": "free",
              "type": "void (*)(struct git_config_file *)"
            }
          ],
          "location": {
            "file": "config.h",
            "line": 26,
            "column": 8
          },
          "group": "config",
          "parameterTo": [
            "git_config_add_file"
          ]
        },
        "git_cvar_t": {
          "kind": "enum",
          "name": "git_cvar_t",
          "referenceName": "git_cvar_t",
          "members": [
            {
              "name": "GIT_CVAR_FALSE",
              "value": "0"
            },
            {
              "name": "GIT_CVAR_TRUE",
              "value": "1"
            },
            {
              "name": "GIT_CVAR_INT32"
            },
            {
              "name": "GIT_CVAR_STRING"
            }
          ],
          "location": {
            "file": "config.h",
            "line": 40,
            "column": 9
          },
          "group": "config"
        },
        "git_cvar_map": {
          "kind": "struct",
          "name": "git_cvar_map",
          "referenceName": "git_cvar_map",
          "members": [
            {
              "name": "cvar_type",
              "type": "git_cvar_t",
              "referenceType": "enum git_cvar_t"
            },
            {
              "name": "str_match",
              "type": "const char *"
            },
            {
              "name": "map_value",
              "type": "int"
            }
          ],
          "location": {
            "file": "config.h",
            "line": 47,
            "column": 9
          },
          "group": "config",
          "parameterTo": [
            "git_config_get_mapped"
          ]
        },
        "git_config_find_global": {
          "kind": "function",
          "name": "git_config_find_global",
          "location": {
            "file": "config.h",
            "line": 68,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 if a global configuration file has been\n\tfound. Its path will be stored in `buffer`."
          },
          "params": [
            {
              "name": "global_config_path",
              "type": "char *",
              "direction": "in",
              "comment": "Buffer of GIT_PATH_MAX length to store the path"
            },
            {
              "name": "length",
              "type": "size_t"
            }
          ],
          "comment": [
            "Locate the path to the global configuration file",
            "The user or global configuration file is usually\n located in `$HOME/.gitconfig`.",
            "This method will try to guess the full path to that\n file, if the file exists. The returned path\n may be used on any `git_config` call to load the\n global configuration file."
          ],
          "group": "config"
        },
        "git_config_find_system": {
          "kind": "function",
          "name": "git_config_find_system",
          "location": {
            "file": "config.h",
            "line": 80,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 if a system configuration file has been\n\tfound. Its path will be stored in `buffer`."
          },
          "params": [
            {
              "name": "system_config_path",
              "type": "char *",
              "direction": "in",
              "comment": "Buffer of GIT_PATH_MAX length to store the path"
            },
            {
              "name": "length",
              "type": "size_t"
            }
          ],
          "comment": [
            "Locate the path to the system configuration file",
            "If /etc/gitconfig doesn't exist, it will look for\n %PROGRAMFILES%\\Git\\etc\\gitconfig\n."
          ],
          "group": "config"
        },
        "git_config_open_global": {
          "kind": "function",
          "name": "git_config_open_global",
          "location": {
            "file": "config.h",
            "line": 91,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_config **",
              "direction": "in",
              "comment": "Pointer to store the config instance"
            }
          ],
          "comment": [
            "Open the global configuration file",
            "Utility wrapper that calls `git_config_find_global`\n and opens the located file, if it exists."
          ],
          "group": "config"
        },
        "git_config_file__ondisk": {
          "kind": "function",
          "name": "git_config_file__ondisk",
          "location": {
            "file": "config.h",
            "line": 104,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "out",
              "type": "struct git_config_file **",
              "direction": "in",
              "comment": "the new backend"
            },
            {
              "name": "path",
              "type": "const char *",
              "direction": "in",
              "comment": "where the config file is located"
            }
          ],
          "comment": [
            "Create a configuration file backend for ondisk files",
            "These are the normal `.gitconfig` files that Core Git\n processes. Note that you first have to add this file to a\n configuration object before you can query it for configuration\n variables."
          ],
          "group": "config"
        },
        "git_config_new": {
          "kind": "function",
          "name": "git_config_new",
          "location": {
            "file": "config.h",
            "line": 115,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_config **",
              "direction": "in",
              "comment": "pointer to the new configuration"
            }
          ],
          "comment": [
            "Allocate a new configuration object",
            "This object is empty, so you have to add a file to it before you\n can do anything with it."
          ],
          "group": "config"
        },
        "git_config_add_file": {
          "kind": "function",
          "name": "git_config_add_file",
          "location": {
            "file": "config.h",
            "line": 132,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "cfg",
              "type": "git_config *",
              "direction": "in",
              "comment": "the configuration to add the file to"
            },
            {
              "name": "file",
              "type": "git_config_file *",
              "direction": "in",
              "comment": "the configuration file (backend) to add"
            },
            {
              "name": "priority",
              "type": "int",
              "direction": "in",
              "comment": "the priority the backend should have"
            }
          ],
          "comment": [
            "Add a generic config file instance to an existing config",
            "Note that the configuration object will free the file\n automatically.",
            "Further queries on this config object will access each\n of the config file instances in order (instances with\n a higher priority will be accessed first)."
          ],
          "group": "config"
        },
        "git_config_add_file_ondisk": {
          "kind": "function",
          "name": "git_config_add_file_ondisk",
          "location": {
            "file": "config.h",
            "line": 153,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "cfg",
              "type": "git_config *",
              "direction": "in",
              "comment": "the configuration to add the file to"
            },
            {
              "name": "path",
              "type": "const char *",
              "direction": "in",
              "comment": "path to the configuration file (backend) to add"
            },
            {
              "name": "priority",
              "type": "int",
              "direction": "in",
              "comment": "the priority the backend should have"
            }
          ],
          "comment": [
            "Add an on-disk config file instance to an existing config",
            "The on-disk file pointed at by `path` will be opened and\n parsed; it's expected to be a native Git config file following\n the default Git config syntax (see man git-config).",
            "Note that the configuration object will free the file\n automatically.",
            "Further queries on this config object will access each\n of the config file instances in order (instances with\n a higher priority will be accessed first)."
          ],
          "group": "config"
        },
        "git_config_open_ondisk": {
          "kind": "function",
          "name": "git_config_open_ondisk",
          "location": {
            "file": "config.h",
            "line": 168,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "cfg",
              "type": "git_config **",
              "direction": "in",
              "comment": "The configuration instance to create"
            },
            {
              "name": "path",
              "type": "const char *",
              "direction": "in",
              "comment": "Path to the on-disk file to open"
            }
          ],
          "comment": [
            "Create a new config instance containing a single on-disk file",
            "This method is a simple utility wrapper for the following sequence\n of calls:\n\t- git_config_new\n\t- git_config_add_file_ondisk"
          ],
          "group": "config"
        },
        "git_config_free": {
          "kind": "function",
          "name": "git_config_free",
          "location": {
            "file": "config.h",
            "line": 175,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "cfg",
              "type": "git_config *",
              "direction": "in",
              "comment": "the configuration to free"
            }
          ],
          "comment": [
            "Free the configuration and its associated memory and files"
          ],
          "group": "config"
        },
        "git_config_get_int32": {
          "kind": "function",
          "name": "git_config_get_int32",
          "location": {
            "file": "config.h",
            "line": 185,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "int32_t *",
              "direction": "in",
              "comment": "pointer to the variable where the value should be stored"
            },
            {
              "name": "cfg",
              "type": "git_config *",
              "direction": "in",
              "comment": "where to look for the variable"
            },
            {
              "name": "name",
              "type": "const char *",
              "direction": "in",
              "comment": "the variable's name"
            }
          ],
          "comment": [
            "Get the value of an integer config variable."
          ],
          "group": "config"
        },
        "git_config_get_int64": {
          "kind": "function",
          "name": "git_config_get_int64",
          "location": {
            "file": "config.h",
            "line": 195,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "int64_t *",
              "direction": "in",
              "comment": "pointer to the variable where the value should be stored"
            },
            {
              "name": "cfg",
              "type": "git_config *",
              "direction": "in",
              "comment": "where to look for the variable"
            },
            {
              "name": "name",
              "type": "const char *",
              "direction": "in",
              "comment": "the variable's name"
            }
          ],
          "comment": [
            "Get the value of a long integer config variable."
          ],
          "group": "config"
        },
        "git_config_get_bool": {
          "kind": "function",
          "name": "git_config_get_bool",
          "location": {
            "file": "config.h",
            "line": 208,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "int *",
              "direction": "in",
              "comment": "pointer to the variable where the value should be stored"
            },
            {
              "name": "cfg",
              "type": "git_config *",
              "direction": "in",
              "comment": "where to look for the variable"
            },
            {
              "name": "name",
              "type": "const char *",
              "direction": "in",
              "comment": "the variable's name"
            }
          ],
          "comment": [
            "Get the value of a boolean config variable.",
            "This function uses the usual C convention of 0 being false and\n anything else true."
          ],
          "group": "config"
        },
        "git_config_get_string": {
          "kind": "function",
          "name": "git_config_get_string",
          "location": {
            "file": "config.h",
            "line": 221,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "const char **",
              "direction": "in",
              "comment": "pointer to the variable's value"
            },
            {
              "name": "cfg",
              "type": "git_config *",
              "direction": "in",
              "comment": "where to look for the variable"
            },
            {
              "name": "name",
              "type": "const char *",
              "direction": "in",
              "comment": "the variable's name"
            }
          ],
          "comment": [
            "Get the value of a string config variable.",
            "The string is owned by the variable and should not be freed by the\n user."
          ],
          "group": "config"
        },
        "git_config_get_multivar": {
          "kind": "function",
          "name": "git_config_get_multivar",
          "location": {
            "file": "config.h",
            "line": 235,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "cfg",
              "type": "git_config *",
              "direction": "in",
              "comment": "where to look for the variable"
            },
            {
              "name": "name",
              "type": "const char *",
              "direction": "in",
              "comment": "the variable's name"
            },
            {
              "name": "regexp",
              "type": "const char *",
              "direction": "in",
              "comment": "regular expression to filter which variables we're\n interested in. Use NULL to indicate all"
            },
            {
              "name": "fn",
              "type": "int (*)(const char *, void *)",
              "direction": "in",
              "comment": "the function to be called on each value of the variable"
            },
            {
              "name": "data",
              "type": "void *",
              "direction": "in",
              "comment": "opaque pointer to pass to the callback"
            }
          ],
          "comment": [
            "Get each value of a multivar.",
            "The callback will be called on each variable found"
          ],
          "group": "config"
        },
        "git_config_set_int32": {
          "kind": "function",
          "name": "git_config_set_int32",
          "location": {
            "file": "config.h",
            "line": 245,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "cfg",
              "type": "git_config *",
              "direction": "in",
              "comment": "where to look for the variable"
            },
            {
              "name": "name",
              "type": "const char *",
              "direction": "in",
              "comment": "the variable's name"
            },
            {
              "name": "value",
              "type": "int32_t",
              "direction": "in",
              "comment": "Integer value for the variable"
            }
          ],
          "comment": [
            "Set the value of an integer config variable."
          ],
          "group": "config"
        },
        "git_config_set_int64": {
          "kind": "function",
          "name": "git_config_set_int64",
          "location": {
            "file": "config.h",
            "line": 255,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "cfg",
              "type": "git_config *",
              "direction": "in",
              "comment": "where to look for the variable"
            },
            {
              "name": "name",
              "type": "const char *",
              "direction": "in",
              "comment": "the variable's name"
            },
            {
              "name": "value",
              "type": "int64_t",
              "direction": "in",
              "comment": "Long integer value for the variable"
            }
          ],
          "comment": [
            "Set the value of a long integer config variable."
          ],
          "group": "config"
        },
        "git_config_set_bool": {
          "kind": "function",
          "name": "git_config_set_bool",
          "location": {
            "file": "config.h",
            "line": 265,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "cfg",
              "type": "git_config *",
              "direction": "in",
              "comment": "where to look for the variable"
            },
            {
              "name": "name",
              "type": "const char *",
              "direction": "in",
              "comment": "the variable's name"
            },
            {
              "name": "value",
              "type": "int",
              "direction": "in",
              "comment": "the value to store"
            }
          ],
          "comment": [
            "Set the value of a boolean config variable."
          ],
          "group": "config"
        },
        "git_config_set_string": {
          "kind": "function",
          "name": "git_config_set_string",
          "location": {
            "file": "config.h",
            "line": 278,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "cfg",
              "type": "git_config *",
              "direction": "in",
              "comment": "where to look for the variable"
            },
            {
              "name": "name",
              "type": "const char *",
              "direction": "in",
              "comment": "the variable's name"
            },
            {
              "name": "value",
              "type": "const char *",
              "direction": "in",
              "comment": "the string to store."
            }
          ],
          "comment": [
            "Set the value of a string config variable.",
            "A copy of the string is made and the user is free to use it\n afterwards."
          ],
          "group": "config"
        },
        "git_config_set_multivar": {
          "kind": "function",
          "name": "git_config_set_multivar",
          "location": {
            "file": "config.h",
            "line": 289,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "cfg",
              "type": "git_config *",
              "direction": "in",
              "comment": "where to look for the variable"
            },
            {
              "name": "name",
              "type": "const char *",
              "direction": "in",
              "comment": "the variable's name"
            },
            {
              "name": "regexp",
              "type": "const char *",
              "direction": "in",
              "comment": "a regular expression to indicate which values to replace"
            },
            {
              "name": "value",
              "type": "const char *",
              "direction": "in",
              "comment": "the new value."
            }
          ],
          "comment": [
            "Set a multivar"
          ],
          "group": "config"
        },
        "git_config_delete": {
          "kind": "function",
          "name": "git_config_delete",
          "location": {
            "file": "config.h",
            "line": 297,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "cfg",
              "type": "git_config *",
              "direction": "in",
              "comment": "the configuration"
            },
            {
              "name": "name",
              "type": "const char *",
              "direction": "in",
              "comment": "the variable to delete"
            }
          ],
          "comment": [
            "Delete a config variable"
          ],
          "group": "config"
        },
        "git_config_foreach": {
          "kind": "function",
          "name": "git_config_foreach",
          "location": {
            "file": "config.h",
            "line": 312,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or the return value of the callback which didn't return 0"
          },
          "params": [
            {
              "name": "cfg",
              "type": "git_config *",
              "direction": "in",
              "comment": "where to get the variables from"
            },
            {
              "name": "callback",
              "type": "int (*)(const char *, const char *, void *)",
              "direction": "in",
              "comment": "the function to call on each variable"
            },
            {
              "name": "payload",
              "type": "void *",
              "direction": "in",
              "comment": "the data to pass to the callback"
            }
          ],
          "comment": [
            "Perform an operation on each config variable.",
            "The callback receives the normalized name and value of each variable\n in the config backend, and the data pointer passed to this function.\n As soon as one of the callback functions returns something other than 0,\n this function returns that value."
          ],
          "group": "config"
        },
        "git_config_get_mapped": {
          "kind": "function",
          "name": "git_config_get_mapped",
          "location": {
            "file": "config.h",
            "line": 352,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, error code otherwise"
          },
          "params": [
            {
              "name": "out",
              "type": "int *",
              "direction": "in",
              "comment": "place to store the result of the mapping"
            },
            {
              "name": "cfg",
              "type": "git_config *",
              "direction": "in",
              "comment": "config file to get the variables from"
            },
            {
              "name": "name",
              "type": "const char *",
              "direction": "in",
              "comment": "name of the config variable to lookup"
            },
            {
              "name": "maps",
              "type": "git_cvar_map *",
              "direction": "in",
              "comment": "array of `git_cvar_map` objects specifying the possible mappings"
            },
            {
              "name": "map_n",
              "type": "size_t",
              "direction": "in",
              "comment": "number of mapping objects in `maps`"
            }
          ],
          "comment": [
            "Query the value of a config variable and return it mapped to\n an integer constant.",
            "This is a helper method to easily map different possible values\n to a variable to integer constants that easily identify them.",
            "A mapping array looks as follows:",
            "git_cvar_map autocrlf_mapping[3] = {\n\t\t{GIT_CVAR_FALSE, NULL, GIT_AUTO_CRLF_FALSE},\n\t\t{GIT_CVAR_TRUE, NULL, GIT_AUTO_CRLF_TRUE},\n\t\t{GIT_CVAR_STRING, \"input\", GIT_AUTO_CRLF_INPUT},\n\t\t{GIT_CVAR_STRING, \"default\", GIT_AUTO_CRLF_DEFAULT}};",
            "On any \"false\" value for the variable (e.g. \"false\", \"FALSE\", \"no\"), the\n mapping will store `GIT_AUTO_CRLF_FALSE` in the `out` parameter.",
            "The same thing applies for any \"true\" value such as \"true\", \"yes\" or \"1\", storing\n the `GIT_AUTO_CRLF_TRUE` variable.",
            "Otherwise, if the value matches the string \"input\" (with case insensitive comparison),\n the given constant will be stored in `out`, and likewise for \"default\".",
            "If not a single match can be made to store in `out`, an error code will be\n returned."
          ],
          "group": "config"
        },
        "git_config": {
          "kind": "struct",
          "name": "git_config",
          "referenceName": "struct git_config",
          "opaque": true,
          "comment": [
            "Memory representation of a set of config files"
          ],
          "location": {
            "file": "types.h",
            "line": 123,
            "column": 27
          },
          "group": "config",
          "parameterTo": [
            "git_config_open_global",
            "git_config_new",
            "git_config_add_file",
            "git_config_add_file_ondisk",
            "git_config_open_ondisk",
            "git_config_free",
            "git_config_get_int32",
            "git_config_get_int64",
            "git_config_get_bool",
            "git_config_get_string",
            "git_config_get_multivar",
            "git_config_set_int32",
            "git_config_set_int64",
            "git_config_set_bool",
            "git_config_set_string",
            "git_config_set_multivar",
            "git_config_delete",
            "git_config_foreach",
            "git_config_get_mapped",
            "git_repository_config",
            "git_repository_set_config"
          ]
        }
      },
      "info": {
        "summary": "Git config management routines"
      }
    },
    "diff": {
      "apis": {
        "undefined": {
          "kind": "enum",
          "members": [
            {
              "name": "GIT_DIFF_LINE_CONTEXT",
              "value": "32"
            },
            {
              "name": "GIT_DIFF_LINE_ADDITION",
              "value": "43"
            },
            {
              "name": "GIT_DIFF_LINE_DELETION",
              "value": "45"
            },
            {
              "name": "GIT_DIFF_LINE_ADD_EOFNL",
              "value": "10",
              "comment": [
                "LF was added at end of file"
              ]
            },
            {
              "name": "GIT_DIFF_LINE_DEL_EOFNL",
              "value": "0",
              "comment": [
                "LF was removed at end of file"
              ]
            },
            {
              "name": "GIT_DIFF_LINE_FILE_HDR",
              "value": "70"
            },
            {
              "name": "GIT_DIFF_LINE_HUNK_HDR",
              "value": "72"
            },
            {
              "name": "GIT_DIFF_LINE_BINARY",
              "value": "66"
            }
          ],
          "comment": [
            "Line origin constants.",
            "These values describe where a line came from and will be passed to\n the git_diff_data_fn when iterating over a diff.  There are some\n special origin contants at the end that are used for the text\n output callbacks to demarcate lines that are actually part of\n the file or hunk headers."
          ],
          "location": {
            "file": "diff.h",
            "line": 162,
            "column": 1
          },
          "group": "diff"
        },
        "git_diff_options": {
          "kind": "struct",
          "name": "git_diff_options",
          "referenceName": "git_diff_options",
          "comment": [
            "Structure describing options about how the diff should be executed.",
            "Setting all values of the structure to zero will yield the default\n values.  Similarly, passing NULL for the options structure will\n give the defaults.  The default values are marked below."
          ],
          "members": [
            {
              "name": "flags",
              "type": "uint32_t",
              "comment": [
                "defaults to GIT_DIFF_NORMAL"
              ]
            },
            {
              "name": "context_lines",
              "type": "uint16_t",
              "comment": [
                "defaults to 3"
              ]
            },
            {
              "name": "interhunk_lines",
              "type": "uint16_t",
              "comment": [
                "defaults to 3"
              ]
            },
            {
              "name": "old_prefix",
              "type": "char *",
              "comment": [
                "defaults to \"a\""
              ]
            },
            {
              "name": "new_prefix",
              "type": "char *",
              "comment": [
                "defaults to \"b\""
              ]
            },
            {
              "name": "pathspec",
              "type": "git_strarray",
              "comment": [
                "defaults to show all paths"
              ],
              "referenceType": "struct git_strarray"
            }
          ],
          "location": {
            "file": "diff.h",
            "line": 56,
            "column": 9
          },
          "group": "diff",
          "parameterTo": [
            "git_diff_tree_to_tree",
            "git_diff_index_to_tree",
            "git_diff_workdir_to_index",
            "git_diff_workdir_to_tree",
            "git_diff_blobs"
          ]
        },
        "git_diff_list": {
          "kind": "struct",
          "name": "git_diff_list",
          "referenceName": "struct git_diff_list",
          "opaque": true,
          "comment": [
            "The diff list object that contains all individual file deltas."
          ],
          "location": {
            "file": "diff.h",
            "line": 68,
            "column": 30
          },
          "group": "diff",
          "parameterTo": [
            "git_diff_list_free",
            "git_diff_tree_to_tree",
            "git_diff_index_to_tree",
            "git_diff_workdir_to_index",
            "git_diff_workdir_to_tree",
            "git_diff_merge",
            "git_diff_foreach",
            "git_diff_print_compact",
            "git_diff_print_patch"
          ]
        },
        "git_delta_t": {
          "kind": "enum",
          "name": "git_delta_t",
          "referenceName": "git_delta_t",
          "members": [
            {
              "name": "GIT_DELTA_UNMODIFIED",
              "value": "0"
            },
            {
              "name": "GIT_DELTA_ADDED",
              "value": "1"
            },
            {
              "name": "GIT_DELTA_DELETED",
              "value": "2"
            },
            {
              "name": "GIT_DELTA_MODIFIED",
              "value": "3"
            },
            {
              "name": "GIT_DELTA_RENAMED",
              "value": "4"
            },
            {
              "name": "GIT_DELTA_COPIED",
              "value": "5"
            },
            {
              "name": "GIT_DELTA_IGNORED",
              "value": "6"
            },
            {
              "name": "GIT_DELTA_UNTRACKED",
              "value": "7"
            }
          ],
          "comment": [
            "What type of change is described by a git_diff_delta?"
          ],
          "location": {
            "file": "diff.h",
            "line": 82,
            "column": 9
          },
          "group": "diff"
        },
        "git_diff_file": {
          "kind": "struct",
          "name": "git_diff_file",
          "referenceName": "git_diff_file",
          "comment": [
            "Description of one side of a diff."
          ],
          "members": [
            {
              "name": "oid",
              "type": "git_oid",
              "referenceType": "struct _git_oid"
            },
            {
              "name": "path",
              "type": "char *"
            },
            {
              "name": "mode",
              "type": "uint16_t"
            },
            {
              "name": "size",
              "type": "git_off_t",
              "referenceType": "int64_t"
            },
            {
              "name": "flags",
              "type": "unsigned int"
            }
          ],
          "location": {
            "file": "diff.h",
            "line": 96,
            "column": 9
          },
          "group": "diff"
        },
        "git_diff_delta": {
          "kind": "struct",
          "name": "git_diff_delta",
          "referenceName": "git_diff_delta",
          "comment": [
            "Description of changes to one file.",
            "When iterating over a diff list object, this will generally be passed to\n most callback functions and you can use the contents to understand\n exactly what has changed.",
            "Under some circumstances, not all fields will be filled in, but the code\n generally tries to fill in as much as possible.  One example is that the\n \"binary\" field will not actually look at file contents if you do not\n pass in hunk and/or line callbacks to the diff foreach iteration function.\n It will just use the git attributes for those files."
          ],
          "members": [
            {
              "name": "old_file",
              "type": "git_diff_file",
              "referenceType": "struct git_diff_file"
            },
            {
              "name": "new_file",
              "type": "git_diff_file",
              "referenceType": "struct git_diff_file"
            },
            {
              "name": "status",
              "type": "git_delta_t",
              "referenceType": "enum git_delta_t"
            },
            {
              "name": "similarity",
              "type": "unsigned int",
              "comment": [
                "for RENAMED and COPIED, value 0-100"
              ]
            },
            {
              "name": "binary",
              "type": "int"
            }
          ],
          "location": {
            "file": "diff.h",
            "line": 117,
            "column": 9
          },
          "group": "diff",
          "parameterTo": [
            "git_diff_file_fn",
            "git_diff_hunk_fn",
            "git_diff_data_fn"
          ]
        },
        "git_diff_file_fn": {
          "kind": "callback",
          "name": "git_diff_file_fn",
          "type": "int (*)(void *, git_diff_delta *, float)",
          "comment": [
            "When iterating over a diff, callback that will be made per file."
          ],
          "location": {
            "file": "diff.h",
            "line": 128,
            "column": 15
          },
          "params": [
            {
              "type": "void *"
            },
            {
              "type": "git_diff_delta *"
            },
            {
              "type": "float"
            }
          ],
          "group": "diff",
          "parameterTo": [
            "git_diff_foreach",
            "git_diff_blobs"
          ],
          "typedef": true
        },
        "git_diff_range": {
          "kind": "struct",
          "name": "git_diff_range",
          "referenceName": "git_diff_range",
          "comment": [
            "Structure describing a hunk of a diff."
          ],
          "members": [
            {
              "name": "old_start",
              "type": "int"
            },
            {
              "name": "old_lines",
              "type": "int"
            },
            {
              "name": "new_start",
              "type": "int"
            },
            {
              "name": "new_lines",
              "type": "int"
            }
          ],
          "location": {
            "file": "diff.h",
            "line": 136,
            "column": 9
          },
          "group": "diff",
          "parameterTo": [
            "git_diff_hunk_fn",
            "git_diff_data_fn"
          ]
        },
        "git_diff_hunk_fn": {
          "kind": "callback",
          "name": "git_diff_hunk_fn",
          "type": "int (*)(void *, git_diff_delta *, git_diff_range *, const char *, size_t)",
          "comment": [
            "When iterating over a diff, callback that will be made per hunk."
          ],
          "location": {
            "file": "diff.h",
            "line": 146,
            "column": 15
          },
          "params": [
            {
              "type": "void *"
            },
            {
              "type": "git_diff_delta *"
            },
            {
              "type": "git_diff_range *"
            },
            {
              "type": "const char *"
            },
            {
              "type": "size_t"
            }
          ],
          "group": "diff",
          "parameterTo": [
            "git_diff_foreach",
            "git_diff_blobs"
          ],
          "typedef": true
        },
        "git_diff_data_fn": {
          "kind": "callback",
          "name": "git_diff_data_fn",
          "type": "int (*)(void *, git_diff_delta *, git_diff_range *, char, const char *, size_t)",
          "comment": [
            "When iterating over a diff, callback that will be made per text diff\n line. In this context, the provided range will be NULL.",
            "When printing a diff, callback that will be made to output each line\n of text.  This uses some extra GIT_DIFF_LINE_... constants for output\n of lines of file and hunk headers."
          ],
          "location": {
            "file": "diff.h",
            "line": 186,
            "column": 15
          },
          "params": [
            {
              "type": "void *"
            },
            {
              "type": "git_diff_delta *"
            },
            {
              "type": "git_diff_range *"
            },
            {
              "type": "char"
            },
            {
              "type": "const char *"
            },
            {
              "type": "size_t"
            }
          ],
          "group": "diff",
          "parameterTo": [
            "git_diff_foreach",
            "git_diff_print_compact",
            "git_diff_print_patch",
            "git_diff_blobs"
          ],
          "typedef": true
        },
        "git_diff_list_free": {
          "kind": "function",
          "name": "git_diff_list_free",
          "location": {
            "file": "diff.h",
            "line": 204,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "diff",
              "type": "git_diff_list *"
            }
          ],
          "comment": [
            "Deallocate a diff list."
          ],
          "group": "diff"
        },
        "git_diff_tree_to_tree": {
          "kind": "function",
          "name": "git_diff_tree_to_tree",
          "location": {
            "file": "diff.h",
            "line": 215,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "The repository containing the trees."
            },
            {
              "name": "opts",
              "type": "const git_diff_options *",
              "direction": "in",
              "comment": "Structure with options to influence diff or NULL for defaults."
            },
            {
              "name": "old_tree",
              "type": "git_tree *",
              "direction": "in",
              "comment": "A git_tree object to diff from."
            },
            {
              "name": "new_tree",
              "type": "git_tree *",
              "direction": "in",
              "comment": "A git_tree object to diff to."
            },
            {
              "name": "diff",
              "type": "git_diff_list **",
              "direction": "in",
              "comment": "A pointer to a git_diff_list pointer that will be allocated."
            }
          ],
          "comment": [
            "Compute a difference between two tree objects."
          ],
          "group": "diff"
        },
        "git_diff_index_to_tree": {
          "kind": "function",
          "name": "git_diff_index_to_tree",
          "location": {
            "file": "diff.h",
            "line": 230,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "The repository containing the tree and index."
            },
            {
              "name": "opts",
              "type": "const git_diff_options *",
              "direction": "in",
              "comment": "Structure with options to influence diff or NULL for defaults."
            },
            {
              "name": "old_tree",
              "type": "git_tree *",
              "direction": "in",
              "comment": "A git_tree object to diff from."
            },
            {
              "name": "diff",
              "type": "git_diff_list **",
              "direction": "in",
              "comment": "A pointer to a git_diff_list pointer that will be allocated."
            }
          ],
          "comment": [
            "Compute a difference between a tree and the index."
          ],
          "group": "diff"
        },
        "git_diff_workdir_to_index": {
          "kind": "function",
          "name": "git_diff_workdir_to_index",
          "location": {
            "file": "diff.h",
            "line": 243,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "The repository."
            },
            {
              "name": "opts",
              "type": "const git_diff_options *",
              "direction": "in",
              "comment": "Structure with options to influence diff or NULL for defaults."
            },
            {
              "name": "diff",
              "type": "git_diff_list **",
              "direction": "in",
              "comment": "A pointer to a git_diff_list pointer that will be allocated."
            }
          ],
          "comment": [
            "Compute a difference between the working directory and the index."
          ],
          "group": "diff"
        },
        "git_diff_workdir_to_tree": {
          "kind": "function",
          "name": "git_diff_workdir_to_tree",
          "location": {
            "file": "diff.h",
            "line": 265,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "The repository containing the tree."
            },
            {
              "name": "opts",
              "type": "const git_diff_options *",
              "direction": "in",
              "comment": "Structure with options to influence diff or NULL for defaults."
            },
            {
              "name": "old_tree",
              "type": "git_tree *",
              "direction": "in",
              "comment": "A git_tree object to diff from."
            },
            {
              "name": "diff",
              "type": "git_diff_list **",
              "direction": "in",
              "comment": "A pointer to a git_diff_list pointer that will be allocated."
            }
          ],
          "comment": [
            "Compute a difference between the working directory and a tree.",
            "This returns strictly the differences between the tree and the\n files contained in the working directory, regardless of the state\n of files in the index.  There is no direct equivalent in C git.",
            "This is *NOT* the same as 'git diff HEAD' or 'git diff \n<SHA>'.  Those\n commands diff the tree, the index, and the workdir.  To emulate those\n functions, call `git_diff_index_to_tree` and `git_diff_workdir_to_index`,\n then call `git_diff_merge` on the results."
          ],
          "group": "diff"
        },
        "git_diff_merge": {
          "kind": "function",
          "name": "git_diff_merge",
          "location": {
            "file": "diff.h",
            "line": 284,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "onto",
              "type": "git_diff_list *",
              "direction": "in",
              "comment": "Diff to merge into."
            },
            {
              "name": "from",
              "type": "const git_diff_list *",
              "direction": "in",
              "comment": "Diff to merge."
            }
          ],
          "comment": [
            "Merge one diff list into another.",
            "This merges items from the \"from\" list into the \"onto\" list.  The\n resulting diff list will have all items that appear in either list.\n If an item appears in both lists, then it will be \"merged\" to appear\n as if the old version was from the \"onto\" list and the new version\n is from the \"from\" list (with the exception that if the item has a\n pending DELETE in the middle, then it will show as deleted)."
          ],
          "group": "diff"
        },
        "git_diff_foreach": {
          "kind": "function",
          "name": "git_diff_foreach",
          "location": {
            "file": "diff.h",
            "line": 306,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "diff",
              "type": "git_diff_list *"
            },
            {
              "name": "cb_data",
              "type": "void *"
            },
            {
              "name": "file_cb",
              "type": "git_diff_file_fn",
              "referenceType": "int (*)(void *, git_diff_delta *, float)"
            },
            {
              "name": "hunk_cb",
              "type": "git_diff_hunk_fn",
              "referenceType": "int (*)(void *, git_diff_delta *, git_diff_range *, const char *, size_t)"
            },
            {
              "name": "line_cb",
              "type": "git_diff_data_fn",
              "referenceType": "int (*)(void *, git_diff_delta *, git_diff_range *, char, const char *, size_t)"
            }
          ],
          "comment": [
            "Iterate over a diff list issuing callbacks.",
            "If the hunk and/or line callbacks are not NULL, then this will calculate\n text diffs for all files it thinks are not binary.  If those are both\n NULL, then this will not bother with the text diffs, so it can be\n efficient."
          ],
          "group": "diff"
        },
        "git_diff_print_compact": {
          "kind": "function",
          "name": "git_diff_print_compact",
          "location": {
            "file": "diff.h",
            "line": 316,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "diff",
              "type": "git_diff_list *"
            },
            {
              "name": "cb_data",
              "type": "void *"
            },
            {
              "name": "print_cb",
              "type": "git_diff_data_fn",
              "referenceType": "int (*)(void *, git_diff_delta *, git_diff_range *, char, const char *, size_t)"
            }
          ],
          "comment": [
            "Iterate over a diff generating text output like \"git diff --name-status\"."
          ],
          "group": "diff"
        },
        "git_diff_print_patch": {
          "kind": "function",
          "name": "git_diff_print_patch",
          "location": {
            "file": "diff.h",
            "line": 326,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "diff",
              "type": "git_diff_list *"
            },
            {
              "name": "cb_data",
              "type": "void *"
            },
            {
              "name": "print_cb",
              "type": "git_diff_data_fn",
              "referenceType": "int (*)(void *, git_diff_delta *, git_diff_range *, char, const char *, size_t)"
            }
          ],
          "comment": [
            "Iterate over a diff generating text output like \"git diff\".",
            "This is a super easy way to generate a patch from a diff."
          ],
          "group": "diff"
        },
        "git_diff_blobs": {
          "kind": "function",
          "name": "git_diff_blobs",
          "location": {
            "file": "diff.h",
            "line": 349,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "old_blob",
              "type": "git_blob *"
            },
            {
              "name": "new_blob",
              "type": "git_blob *"
            },
            {
              "name": "options",
              "type": "git_diff_options *"
            },
            {
              "name": "cb_data",
              "type": "void *"
            },
            {
              "name": "file_cb",
              "type": "git_diff_file_fn",
              "referenceType": "int (*)(void *, git_diff_delta *, float)"
            },
            {
              "name": "hunk_cb",
              "type": "git_diff_hunk_fn",
              "referenceType": "int (*)(void *, git_diff_delta *, git_diff_range *, const char *, size_t)"
            },
            {
              "name": "line_cb",
              "type": "git_diff_data_fn",
              "referenceType": "int (*)(void *, git_diff_delta *, git_diff_range *, char, const char *, size_t)"
            }
          ],
          "comment": [
            "Directly run a text diff on two blobs.",
            "Compared to a file, a blob lacks some contextual information. As such, the\n `git_diff_file` parameters of the callbacks will be filled accordingly to the following:\n `mode` will be set to 0, `path` will be set to NULL. When dealing with a NULL blob, `oid`\n will be set to 0.",
            "When at least one of the blobs being dealt with is binary, the `git_diff_delta` binary\n attribute will be set to 1 and no call to the hunk_cb nor line_cb will be made."
          ],
          "group": "diff"
        }
      },
      "info": {
        "summary": "Git tree and file differencing routines.",
        "details": "Calculating diffs is generally done in two phases: building a diff list\nthen traversing the diff list.  This makes is easier to share logic\nacross the various types of diffs (tree vs tree, workdir vs index, etc.),\nand also allows you to insert optional diff list post-processing phases,\nsuch as rename detected, in between the steps.  When you are done with a\ndiff list object, it must be freed."
      }
    },
    "errors": {
      "apis": {
        "undefined": {
          "kind": "enum",
          "members": [
            {
              "name": "GIT_OK",
              "value": "0"
            },
            {
              "name": "GIT_ERROR",
              "value": "-1"
            },
            {
              "name": "GIT_ENOTFOUND",
              "value": "-3"
            },
            {
              "name": "GIT_EEXISTS",
              "value": "-4"
            },
            {
              "name": "GIT_EAMBIGUOUS",
              "value": "-5"
            },
            {
              "name": "GIT_EBUFS",
              "value": "-6"
            },
            {
              "name": "GIT_PASSTHROUGH",
              "value": "-30"
            },
            {
              "name": "GIT_REVWALKOVER",
              "value": "-31"
            }
          ],
          "comment": [
            "Generic return codes"
          ],
          "location": {
            "file": "errors.h",
            "line": 58,
            "column": 1
          },
          "group": "errors"
        },
        "git_error": {
          "kind": "struct",
          "name": "git_error",
          "referenceName": "git_error",
          "members": [
            {
              "name": "message",
              "type": "char *"
            },
            {
              "name": "klass",
              "type": "int"
            }
          ],
          "location": {
            "file": "errors.h",
            "line": 70,
            "column": 9
          },
          "group": "errors",
          "returnedBy": [
            "giterr_last"
          ]
        },
        "git_error_t": {
          "kind": "enum",
          "name": "git_error_t",
          "referenceName": "git_error_t",
          "members": [
            {
              "name": "GITERR_NOMEMORY"
            },
            {
              "name": "GITERR_OS"
            },
            {
              "name": "GITERR_INVALID"
            },
            {
              "name": "GITERR_REFERENCE"
            },
            {
              "name": "GITERR_ZLIB"
            },
            {
              "name": "GITERR_REPOSITORY"
            },
            {
              "name": "GITERR_CONFIG"
            },
            {
              "name": "GITERR_REGEX"
            },
            {
              "name": "GITERR_ODB"
            },
            {
              "name": "GITERR_INDEX"
            },
            {
              "name": "GITERR_OBJECT"
            },
            {
              "name": "GITERR_NET"
            },
            {
              "name": "GITERR_TAG"
            },
            {
              "name": "GITERR_TREE"
            },
            {
              "name": "GITERR_INDEXER"
            }
          ],
          "location": {
            "file": "errors.h",
            "line": 75,
            "column": 9
          },
          "group": "errors"
        },
        "giterr_last": {
          "kind": "function",
          "name": "giterr_last",
          "location": {
            "file": "errors.h",
            "line": 99,
            "column": 31
          },
          "returns": {
            "type": "const git_error *",
            "comment": "A git_error object."
          },
          "comment": [
            "Return the last `git_error` object that was generated for the\n current thread or NULL if no error has occurred."
          ],
          "group": "errors"
        },
        "giterr_clear": {
          "kind": "function",
          "name": "giterr_clear",
          "location": {
            "file": "errors.h",
            "line": 104,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "comment": [
            "Clear the last library error that occurred for this thread."
          ],
          "group": "errors"
        }
      },
      "info": {
        "summary": "Git error handling routines and variables"
      }
    },
    "index": {
      "apis": {
        "GIT_IDXENTRY_NAMEMASK": {
          "kind": "macro",
          "name": "GIT_IDXENTRY_NAMEMASK",
          "location": {
            "file": "index.h",
            "line": 23,
            "column": 9
          },
          "value": "(0x0fff)",
          "comment": "",
          "group": "index"
        },
        "GIT_IDXENTRY_STAGEMASK": {
          "kind": "macro",
          "name": "GIT_IDXENTRY_STAGEMASK",
          "location": {
            "file": "index.h",
            "line": 24,
            "column": 9
          },
          "value": "(0x3000)",
          "comment": "",
          "group": "index"
        },
        "GIT_IDXENTRY_EXTENDED": {
          "kind": "macro",
          "name": "GIT_IDXENTRY_EXTENDED",
          "location": {
            "file": "index.h",
            "line": 25,
            "column": 9
          },
          "value": "(0x4000)",
          "comment": "",
          "group": "index"
        },
        "GIT_IDXENTRY_VALID": {
          "kind": "macro",
          "name": "GIT_IDXENTRY_VALID",
          "location": {
            "file": "index.h",
            "line": 26,
            "column": 9
          },
          "value": "(0x8000)",
          "comment": "",
          "group": "index"
        },
        "GIT_IDXENTRY_STAGESHIFT": {
          "kind": "macro",
          "name": "GIT_IDXENTRY_STAGESHIFT",
          "location": {
            "file": "index.h",
            "line": 27,
            "column": 9
          },
          "value": "12",
          "comment": "",
          "group": "index"
        },
        "GIT_IDXENTRY_UPDATE": {
          "kind": "macro",
          "name": "GIT_IDXENTRY_UPDATE",
          "location": {
            "file": "index.h",
            "line": 36,
            "column": 9
          },
          "value": "(1 << 0)",
          "comment": "",
          "group": "index"
        },
        "GIT_IDXENTRY_REMOVE": {
          "kind": "macro",
          "name": "GIT_IDXENTRY_REMOVE",
          "location": {
            "file": "index.h",
            "line": 37,
            "column": 9
          },
          "value": "(1 << 1)",
          "comment": "",
          "group": "index"
        },
        "GIT_IDXENTRY_UPTODATE": {
          "kind": "macro",
          "name": "GIT_IDXENTRY_UPTODATE",
          "location": {
            "file": "index.h",
            "line": 38,
            "column": 9
          },
          "value": "(1 << 2)",
          "comment": "",
          "group": "index"
        },
        "GIT_IDXENTRY_ADDED": {
          "kind": "macro",
          "name": "GIT_IDXENTRY_ADDED",
          "location": {
            "file": "index.h",
            "line": 39,
            "column": 9
          },
          "value": "(1 << 3)",
          "comment": "",
          "group": "index"
        },
        "GIT_IDXENTRY_HASHED": {
          "kind": "macro",
          "name": "GIT_IDXENTRY_HASHED",
          "location": {
            "file": "index.h",
            "line": 41,
            "column": 9
          },
          "value": "(1 << 4)",
          "comment": "",
          "group": "index"
        },
        "GIT_IDXENTRY_UNHASHED": {
          "kind": "macro",
          "name": "GIT_IDXENTRY_UNHASHED",
          "location": {
            "file": "index.h",
            "line": 42,
            "column": 9
          },
          "value": "(1 << 5)",
          "comment": "",
          "group": "index"
        },
        "GIT_IDXENTRY_WT_REMOVE": {
          "kind": "macro",
          "name": "GIT_IDXENTRY_WT_REMOVE",
          "location": {
            "file": "index.h",
            "line": 43,
            "column": 9
          },
          "value": "(1 << 6) /* remove in work directory */",
          "comment": "",
          "group": "index"
        },
        "GIT_IDXENTRY_CONFLICTED": {
          "kind": "macro",
          "name": "GIT_IDXENTRY_CONFLICTED",
          "location": {
            "file": "index.h",
            "line": 44,
            "column": 9
          },
          "value": "(1 << 7)",
          "comment": "",
          "group": "index"
        },
        "GIT_IDXENTRY_UNPACKED": {
          "kind": "macro",
          "name": "GIT_IDXENTRY_UNPACKED",
          "location": {
            "file": "index.h",
            "line": 46,
            "column": 9
          },
          "value": "(1 << 8)",
          "comment": "",
          "group": "index"
        },
        "GIT_IDXENTRY_NEW_SKIP_WORKTREE": {
          "kind": "macro",
          "name": "GIT_IDXENTRY_NEW_SKIP_WORKTREE",
          "location": {
            "file": "index.h",
            "line": 47,
            "column": 9
          },
          "value": "(1 << 9)",
          "comment": "",
          "group": "index"
        },
        "GIT_IDXENTRY_INTENT_TO_ADD": {
          "kind": "macro",
          "name": "GIT_IDXENTRY_INTENT_TO_ADD",
          "location": {
            "file": "index.h",
            "line": 52,
            "column": 9
          },
          "value": "(1 << 13)",
          "comment": "",
          "group": "index"
        },
        "GIT_IDXENTRY_SKIP_WORKTREE": {
          "kind": "macro",
          "name": "GIT_IDXENTRY_SKIP_WORKTREE",
          "location": {
            "file": "index.h",
            "line": 53,
            "column": 9
          },
          "value": "(1 << 14)",
          "comment": "",
          "group": "index"
        },
        "GIT_IDXENTRY_EXTENDED2": {
          "kind": "macro",
          "name": "GIT_IDXENTRY_EXTENDED2",
          "location": {
            "file": "index.h",
            "line": 55,
            "column": 9
          },
          "value": "(1 << 15)",
          "comment": "",
          "group": "index"
        },
        "GIT_IDXENTRY_EXTENDED_FLAGS": {
          "kind": "macro",
          "name": "GIT_IDXENTRY_EXTENDED_FLAGS",
          "location": {
            "file": "index.h",
            "line": 57,
            "column": 9
          },
          "value": "(GIT_IDXENTRY_INTENT_TO_ADD | GIT_IDXENTRY_SKIP_WORKTREE)",
          "comment": "",
          "group": "index"
        },
        "git_index_time": {
          "kind": "struct",
          "name": "git_index_time",
          "referenceName": "git_index_time",
          "comment": [
            "Time used in a git index entry"
          ],
          "members": [
            {
              "name": "seconds",
              "type": "git_time_t",
              "referenceType": "int64_t"
            },
            {
              "name": "nanoseconds",
              "type": "unsigned int"
            }
          ],
          "location": {
            "file": "index.h",
            "line": 60,
            "column": 9
          },
          "group": "index"
        },
        "git_index_entry": {
          "kind": "struct",
          "name": "git_index_entry",
          "referenceName": "git_index_entry",
          "comment": [
            "Memory representation of a file entry in the index."
          ],
          "members": [
            {
              "name": "ctime",
              "type": "git_index_time",
              "referenceType": "struct git_index_time"
            },
            {
              "name": "mtime",
              "type": "git_index_time",
              "referenceType": "struct git_index_time"
            },
            {
              "name": "dev",
              "type": "unsigned int"
            },
            {
              "name": "ino",
              "type": "unsigned int"
            },
            {
              "name": "mode",
              "type": "unsigned int"
            },
            {
              "name": "uid",
              "type": "unsigned int"
            },
            {
              "name": "gid",
              "type": "unsigned int"
            },
            {
              "name": "file_size",
              "type": "git_off_t",
              "referenceType": "int64_t"
            },
            {
              "name": "oid",
              "type": "git_oid",
              "referenceType": "struct _git_oid"
            },
            {
              "name": "flags",
              "type": "unsigned short"
            },
            {
              "name": "flags_extended",
              "type": "unsigned short"
            },
            {
              "name": "path",
              "type": "char *"
            }
          ],
          "location": {
            "file": "index.h",
            "line": 67,
            "column": 16
          },
          "group": "index",
          "returnedBy": [
            "git_index_get"
          ],
          "parameterTo": [
            "git_index_add2",
            "git_index_append2",
            "git_index_entry_stage"
          ]
        },
        "git_index_entry_unmerged": {
          "kind": "struct",
          "name": "git_index_entry_unmerged",
          "referenceName": "git_index_entry_unmerged",
          "comment": [
            "Representation of an unmerged file entry in the index."
          ],
          "members": [
            {
              "name": "mode",
              "type": "unsigned int[3]"
            },
            {
              "name": "oid",
              "type": "git_oid[3]"
            },
            {
              "name": "path",
              "type": "char *"
            }
          ],
          "location": {
            "file": "index.h",
            "line": 87,
            "column": 16
          },
          "group": "index",
          "returnedBy": [
            "git_index_get_unmerged_bypath",
            "git_index_get_unmerged_byindex"
          ]
        },
        "git_index_open": {
          "kind": "function",
          "name": "git_index_open",
          "location": {
            "file": "index.h",
            "line": 111,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "index",
              "type": "git_index **",
              "direction": "in",
              "comment": "the pointer for the new index"
            },
            {
              "name": "index_path",
              "type": "const char *",
              "direction": "in",
              "comment": "the path to the index file in disk"
            }
          ],
          "comment": [
            "Create a new bare Git index object as a memory representation\n of the Git index file in 'index_path', without a repository\n to back it.",
            "Since there is no ODB or working directory behind this index,\n any Index methods which rely on these (e.g. index_add) will\n fail with the GIT_EBAREINDEX error code.",
            "If you need to access the index of an actual repository,\n use the `git_repository_index` wrapper.",
            "The index must be freed once it's no longer in use."
          ],
          "group": "index"
        },
        "git_index_clear": {
          "kind": "function",
          "name": "git_index_clear",
          "location": {
            "file": "index.h",
            "line": 120,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "index",
              "type": "git_index *",
              "direction": "in",
              "comment": "an existing index object"
            }
          ],
          "comment": [
            "Clear the contents (all the entries) of an index object.\n This clears the index object in memory; changes must be manually\n written to disk for them to take effect."
          ],
          "group": "index"
        },
        "git_index_free": {
          "kind": "function",
          "name": "git_index_free",
          "location": {
            "file": "index.h",
            "line": 127,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "index",
              "type": "git_index *",
              "direction": "in",
              "comment": "an existing index object"
            }
          ],
          "comment": [
            "Free an existing index object."
          ],
          "group": "index"
        },
        "git_index_read": {
          "kind": "function",
          "name": "git_index_read",
          "location": {
            "file": "index.h",
            "line": 136,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "index",
              "type": "git_index *",
              "direction": "in",
              "comment": "an existing index object"
            }
          ],
          "comment": [
            "Update the contents of an existing index object in memory\n by reading from the hard disk."
          ],
          "group": "index"
        },
        "git_index_write": {
          "kind": "function",
          "name": "git_index_write",
          "location": {
            "file": "index.h",
            "line": 145,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "index",
              "type": "git_index *",
              "direction": "in",
              "comment": "an existing index object"
            }
          ],
          "comment": [
            "Write an existing index object from memory back to disk\n using an atomic file lock."
          ],
          "group": "index"
        },
        "git_index_find": {
          "kind": "function",
          "name": "git_index_find",
          "location": {
            "file": "index.h",
            "line": 155,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "an index >= 0 if found, -1 otherwise"
          },
          "params": [
            {
              "name": "index",
              "type": "git_index *",
              "direction": "in",
              "comment": "an existing index object"
            },
            {
              "name": "path",
              "type": "const char *",
              "direction": "in",
              "comment": "path to search"
            }
          ],
          "comment": [
            "Find the first index of any entries which point to given\n path in the Git index."
          ],
          "group": "index"
        },
        "git_index_uniq": {
          "kind": "function",
          "name": "git_index_uniq",
          "location": {
            "file": "index.h",
            "line": 162,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "index",
              "type": "git_index *",
              "direction": "in",
              "comment": "an existing index object"
            }
          ],
          "comment": [
            "Remove all entries with equal path except last added"
          ],
          "group": "index"
        },
        "git_index_add": {
          "kind": "function",
          "name": "git_index_add",
          "location": {
            "file": "index.h",
            "line": 181,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "index",
              "type": "git_index *",
              "direction": "in",
              "comment": "an existing index object"
            },
            {
              "name": "path",
              "type": "const char *",
              "direction": "in",
              "comment": "filename to add"
            },
            {
              "name": "stage",
              "type": "int",
              "direction": "in",
              "comment": "stage for the entry"
            }
          ],
          "comment": [
            "Add or update an index entry from a file in disk",
            "The file `path` must be relative to the repository's\n working folder and must be readable.",
            "This method will fail in bare index instances.",
            "This forces the file to be added to the index, not looking\n at gitignore rules.  Those rules can be evaluated through\n the git_status APIs (in status.h) before calling this."
          ],
          "group": "index"
        },
        "git_index_add2": {
          "kind": "function",
          "name": "git_index_add2",
          "location": {
            "file": "index.h",
            "line": 193,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "index",
              "type": "git_index *",
              "direction": "in",
              "comment": "an existing index object"
            },
            {
              "name": "source_entry",
              "type": "const git_index_entry *",
              "direction": "in",
              "comment": "new entry object"
            }
          ],
          "comment": [
            "Add or update an index entry from an in-memory struct",
            "A full copy (including the 'path' string) of the given\n 'source_entry' will be inserted on the index."
          ],
          "group": "index"
        },
        "git_index_append": {
          "kind": "function",
          "name": "git_index_append",
          "location": {
            "file": "index.h",
            "line": 212,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "index",
              "type": "git_index *",
              "direction": "in",
              "comment": "an existing index object"
            },
            {
              "name": "path",
              "type": "const char *",
              "direction": "in",
              "comment": "filename to add"
            },
            {
              "name": "stage",
              "type": "int",
              "direction": "in",
              "comment": "stage for the entry"
            }
          ],
          "comment": [
            "Add (append) an index entry from a file in disk",
            "A new entry will always be inserted into the index;\n if the index already contains an entry for such\n path, the old entry will **not** be replaced.",
            "The file `path` must be relative to the repository's\n working folder and must be readable.",
            "This method will fail in bare index instances."
          ],
          "group": "index"
        },
        "git_index_append2": {
          "kind": "function",
          "name": "git_index_append2",
          "location": {
            "file": "index.h",
            "line": 229,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "index",
              "type": "git_index *",
              "direction": "in",
              "comment": "an existing index object"
            },
            {
              "name": "source_entry",
              "type": "const git_index_entry *",
              "direction": "in",
              "comment": "new entry object"
            }
          ],
          "comment": [
            "Add (append) an index entry from an in-memory struct",
            "A new entry will always be inserted into the index;\n if the index already contains an entry for the path\n in the `entry` struct, the old entry will **not** be\n replaced.",
            "A full copy (including the 'path' string) of the given\n 'source_entry' will be inserted on the index."
          ],
          "group": "index"
        },
        "git_index_remove": {
          "kind": "function",
          "name": "git_index_remove",
          "location": {
            "file": "index.h",
            "line": 238,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "index",
              "type": "git_index *",
              "direction": "in",
              "comment": "an existing index object"
            },
            {
              "name": "position",
              "type": "int",
              "direction": "in",
              "comment": "position of the entry to remove"
            }
          ],
          "comment": [
            "Remove an entry from the index"
          ],
          "group": "index"
        },
        "git_index_get": {
          "kind": "function",
          "name": "git_index_get",
          "location": {
            "file": "index.h",
            "line": 253,
            "column": 31
          },
          "returns": {
            "type": "git_index_entry *",
            "comment": "a pointer to the entry; NULL if out of bounds"
          },
          "params": [
            {
              "name": "index",
              "type": "git_index *",
              "direction": "in",
              "comment": "an existing index object"
            },
            {
              "name": "n",
              "type": "unsigned int",
              "direction": "in",
              "comment": "the position of the entry"
            }
          ],
          "comment": [
            "Get a pointer to one of the entries in the index",
            "This entry can be modified, and the changes will be written\n back to disk on the next write() call.",
            "The entry should not be freed by the caller."
          ],
          "group": "index"
        },
        "git_index_entrycount": {
          "kind": "function",
          "name": "git_index_entrycount",
          "location": {
            "file": "index.h",
            "line": 261,
            "column": 26
          },
          "returns": {
            "type": "unsigned int",
            "comment": "integer of count of current entries"
          },
          "params": [
            {
              "name": "index",
              "type": "git_index *",
              "direction": "in",
              "comment": "an existing index object"
            }
          ],
          "comment": [
            "Get the count of entries currently in the index"
          ],
          "group": "index"
        },
        "git_index_entrycount_unmerged": {
          "kind": "function",
          "name": "git_index_entrycount_unmerged",
          "location": {
            "file": "index.h",
            "line": 269,
            "column": 26
          },
          "returns": {
            "type": "unsigned int",
            "comment": "integer of count of current unmerged entries"
          },
          "params": [
            {
              "name": "index",
              "type": "git_index *",
              "direction": "in",
              "comment": "an existing index object"
            }
          ],
          "comment": [
            "Get the count of unmerged entries currently in the index"
          ],
          "group": "index"
        },
        "git_index_get_unmerged_bypath": {
          "kind": "function",
          "name": "git_index_get_unmerged_bypath",
          "location": {
            "file": "index.h",
            "line": 281,
            "column": 46
          },
          "returns": {
            "type": "const git_index_entry_unmerged *",
            "comment": "the unmerged entry; NULL if not found"
          },
          "params": [
            {
              "name": "index",
              "type": "git_index *",
              "direction": "in",
              "comment": "an existing index object"
            },
            {
              "name": "path",
              "type": "const char *",
              "direction": "in",
              "comment": "path to search"
            }
          ],
          "comment": [
            "Get an unmerged entry from the index.",
            "The returned entry is read-only and should not be modified\n of freed by the caller."
          ],
          "group": "index"
        },
        "git_index_get_unmerged_byindex": {
          "kind": "function",
          "name": "git_index_get_unmerged_byindex",
          "location": {
            "file": "index.h",
            "line": 293,
            "column": 46
          },
          "returns": {
            "type": "const git_index_entry_unmerged *",
            "comment": "a pointer to the unmerged entry; NULL if out of bounds"
          },
          "params": [
            {
              "name": "index",
              "type": "git_index *",
              "direction": "in",
              "comment": "an existing index object"
            },
            {
              "name": "n",
              "type": "unsigned int",
              "direction": "in",
              "comment": "the position of the entry"
            }
          ],
          "comment": [
            "Get an unmerged entry from the index.",
            "The returned entry is read-only and should not be modified\n of freed by the caller."
          ],
          "group": "index"
        },
        "git_index_entry_stage": {
          "kind": "function",
          "name": "git_index_entry_stage",
          "location": {
            "file": "index.h",
            "line": 306,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "the stage number"
          },
          "params": [
            {
              "name": "entry",
              "type": "const git_index_entry *",
              "direction": "in",
              "comment": "The entry"
            }
          ],
          "comment": [
            "Return the stage number from a git index entry",
            "This entry is calculated from the entrie's flag\n attribute like this:",
            "(entry->flags \n&\n GIT_IDXENTRY_STAGEMASK) >> GIT_IDXENTRY_STAGESHIFT"
          ],
          "group": "index"
        },
        "git_index_read_tree": {
          "kind": "function",
          "name": "git_index_read_tree",
          "location": {
            "file": "index.h",
            "line": 317,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "index",
              "type": "git_index *",
              "direction": "in",
              "comment": "an existing index object"
            },
            {
              "name": "tree",
              "type": "git_tree *",
              "direction": "in",
              "comment": "tree to read"
            }
          ],
          "comment": [
            "Read a tree into the index file",
            "The current index contents will be replaced by the specified tree."
          ],
          "group": "index"
        },
        "git_index": {
          "kind": "struct",
          "name": "git_index",
          "referenceName": "struct git_index",
          "opaque": true,
          "comment": [
            "Memory representation of an index file."
          ],
          "location": {
            "file": "types.h",
            "line": 120,
            "column": 26
          },
          "group": "index",
          "parameterTo": [
            "git_index_open",
            "git_index_clear",
            "git_index_free",
            "git_index_read",
            "git_index_write",
            "git_index_find",
            "git_index_uniq",
            "git_index_add",
            "git_index_add2",
            "git_index_append",
            "git_index_append2",
            "git_index_remove",
            "git_index_get",
            "git_index_entrycount",
            "git_index_entrycount_unmerged",
            "git_index_get_unmerged_bypath",
            "git_index_get_unmerged_byindex",
            "git_index_read_tree",
            "git_repository_index",
            "git_repository_set_index",
            "git_tree_create_fromindex"
          ]
        }
      },
      "info": {
        "summary": "Git index parsing and manipulation routines"
      }
    },
    "indexer": {
      "apis": {
        "git_indexer_stats": {
          "kind": "struct",
          "name": "git_indexer_stats",
          "referenceName": "git_indexer_stats",
          "comment": [
            "This is passed as the first argument to the callback to allow the\n user to see the progress."
          ],
          "members": [
            {
              "name": "total",
              "type": "unsigned int"
            },
            {
              "name": "processed",
              "type": "unsigned int"
            }
          ],
          "location": {
            "file": "indexer.h",
            "line": 19,
            "column": 16
          },
          "group": "indexer",
          "parameterTo": [
            "git_indexer_stream_add",
            "git_indexer_stream_finalize",
            "git_indexer_run",
            "git_remote_download"
          ]
        },
        "git_indexer": {
          "kind": "struct",
          "name": "git_indexer",
          "referenceName": "struct git_indexer",
          "opaque": true,
          "location": {
            "file": "indexer.h",
            "line": 25,
            "column": 28
          },
          "group": "indexer",
          "parameterTo": [
            "git_indexer_new",
            "git_indexer_run",
            "git_indexer_write",
            "git_indexer_hash",
            "git_indexer_free"
          ]
        },
        "git_indexer_stream": {
          "kind": "struct",
          "name": "git_indexer_stream",
          "referenceName": "struct git_indexer_stream",
          "opaque": true,
          "location": {
            "file": "indexer.h",
            "line": 26,
            "column": 35
          },
          "group": "indexer",
          "parameterTo": [
            "git_indexer_stream_new",
            "git_indexer_stream_add",
            "git_indexer_stream_finalize",
            "git_indexer_stream_hash",
            "git_indexer_stream_free"
          ]
        },
        "git_indexer_stream_new": {
          "kind": "function",
          "name": "git_indexer_stream_new",
          "location": {
            "file": "indexer.h",
            "line": 34,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "out",
              "type": "git_indexer_stream **",
              "direction": "in",
              "comment": "where to store the inexer instance"
            },
            {
              "name": "gitdir",
              "type": "const char *"
            }
          ],
          "comment": [
            "Create a new streaming indexer instance"
          ],
          "group": "indexer"
        },
        "git_indexer_stream_add": {
          "kind": "function",
          "name": "git_indexer_stream_add",
          "location": {
            "file": "indexer.h",
            "line": 44,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "idx",
              "type": "git_indexer_stream *",
              "direction": "in",
              "comment": "the indexer"
            },
            {
              "name": "data",
              "type": "const void *",
              "direction": "in",
              "comment": "the data to add"
            },
            {
              "name": "size",
              "type": "size_t",
              "direction": "in",
              "comment": "the size of the data"
            },
            {
              "name": "stats",
              "type": "git_indexer_stats *",
              "direction": "in",
              "comment": "stat storage"
            }
          ],
          "comment": [
            "Add data to the indexer"
          ],
          "group": "indexer"
        },
        "git_indexer_stream_finalize": {
          "kind": "function",
          "name": "git_indexer_stream_finalize",
          "location": {
            "file": "indexer.h",
            "line": 53,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "idx",
              "type": "git_indexer_stream *",
              "direction": "in",
              "comment": "the indexer"
            },
            {
              "name": "stats",
              "type": "git_indexer_stats *"
            }
          ],
          "comment": [
            "Finalize the pack and index",
            "Resolve any pending deltas and write out the index file"
          ],
          "group": "indexer"
        },
        "git_indexer_stream_hash": {
          "kind": "function",
          "name": "git_indexer_stream_hash",
          "location": {
            "file": "indexer.h",
            "line": 63,
            "column": 29
          },
          "returns": {
            "type": "const git_oid *"
          },
          "params": [
            {
              "name": "idx",
              "type": "git_indexer_stream *",
              "direction": "in",
              "comment": "the indexer instance"
            }
          ],
          "comment": [
            "Get the packfile's hash",
            "A packfile's name is derived from the sorted hashing of all object\n names. This is only correct after the index has been finalized."
          ],
          "group": "indexer"
        },
        "git_indexer_stream_free": {
          "kind": "function",
          "name": "git_indexer_stream_free",
          "location": {
            "file": "indexer.h",
            "line": 70,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "idx",
              "type": "git_indexer_stream *",
              "direction": "in",
              "comment": "the indexer to free"
            }
          ],
          "comment": [
            "Free the indexer and its resources"
          ],
          "group": "indexer"
        },
        "git_indexer_new": {
          "kind": "function",
          "name": "git_indexer_new",
          "location": {
            "file": "indexer.h",
            "line": 78,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "out",
              "type": "git_indexer **",
              "direction": "in",
              "comment": "where to store the indexer instance"
            },
            {
              "name": "packname",
              "type": "const char *",
              "direction": "in",
              "comment": "the absolute filename of the packfile to index"
            }
          ],
          "comment": [
            "Create a new indexer instance"
          ],
          "group": "indexer"
        },
        "git_indexer_run": {
          "kind": "function",
          "name": "git_indexer_run",
          "location": {
            "file": "indexer.h",
            "line": 90,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "idx",
              "type": "git_indexer *",
              "direction": "in",
              "comment": "the indexer instance"
            },
            {
              "name": "stats",
              "type": "git_indexer_stats *",
              "direction": "in",
              "comment": "storage for the running state"
            }
          ],
          "comment": [
            "Iterate over the objects in the packfile and extract the information",
            "Indexing a packfile can be very expensive so this function is\n expected to be run in a worker thread and the stats used to provide\n feedback the user."
          ],
          "group": "indexer"
        },
        "git_indexer_write": {
          "kind": "function",
          "name": "git_indexer_write",
          "location": {
            "file": "indexer.h",
            "line": 100,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "idx",
              "type": "git_indexer *",
              "direction": "in",
              "comment": "the indexer instance"
            }
          ],
          "comment": [
            "Write the index file to disk.",
            "The file will be stored as pack-$hash.idx in the same directory as\n the packfile."
          ],
          "group": "indexer"
        },
        "git_indexer_hash": {
          "kind": "function",
          "name": "git_indexer_hash",
          "location": {
            "file": "indexer.h",
            "line": 110,
            "column": 29
          },
          "returns": {
            "type": "const git_oid *"
          },
          "params": [
            {
              "name": "idx",
              "type": "git_indexer *",
              "direction": "in",
              "comment": "the indexer instance"
            }
          ],
          "comment": [
            "Get the packfile's hash",
            "A packfile's name is derived from the sorted hashing of all object\n names. This is only correct after the index has been written to disk."
          ],
          "group": "indexer"
        },
        "git_indexer_free": {
          "kind": "function",
          "name": "git_indexer_free",
          "location": {
            "file": "indexer.h",
            "line": 117,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "idx",
              "type": "git_indexer *",
              "direction": "in",
              "comment": "the indexer to free"
            }
          ],
          "comment": [
            "Free the indexer and its resources"
          ],
          "group": "indexer"
        }
      },
      "info": {}
    },
    "merge": {
      "apis": {
        "git_merge_base": {
          "kind": "function",
          "name": "git_merge_base",
          "location": {
            "file": "merge.h",
            "line": 31,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "out",
              "type": "git_oid *",
              "direction": "in",
              "comment": "the OID of a merge base between 'one' and 'two'"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repository where the commits exist"
            },
            {
              "name": "one",
              "type": "git_oid *",
              "direction": "in",
              "comment": "one of the commits"
            },
            {
              "name": "two",
              "type": "git_oid *",
              "direction": "in",
              "comment": "the other commit"
            }
          ],
          "comment": [
            "Find a merge base between two commits"
          ],
          "group": "merge"
        }
      },
      "info": {
        "summary": "Git merge-base routines"
      }
    },
    "net": {
      "apis": {
        "GIT_DEFAULT_PORT": {
          "kind": "macro",
          "name": "GIT_DEFAULT_PORT",
          "location": {
            "file": "net.h",
            "line": 22,
            "column": 9
          },
          "value": "\"9418\"",
          "comment": "",
          "group": "net"
        },
        "GIT_DIR_FETCH": {
          "kind": "macro",
          "name": "GIT_DIR_FETCH",
          "location": {
            "file": "net.h",
            "line": 30,
            "column": 9
          },
          "value": "0",
          "comment": "",
          "group": "net"
        },
        "GIT_DIR_PUSH": {
          "kind": "macro",
          "name": "GIT_DIR_PUSH",
          "location": {
            "file": "net.h",
            "line": 31,
            "column": 9
          },
          "value": "1",
          "comment": "",
          "group": "net"
        },
        "git_remote_head": {
          "kind": "struct",
          "name": "git_remote_head",
          "referenceName": "struct git_remote_head",
          "comment": [
            "Remote head description, given out on `ls` calls."
          ],
          "members": [
            {
              "name": "local",
              "type": "int"
            },
            {
              "name": "oid",
              "type": "git_oid",
              "referenceType": "struct _git_oid"
            },
            {
              "name": "loid",
              "type": "git_oid",
              "referenceType": "struct _git_oid"
            },
            {
              "name": "name",
              "type": "char *"
            }
          ],
          "location": {
            "file": "net.h",
            "line": 37,
            "column": 8
          },
          "group": "net",
          "parameterTo": [
            "git_headlist_cb"
          ]
        },
        "git_headlist_cb": {
          "kind": "callback",
          "name": "git_headlist_cb",
          "type": "int (*)(git_remote_head *, void *)",
          "comment": [
            "Callback for listing the remote heads"
          ],
          "location": {
            "file": "net.h",
            "line": 47,
            "column": 15
          },
          "params": [
            {
              "type": "git_remote_head *"
            },
            {
              "type": "void *"
            }
          ],
          "group": "net",
          "parameterTo": [
            "git_remote_ls"
          ],
          "typedef": true
        }
      },
      "info": {
        "summary": "Git networking declarations"
      }
    },
    "notes": {
      "apis": {
        "git_note_read": {
          "kind": "function",
          "name": "git_note_read",
          "location": {
            "file": "notes.h",
            "line": 33,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "note",
              "type": "git_note **",
              "direction": "in",
              "comment": "the note; NULL in case of error"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the Git repository"
            },
            {
              "name": "notes_ref",
              "type": "const char *",
              "direction": "in",
              "comment": "OID reference to use (optional); defaults to \"refs/notes/commits\""
            },
            {
              "name": "oid",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "OID of the object"
            }
          ],
          "comment": [
            "Read the note for an object",
            "The note must be freed manually by the user."
          ],
          "group": "notes"
        },
        "git_note_message": {
          "kind": "function",
          "name": "git_note_message",
          "location": {
            "file": "notes.h",
            "line": 42,
            "column": 26
          },
          "returns": {
            "type": "const char *",
            "comment": "the note message"
          },
          "params": [
            {
              "name": "note",
              "type": "git_note *",
              "direction": "in",
              "comment": ""
            }
          ],
          "comment": [
            "Get the note message"
          ],
          "group": "notes"
        },
        "git_note_oid": {
          "kind": "function",
          "name": "git_note_oid",
          "location": {
            "file": "notes.h",
            "line": 51,
            "column": 29
          },
          "returns": {
            "type": "const git_oid *",
            "comment": "the note object OID"
          },
          "params": [
            {
              "name": "note",
              "type": "git_note *",
              "direction": "in",
              "comment": ""
            }
          ],
          "comment": [
            "Get the note object OID"
          ],
          "group": "notes"
        },
        "git_note_create": {
          "kind": "function",
          "name": "git_note_create",
          "location": {
            "file": "notes.h",
            "line": 67,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_oid *"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the Git repository"
            },
            {
              "name": "author",
              "type": "git_signature *",
              "direction": "in",
              "comment": "signature of the notes commit author"
            },
            {
              "name": "committer",
              "type": "git_signature *",
              "direction": "in",
              "comment": "signature of the notes commit committer"
            },
            {
              "name": "notes_ref",
              "type": "const char *",
              "direction": "in",
              "comment": "OID reference to update (optional); defaults to \"refs/notes/commits\""
            },
            {
              "name": "oid",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "pointer to store the OID (optional); NULL in case of error"
            },
            {
              "name": "note",
              "type": "const char *"
            }
          ],
          "comment": [
            "Add a note for an object"
          ],
          "group": "notes"
        },
        "git_note_remove": {
          "kind": "function",
          "name": "git_note_remove",
          "location": {
            "file": "notes.h",
            "line": 84,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the Git repository"
            },
            {
              "name": "notes_ref",
              "type": "const char *",
              "direction": "in",
              "comment": "OID reference to use (optional); defaults to \"refs/notes/commits\""
            },
            {
              "name": "author",
              "type": "git_signature *",
              "direction": "in",
              "comment": "signature of the notes commit author"
            },
            {
              "name": "committer",
              "type": "git_signature *",
              "direction": "in",
              "comment": "signature of the notes commit committer"
            },
            {
              "name": "oid",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "the oid which note's to be removed"
            }
          ],
          "comment": [
            "Remove the note for an object"
          ],
          "group": "notes"
        },
        "git_note_free": {
          "kind": "function",
          "name": "git_note_free",
          "location": {
            "file": "notes.h",
            "line": 93,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "note",
              "type": "git_note *",
              "direction": "in",
              "comment": "git_note object"
            }
          ],
          "comment": [
            "Free a git_note object"
          ],
          "group": "notes"
        },
        "git_note_default_ref": {
          "kind": "function",
          "name": "git_note_default_ref",
          "location": {
            "file": "notes.h",
            "line": 103,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "const char **",
              "direction": "in",
              "comment": "Pointer to the default notes reference"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "The Git repository"
            }
          ],
          "comment": [
            "Get the default notes reference for a repository"
          ],
          "group": "notes"
        },
        "git_note_data": {
          "kind": "struct",
          "name": "git_note_data",
          "referenceName": "git_note_data",
          "comment": [
            "Basic components of a note",
            "- Oid of the blob containing the message\n  - Oid of the git object being annotated"
          ],
          "members": [
            {
              "name": "blob_oid",
              "type": "git_oid",
              "referenceType": "struct _git_oid"
            },
            {
              "name": "annotated_object_oid",
              "type": "git_oid",
              "referenceType": "struct _git_oid"
            }
          ],
          "location": {
            "file": "notes.h",
            "line": 111,
            "column": 9
          },
          "group": "notes"
        },
        "git_note_foreach": {
          "kind": "function",
          "name": "git_note_foreach",
          "location": {
            "file": "notes.h",
            "line": 130,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code."
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "Repository where to find the notes."
            },
            {
              "name": "notes_ref",
              "type": "const char *",
              "direction": "in",
              "comment": "OID reference to read from (optional); defaults to \"refs/notes/commits\"."
            },
            {
              "name": "note_cb",
              "type": "int (*)(git_note_data *, void *)",
              "direction": "in",
              "comment": "Callback to invoke per found annotation."
            },
            {
              "name": "payload",
              "type": "void *",
              "direction": "in",
              "comment": "Extra parameter to callback function."
            }
          ],
          "comment": [
            "Loop over all the notes within a specified namespace\n and issue a callback for each one."
          ],
          "group": "notes"
        },
        "git_note": {
          "kind": "struct",
          "name": "git_note",
          "referenceName": "struct git_note",
          "opaque": true,
          "comment": [
            "Representation of a git note"
          ],
          "location": {
            "file": "types.h",
            "line": 135,
            "column": 25
          },
          "group": "notes",
          "parameterTo": [
            "git_note_read",
            "git_note_message",
            "git_note_oid",
            "git_note_free"
          ]
        }
      },
      "info": {
        "summary": "Git notes management routines"
      }
    },
    "object": {
      "apis": {
        "git_object_lookup": {
          "kind": "function",
          "name": "git_object_lookup",
          "location": {
            "file": "object.h",
            "line": 41,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "a reference to the object"
          },
          "params": [
            {
              "name": "object",
              "type": "git_object **",
              "direction": "in",
              "comment": "pointer to the looked-up object"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repository to look up the object"
            },
            {
              "name": "id",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "the unique identifier for the object"
            },
            {
              "name": "type",
              "type": "git_otype",
              "direction": "in",
              "comment": "the type of the object",
              "referenceType": "enum git_otype"
            }
          ],
          "comment": [
            "Lookup a reference to one of the objects in a repostory.",
            "The generated reference is owned by the repository and\n should be closed with the `git_object_free` method\n instead of free'd manually.",
            "The 'type' parameter must match the type of the object\n in the odb; the method will fail otherwise.\n The special value 'GIT_OBJ_ANY' may be passed to let\n the method guess the object's type."
          ],
          "group": "object"
        },
        "git_object_lookup_prefix": {
          "kind": "function",
          "name": "git_object_lookup_prefix",
          "location": {
            "file": "object.h",
            "line": 74,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "object_out",
              "type": "git_object **",
              "direction": "in",
              "comment": "pointer where to store the looked-up object"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repository to look up the object"
            },
            {
              "name": "id",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "a short identifier for the object"
            },
            {
              "name": "len",
              "type": "unsigned int",
              "direction": "in",
              "comment": "the length of the short identifier"
            },
            {
              "name": "type",
              "type": "git_otype",
              "direction": "in",
              "comment": "the type of the object",
              "referenceType": "enum git_otype"
            }
          ],
          "comment": [
            "Lookup a reference to one of the objects in a repostory,\n given a prefix of its identifier (short id).",
            "The object obtained will be so that its identifier\n matches the first 'len' hexadecimal characters\n (packets of 4 bits) of the given 'id'.\n 'len' must be at least GIT_OID_MINPREFIXLEN, and\n long enough to identify a unique object matching\n the prefix; otherwise the method will fail.",
            "The generated reference is owned by the repository and\n should be closed with the `git_object_free` method\n instead of free'd manually.",
            "The 'type' parameter must match the type of the object\n in the odb; the method will fail otherwise.\n The special value 'GIT_OBJ_ANY' may be passed to let\n the method guess the object's type."
          ],
          "group": "object"
        },
        "git_object_id": {
          "kind": "function",
          "name": "git_object_id",
          "location": {
            "file": "object.h",
            "line": 87,
            "column": 29
          },
          "returns": {
            "type": "const git_oid *",
            "comment": "the SHA1 id"
          },
          "params": [
            {
              "name": "obj",
              "type": "const git_object *",
              "direction": "in",
              "comment": "the repository object"
            }
          ],
          "comment": [
            "Get the id (SHA1) of a repository object"
          ],
          "group": "object"
        },
        "git_object_type": {
          "kind": "function",
          "name": "git_object_type",
          "location": {
            "file": "object.h",
            "line": 95,
            "column": 23
          },
          "returns": {
            "type": "git_otype",
            "comment": "the object's type"
          },
          "params": [
            {
              "name": "obj",
              "type": "const git_object *",
              "direction": "in",
              "comment": "the repository object"
            }
          ],
          "comment": [
            "Get the object type of an object"
          ],
          "group": "object"
        },
        "git_object_owner": {
          "kind": "function",
          "name": "git_object_owner",
          "location": {
            "file": "object.h",
            "line": 109,
            "column": 30
          },
          "returns": {
            "type": "git_repository *",
            "comment": "the repository who owns this object"
          },
          "params": [
            {
              "name": "obj",
              "type": "const git_object *",
              "direction": "in",
              "comment": "the object"
            }
          ],
          "comment": [
            "Get the repository that owns this object",
            "Freeing or calling `git_repository_close` on the\n returned pointer will invalidate the actual object.",
            "Any other operation may be run on the repository without\n affecting the object."
          ],
          "group": "object"
        },
        "git_object_free": {
          "kind": "function",
          "name": "git_object_free",
          "location": {
            "file": "object.h",
            "line": 126,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "object",
              "type": "git_object *",
              "direction": "in",
              "comment": "the object to close"
            }
          ],
          "comment": [
            "Close an open object",
            "This method instructs the library to close an existing\n object; note that git_objects are owned and cached by the repository\n so the object may or may not be freed after this library call,\n depending on how agressive is the caching mechanism used\n by the repository.",
            "IMPORTANT:\n It *is* necessary to call this method when you stop using\n an object. Failure to do so will cause a memory leak."
          ],
          "group": "object"
        },
        "git_object_type2string": {
          "kind": "function",
          "name": "git_object_type2string",
          "location": {
            "file": "object.h",
            "line": 137,
            "column": 26
          },
          "returns": {
            "type": "const char *",
            "comment": "the corresponding string representation."
          },
          "params": [
            {
              "name": "type",
              "type": "git_otype",
              "direction": "in",
              "comment": "object type to convert.",
              "referenceType": "enum git_otype"
            }
          ],
          "comment": [
            "Convert an object type to it's string representation.",
            "The result is a pointer to a string in static memory and\n should not be free()'ed."
          ],
          "group": "object"
        },
        "git_object_string2type": {
          "kind": "function",
          "name": "git_object_string2type",
          "location": {
            "file": "object.h",
            "line": 145,
            "column": 23
          },
          "returns": {
            "type": "git_otype",
            "comment": "the corresponding git_otype."
          },
          "params": [
            {
              "name": "str",
              "type": "const char *",
              "direction": "in",
              "comment": "the string to convert."
            }
          ],
          "comment": [
            "Convert a string object type representation to it's git_otype."
          ],
          "group": "object"
        },
        "git_object_typeisloose": {
          "kind": "function",
          "name": "git_object_typeisloose",
          "location": {
            "file": "object.h",
            "line": 154,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "true if the type represents a valid loose object type,\n false otherwise."
          },
          "params": [
            {
              "name": "type",
              "type": "git_otype",
              "direction": "in",
              "comment": "object type to test.",
              "referenceType": "enum git_otype"
            }
          ],
          "comment": [
            "Determine if the given git_otype is a valid loose object type."
          ],
          "group": "object"
        },
        "git_object__size": {
          "kind": "function",
          "name": "git_object__size",
          "location": {
            "file": "object.h",
            "line": 168,
            "column": 20
          },
          "returns": {
            "type": "size_t",
            "comment": "size in bytes of the object"
          },
          "params": [
            {
              "name": "type",
              "type": "git_otype",
              "direction": "in",
              "comment": "object type to get its size",
              "referenceType": "enum git_otype"
            }
          ],
          "comment": [
            "Get the size in bytes for the structure which\n acts as an in-memory representation of any given\n object type.",
            "For all the core types, this would the equivalent\n of calling `sizeof(git_commit)` if the core types\n were not opaque on the external API."
          ],
          "group": "object"
        },
        "git_object": {
          "kind": "struct",
          "name": "git_object",
          "referenceName": "struct git_object",
          "opaque": true,
          "comment": [
            "Representation of a generic object in a repository"
          ],
          "location": {
            "file": "types.h",
            "line": 96,
            "column": 27
          },
          "group": "object",
          "parameterTo": [
            "git_branch_create",
            "git_object_lookup",
            "git_object_lookup_prefix",
            "git_object_id",
            "git_object_type",
            "git_object_owner",
            "git_object_free",
            "git_tag_target",
            "git_tag_create",
            "git_tag_create_lightweight",
            "git_tag_peel",
            "git_tree_entry_to_object"
          ]
        }
      },
      "info": {
        "summary": "Git revision object management routines"
      }
    },
    "odb": {
      "apis": {
        "git_odb_new": {
          "kind": "function",
          "name": "git_odb_new",
          "location": {
            "file": "odb.h",
            "line": 34,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_odb **",
              "direction": "in",
              "comment": "location to store the database pointer, if opened.\n\t\t\tSet to NULL if the open failed."
            }
          ],
          "comment": [
            "Create a new object database with no backends.",
            "Before the ODB can be used for read/writing, a custom database\n backend must be manually added using `git_odb_add_backend()`"
          ],
          "group": "odb"
        },
        "git_odb_open": {
          "kind": "function",
          "name": "git_odb_open",
          "location": {
            "file": "odb.h",
            "line": 52,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_odb **",
              "direction": "in",
              "comment": "location to store the database pointer, if opened.\n\t\t\tSet to NULL if the open failed."
            },
            {
              "name": "objects_dir",
              "type": "const char *",
              "direction": "in",
              "comment": "path of the backends' \"objects\" directory."
            }
          ],
          "comment": [
            "Create a new object database and automatically add\n the two default backends:",
            "- git_odb_backend_loose: read and write loose object files\n\t\tfrom disk, assuming `objects_dir` as the Objects folder",
            "- git_odb_backend_pack: read objects from packfiles,\n\t\tassuming `objects_dir` as the Objects folder which\n\t\tcontains a 'pack/' folder with the corresponding data"
          ],
          "group": "odb"
        },
        "git_odb_add_backend": {
          "kind": "function",
          "name": "git_odb_add_backend",
          "location": {
            "file": "odb.h",
            "line": 67,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on sucess; error code otherwise"
          },
          "params": [
            {
              "name": "odb",
              "type": "git_odb *",
              "direction": "in",
              "comment": "database to add the backend to"
            },
            {
              "name": "backend",
              "type": "git_odb_backend *",
              "direction": "in",
              "comment": "pointer to a git_odb_backend instance"
            },
            {
              "name": "priority",
              "type": "int",
              "direction": "in",
              "comment": "Value for ordering the backends queue"
            }
          ],
          "comment": [
            "Add a custom backend to an existing Object DB",
            "The backends are checked in relative ordering, based on the\n value of the `priority` parameter.",
            "Read \n<odb\n_backends.h> for more information."
          ],
          "group": "odb"
        },
        "git_odb_add_alternate": {
          "kind": "function",
          "name": "git_odb_add_alternate",
          "location": {
            "file": "odb.h",
            "line": 88,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on sucess; error code otherwise"
          },
          "params": [
            {
              "name": "odb",
              "type": "git_odb *",
              "direction": "in",
              "comment": "database to add the backend to"
            },
            {
              "name": "backend",
              "type": "git_odb_backend *",
              "direction": "in",
              "comment": "pointer to a git_odb_backend instance"
            },
            {
              "name": "priority",
              "type": "int",
              "direction": "in",
              "comment": "Value for ordering the backends queue"
            }
          ],
          "comment": [
            "Add a custom backend to an existing Object DB; this\n backend will work as an alternate.",
            "Alternate backends are always checked for objects *after*\n all the main backends have been exhausted.",
            "The backends are checked in relative ordering, based on the\n value of the `priority` parameter.",
            "Writing is disabled on alternate backends.",
            "Read \n<odb\n_backends.h> for more information."
          ],
          "group": "odb"
        },
        "git_odb_free": {
          "kind": "function",
          "name": "git_odb_free",
          "location": {
            "file": "odb.h",
            "line": 95,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "db",
              "type": "git_odb *",
              "direction": "in",
              "comment": "database pointer to close. If NULL no action is taken."
            }
          ],
          "comment": [
            "Close an open object database."
          ],
          "group": "odb"
        },
        "git_odb_read": {
          "kind": "function",
          "name": "git_odb_read",
          "location": {
            "file": "odb.h",
            "line": 114,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "- 0 if the object was read;\n - GIT_ENOTFOUND if the object is not in the database."
          },
          "params": [
            {
              "name": "out",
              "type": "git_odb_object **",
              "direction": "in",
              "comment": "pointer where to store the read object"
            },
            {
              "name": "db",
              "type": "git_odb *",
              "direction": "in",
              "comment": "database to search for the object in."
            },
            {
              "name": "id",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "identity of the object to read."
            }
          ],
          "comment": [
            "Read an object from the database.",
            "This method queries all available ODB backends\n trying to read the given OID.",
            "The returned object is reference counted and\n internally cached, so it should be closed\n by the user once it's no longer in use."
          ],
          "group": "odb"
        },
        "git_odb_read_prefix": {
          "kind": "function",
          "name": "git_odb_read_prefix",
          "location": {
            "file": "odb.h",
            "line": 142,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 if the object was read;\n\tGIT_ENOTFOUND if the object is not in the database.\n\tGIT_EAMBIGUOUS if the prefix is ambiguous (several objects match the prefix)"
          },
          "params": [
            {
              "name": "out",
              "type": "git_odb_object **",
              "direction": "in",
              "comment": "pointer where to store the read object"
            },
            {
              "name": "db",
              "type": "git_odb *",
              "direction": "in",
              "comment": "database to search for the object in."
            },
            {
              "name": "short_id",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "a prefix of the id of the object to read."
            },
            {
              "name": "len",
              "type": "unsigned int",
              "direction": "in",
              "comment": "the length of the prefix"
            }
          ],
          "comment": [
            "Read an object from the database, given a prefix\n of its identifier.",
            "This method queries all available ODB backends\n trying to match the 'len' first hexadecimal\n characters of the 'short_id'.\n The remaining (GIT_OID_HEXSZ-len)*4 bits of\n 'short_id' must be 0s.\n 'len' must be at least GIT_OID_MINPREFIXLEN,\n and the prefix must be long enough to identify\n a unique object in all the backends; the\n method will fail otherwise.",
            "The returned object is reference counted and\n internally cached, so it should be closed\n by the user once it's no longer in use."
          ],
          "group": "odb"
        },
        "git_odb_read_header": {
          "kind": "function",
          "name": "git_odb_read_header",
          "location": {
            "file": "odb.h",
            "line": 162,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "- 0 if the object was read;\n - GIT_ENOTFOUND if the object is not in the database."
          },
          "params": [
            {
              "name": "len_p",
              "type": "size_t *",
              "direction": "in",
              "comment": "pointer where to store the length"
            },
            {
              "name": "type_p",
              "type": "git_otype *",
              "direction": "in",
              "comment": "pointer where to store the type"
            },
            {
              "name": "db",
              "type": "git_odb *",
              "direction": "in",
              "comment": "database to search for the object in."
            },
            {
              "name": "id",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "identity of the object to read."
            }
          ],
          "comment": [
            "Read the header of an object from the database, without\n reading its full contents.",
            "The header includes the length and the type of an object.",
            "Note that most backends do not support reading only the header\n of an object, so the whole object will be read and then the\n header will be returned."
          ],
          "group": "odb"
        },
        "git_odb_exists": {
          "kind": "function",
          "name": "git_odb_exists",
          "location": {
            "file": "odb.h",
            "line": 173,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "- 1, if the object was found\n - 0, otherwise"
          },
          "params": [
            {
              "name": "db",
              "type": "git_odb *",
              "direction": "in",
              "comment": "database to be searched for the given object."
            },
            {
              "name": "id",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "the object to search for."
            }
          ],
          "comment": [
            "Determine if the given object can be found in the object database."
          ],
          "group": "odb"
        },
        "git_odb_write": {
          "kind": "function",
          "name": "git_odb_write",
          "location": {
            "file": "odb.h",
            "line": 193,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "oid",
              "type": "git_oid *",
              "direction": "in",
              "comment": "pointer to store the OID result of the write"
            },
            {
              "name": "odb",
              "type": "git_odb *",
              "direction": "in",
              "comment": "object database where to store the object"
            },
            {
              "name": "data",
              "type": "const void *",
              "direction": "in",
              "comment": "buffer with the data to storr"
            },
            {
              "name": "len",
              "type": "size_t",
              "direction": "in",
              "comment": "size of the buffer"
            },
            {
              "name": "type",
              "type": "git_otype",
              "direction": "in",
              "comment": "type of the data to store",
              "referenceType": "enum git_otype"
            }
          ],
          "comment": [
            "Write an object directly into the ODB",
            "This method writes a full object straight into the ODB.\n For most cases, it is preferred to write objects through a write\n stream, which is both faster and less memory intensive, specially\n for big objects.",
            "This method is provided for compatibility with custom backends\n which are not able to support streaming writes"
          ],
          "group": "odb"
        },
        "git_odb_open_wstream": {
          "kind": "function",
          "name": "git_odb_open_wstream",
          "location": {
            "file": "odb.h",
            "line": 222,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 if the stream was created; error code otherwise"
          },
          "params": [
            {
              "name": "stream",
              "type": "git_odb_stream **",
              "direction": "in",
              "comment": "pointer where to store the stream"
            },
            {
              "name": "db",
              "type": "git_odb *",
              "direction": "in",
              "comment": "object database where the stream will write"
            },
            {
              "name": "size",
              "type": "size_t",
              "direction": "in",
              "comment": "final size of the object that will be written"
            },
            {
              "name": "type",
              "type": "git_otype",
              "direction": "in",
              "comment": "type of the object that will be written",
              "referenceType": "enum git_otype"
            }
          ],
          "comment": [
            "Open a stream to write an object into the ODB",
            "The type and final length of the object must be specified\n when opening the stream.",
            "The returned stream will be of type `GIT_STREAM_WRONLY` and\n will have the following methods:",
            "- stream->write: write `n` bytes into the stream\n\t\t- stream->finalize_write: close the stream and store the object in\n\t\t\tthe odb\n\t\t- stream->free: free the stream",
            "The streaming write won't be effective until `stream->finalize_write`\n is called and returns without an error",
            "The stream must always be free'd or will leak memory."
          ],
          "see": [
            "git_odb_stream"
          ],
          "group": "odb"
        },
        "git_odb_open_rstream": {
          "kind": "function",
          "name": "git_odb_open_rstream",
          "location": {
            "file": "odb.h",
            "line": 248,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 if the stream was created; error code otherwise"
          },
          "params": [
            {
              "name": "stream",
              "type": "git_odb_stream **",
              "direction": "in",
              "comment": "pointer where to store the stream"
            },
            {
              "name": "db",
              "type": "git_odb *",
              "direction": "in",
              "comment": "object database where the stream will read from"
            },
            {
              "name": "oid",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "oid of the object the stream will read from"
            }
          ],
          "comment": [
            "Open a stream to read an object from the ODB",
            "Note that most backends do *not* support streaming reads\n because they store their objects as compressed/delta'ed blobs.",
            "It's recommended to use `git_odb_read` instead, which is\n assured to work on all backends.",
            "The returned stream will be of type `GIT_STREAM_RDONLY` and\n will have the following methods:",
            "- stream->read: read `n` bytes from the stream\n\t\t- stream->free: free the stream",
            "The stream must always be free'd or will leak memory."
          ],
          "see": [
            "git_odb_stream"
          ],
          "group": "odb"
        },
        "git_odb_hash": {
          "kind": "function",
          "name": "git_odb_hash",
          "location": {
            "file": "odb.h",
            "line": 262,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "id",
              "type": "git_oid *",
              "direction": "in",
              "comment": "the resulting object-ID."
            },
            {
              "name": "data",
              "type": "const void *",
              "direction": "in",
              "comment": "data to hash"
            },
            {
              "name": "len",
              "type": "size_t",
              "direction": "in",
              "comment": "size of the data"
            },
            {
              "name": "type",
              "type": "git_otype",
              "direction": "in",
              "comment": "of the data to hash",
              "referenceType": "enum git_otype"
            }
          ],
          "comment": [
            "Determine the object-ID (sha1 hash) of a data buffer",
            "The resulting SHA-1 OID will the itentifier for the data\n buffer as if the data buffer it were to written to the ODB."
          ],
          "group": "odb"
        },
        "git_odb_hashfile": {
          "kind": "function",
          "name": "git_odb_hashfile",
          "location": {
            "file": "odb.h",
            "line": 275,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_oid *",
              "direction": "in",
              "comment": "oid structure the result is written into."
            },
            {
              "name": "path",
              "type": "const char *",
              "direction": "in",
              "comment": "file to read and determine object id for"
            },
            {
              "name": "type",
              "type": "git_otype",
              "direction": "in",
              "comment": "the type of the object that will be hashed",
              "referenceType": "enum git_otype"
            }
          ],
          "comment": [
            "Read a file from disk and fill a git_oid with the object id\n that the file would have if it were written to the Object\n Database as an object of the given type. Similar functionality\n to git.git's `git hash-object` without the `-w` flag."
          ],
          "group": "odb"
        },
        "git_odb_object_free": {
          "kind": "function",
          "name": "git_odb_object_free",
          "location": {
            "file": "odb.h",
            "line": 285,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "object",
              "type": "git_odb_object *",
              "direction": "in",
              "comment": "object to close"
            }
          ],
          "comment": [
            "Close an ODB object",
            "This method must always be called once a `git_odb_object` is no\n longer needed, otherwise memory will leak."
          ],
          "group": "odb"
        },
        "git_odb_object_id": {
          "kind": "function",
          "name": "git_odb_object_id",
          "location": {
            "file": "odb.h",
            "line": 295,
            "column": 29
          },
          "returns": {
            "type": "const git_oid *",
            "comment": "a pointer to the OID"
          },
          "params": [
            {
              "name": "object",
              "type": "git_odb_object *",
              "direction": "in",
              "comment": "the object"
            }
          ],
          "comment": [
            "Return the OID of an ODB object",
            "This is the OID from which the object was read from"
          ],
          "group": "odb"
        },
        "git_odb_object_data": {
          "kind": "function",
          "name": "git_odb_object_data",
          "location": {
            "file": "odb.h",
            "line": 308,
            "column": 26
          },
          "returns": {
            "type": "const void *",
            "comment": "a pointer to the data"
          },
          "params": [
            {
              "name": "object",
              "type": "git_odb_object *",
              "direction": "in",
              "comment": "the object"
            }
          ],
          "comment": [
            "Return the data of an ODB object",
            "This is the uncompressed, raw data as read from the ODB,\n without the leading header.",
            "This pointer is owned by the object and shall not be free'd."
          ],
          "group": "odb"
        },
        "git_odb_object_size": {
          "kind": "function",
          "name": "git_odb_object_size",
          "location": {
            "file": "odb.h",
            "line": 319,
            "column": 20
          },
          "returns": {
            "type": "size_t",
            "comment": "the size"
          },
          "params": [
            {
              "name": "object",
              "type": "git_odb_object *",
              "direction": "in",
              "comment": "the object"
            }
          ],
          "comment": [
            "Return the size of an ODB object",
            "This is the real size of the `data` buffer, not the\n actual size of the object."
          ],
          "group": "odb"
        },
        "git_odb_object_type": {
          "kind": "function",
          "name": "git_odb_object_type",
          "location": {
            "file": "odb.h",
            "line": 327,
            "column": 23
          },
          "returns": {
            "type": "git_otype",
            "comment": "the type"
          },
          "params": [
            {
              "name": "object",
              "type": "git_odb_object *",
              "direction": "in",
              "comment": "the object"
            }
          ],
          "comment": [
            "Return the type of an ODB object"
          ],
          "group": "odb"
        },
        "git_odb": {
          "kind": "struct",
          "name": "git_odb",
          "referenceName": "struct git_odb",
          "opaque": true,
          "comment": [
            "An open object database handle."
          ],
          "location": {
            "file": "types.h",
            "line": 78,
            "column": 24
          },
          "group": "odb",
          "parameterTo": [
            "git_odb_new",
            "git_odb_open",
            "git_odb_add_backend",
            "git_odb_add_alternate",
            "git_odb_free",
            "git_odb_read",
            "git_odb_read_prefix",
            "git_odb_read_header",
            "git_odb_exists",
            "git_odb_write",
            "git_odb_open_wstream",
            "git_odb_open_rstream",
            "git_repository_odb",
            "git_repository_set_odb"
          ]
        },
        "git_odb_object": {
          "kind": "struct",
          "name": "git_odb_object",
          "referenceName": "struct git_odb_object",
          "opaque": true,
          "comment": [
            "An object read from the ODB"
          ],
          "location": {
            "file": "types.h",
            "line": 84,
            "column": 31
          },
          "group": "odb",
          "parameterTo": [
            "git_odb_read",
            "git_odb_read_prefix",
            "git_odb_object_free",
            "git_odb_object_id",
            "git_odb_object_data",
            "git_odb_object_size",
            "git_odb_object_type"
          ]
        }
      },
      "info": {
        "summary": "Git object database routines"
      }
    },
    "odb_backend": {
      "apis": {
        "git_odb_backend": {
          "kind": "struct",
          "name": "git_odb_backend",
          "referenceName": "struct git_odb_backend",
          "comment": [
            "An instance for a custom backend"
          ],
          "members": [
            {
              "name": "odb",
              "type": "git_odb *"
            },
            {
              "name": "read",
              "type": "int (*)(void **, size_t *, git_otype *, struct git_odb_backend *, const git_oid *)"
            },
            {
              "name": "read_prefix",
              "type": "int (*)(git_oid *, void **, size_t *, git_otype *, struct git_odb_backend *, const git_oid *, unsigned int)"
            },
            {
              "name": "read_header",
              "type": "int (*)(size_t *, git_otype *, struct git_odb_backend *, const git_oid *)"
            },
            {
              "name": "write",
              "type": "int (*)(git_oid *, struct git_odb_backend *, const void *, size_t, git_otype)"
            },
            {
              "name": "writestream",
              "type": "int (*)(struct git_odb_stream **, struct git_odb_backend *, size_t, git_otype)"
            },
            {
              "name": "readstream",
              "type": "int (*)(struct git_odb_stream **, struct git_odb_backend *, const git_oid *)"
            },
            {
              "name": "exists",
              "type": "int (*)(struct git_odb_backend *, const git_oid *)"
            },
            {
              "name": "free",
              "type": "void (*)(struct git_odb_backend *)"
            }
          ],
          "location": {
            "file": "odb_backend.h",
            "line": 26,
            "column": 8
          },
          "group": "odb_backend",
          "parameterTo": [
            "git_odb_add_backend",
            "git_odb_add_alternate",
            "git_odb_backend_pack",
            "git_odb_backend_loose"
          ]
        },
        "undefined": {
          "kind": "enum",
          "members": [
            {
              "name": "GIT_STREAM_RDONLY",
              "value": "2"
            },
            {
              "name": "GIT_STREAM_WRONLY",
              "value": "4"
            },
            {
              "name": "GIT_STREAM_RW",
              "value": "6"
            }
          ],
          "comment": [
            "Streaming mode"
          ],
          "location": {
            "file": "odb_backend.h",
            "line": 78,
            "column": 1
          },
          "group": "odb_backend"
        },
        "git_odb_stream": {
          "kind": "struct",
          "name": "git_odb_stream",
          "referenceName": "struct git_odb_stream",
          "comment": [
            "A stream to read/write from a backend"
          ],
          "members": [
            {
              "name": "backend",
              "type": "struct git_odb_backend *"
            },
            {
              "name": "mode",
              "type": "int"
            },
            {
              "name": "read",
              "type": "int (*)(struct git_odb_stream *, char *, size_t)"
            },
            {
              "name": "write",
              "type": "int (*)(struct git_odb_stream *, const char *, size_t)"
            },
            {
              "name": "finalize_write",
              "type": "int (*)(git_oid *, struct git_odb_stream *)"
            },
            {
              "name": "free",
              "type": "void (*)(struct git_odb_stream *)"
            }
          ],
          "location": {
            "file": "odb_backend.h",
            "line": 85,
            "column": 8
          },
          "group": "odb_backend",
          "parameterTo": [
            "git_odb_open_wstream",
            "git_odb_open_rstream"
          ]
        },
        "git_odb_backend_pack": {
          "kind": "function",
          "name": "git_odb_backend_pack",
          "location": {
            "file": "odb_backend.h",
            "line": 95,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "backend_out",
              "type": "git_odb_backend **"
            },
            {
              "name": "objects_dir",
              "type": "const char *"
            }
          ],
          "group": "odb_backend"
        },
        "git_odb_backend_loose": {
          "kind": "function",
          "name": "git_odb_backend_loose",
          "location": {
            "file": "odb_backend.h",
            "line": 96,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "backend_out",
              "type": "git_odb_backend **"
            },
            {
              "name": "objects_dir",
              "type": "const char *"
            },
            {
              "name": "compression_level",
              "type": "int"
            },
            {
              "name": "do_fsync",
              "type": "int"
            }
          ],
          "group": "odb_backend"
        }
      },
      "info": {
        "summary": "Git custom backend functions"
      }
    },
    "oid": {
      "apis": {
        "GIT_OID_RAWSZ": {
          "kind": "macro",
          "name": "GIT_OID_RAWSZ",
          "location": {
            "file": "oid.h",
            "line": 23,
            "column": 9
          },
          "value": "20",
          "comment": "Size (in bytes) of a raw/binary oid",
          "group": "oid"
        },
        "GIT_OID_HEXSZ": {
          "kind": "macro",
          "name": "GIT_OID_HEXSZ",
          "location": {
            "file": "oid.h",
            "line": 26,
            "column": 9
          },
          "value": "(GIT_OID_RAWSZ * 2)",
          "comment": "Size (in bytes) of a hex formatted oid",
          "group": "oid"
        },
        "GIT_OID_MINPREFIXLEN": {
          "kind": "macro",
          "name": "GIT_OID_MINPREFIXLEN",
          "location": {
            "file": "oid.h",
            "line": 30,
            "column": 9
          },
          "value": "4",
          "comment": "Minimum length (in number of hex characters, i.e. packets of 4 bits) of an oid prefix",
          "group": "oid"
        },
        "git_oid": {
          "kind": "struct",
          "name": "git_oid",
          "referenceName": "struct _git_oid",
          "opaque": true,
          "comment": [
            "Unique identity of any object (commit, tree, blob, tag)."
          ],
          "location": {
            "file": "oid.h",
            "line": 33,
            "column": 25
          },
          "group": "oid",
          "returnedBy": [
            "git_commit_id",
            "git_commit_tree_oid",
            "git_commit_parent_oid",
            "git_indexer_stream_hash",
            "git_indexer_hash",
            "git_note_oid",
            "git_object_id",
            "git_odb_object_id",
            "git_reflog_entry_oidold",
            "git_reflog_entry_oidnew",
            "git_reference_oid",
            "git_tag_id",
            "git_tag_target_oid",
            "git_tree_id",
            "git_tree_entry_id"
          ],
          "parameterTo": [
            "git_blob_lookup",
            "git_blob_lookup_prefix",
            "git_blob_create_fromfile",
            "git_blob_create_fromdisk",
            "git_blob_create_frombuffer",
            "git_branch_create",
            "git_commit_lookup",
            "git_commit_lookup_prefix",
            "git_commit_create",
            "git_commit_create_v",
            "git_merge_base",
            "git_note_read",
            "git_note_create",
            "git_note_remove",
            "git_object_lookup",
            "git_object_lookup_prefix",
            "git_odb_read",
            "git_odb_read_prefix",
            "git_odb_read_header",
            "git_odb_exists",
            "git_odb_write",
            "git_odb_open_rstream",
            "git_odb_hash",
            "git_odb_hashfile",
            "git_oid_fromstr",
            "git_oid_fromstrn",
            "git_oid_fromraw",
            "git_oid_fmt",
            "git_oid_pathfmt",
            "git_oid_allocfmt",
            "git_oid_tostr",
            "git_oid_cpy",
            "git_oid_cmp",
            "git_oid_ncmp",
            "git_oid_streq",
            "git_oid_iszero",
            "git_reflog_write",
            "git_reference_name_to_oid",
            "git_reference_create_oid",
            "git_reference_set_oid",
            "git_revwalk_push",
            "git_revwalk_hide",
            "git_revwalk_next",
            "git_tag_lookup",
            "git_tag_lookup_prefix",
            "git_tag_create",
            "git_tag_create_frombuffer",
            "git_tag_create_lightweight",
            "git_tree_lookup",
            "git_tree_lookup_prefix",
            "git_tree_create_fromindex",
            "git_treebuilder_insert",
            "git_treebuilder_write"
          ]
        },
        "_git_oid": {
          "kind": "struct",
          "name": "_git_oid",
          "referenceName": "struct _git_oid",
          "members": [
            {
              "name": "id",
              "type": "unsigned char[20]",
              "comment": [
                "raw binary formatted id"
              ]
            }
          ],
          "location": {
            "file": "oid.h",
            "line": 34,
            "column": 8
          },
          "group": "oid"
        },
        "git_oid_fromstr": {
          "kind": "function",
          "name": "git_oid_fromstr",
          "location": {
            "file": "oid.h",
            "line": 48,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_oid *",
              "direction": "in",
              "comment": "oid structure the result is written into."
            },
            {
              "name": "str",
              "type": "const char *",
              "direction": "in",
              "comment": "input hex string; must be pointing at the start of\n\t\tthe hex sequence and have at least the number of bytes\n\t\tneeded for an oid encoded in hex (40 bytes)."
            }
          ],
          "comment": [
            "Parse a hex formatted object id into a git_oid."
          ],
          "group": "oid"
        },
        "git_oid_fromstrn": {
          "kind": "function",
          "name": "git_oid_fromstrn",
          "location": {
            "file": "oid.h",
            "line": 61,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_oid *",
              "direction": "in",
              "comment": "oid structure the result is written into."
            },
            {
              "name": "str",
              "type": "const char *",
              "direction": "in",
              "comment": "input hex string of at least size `length`"
            },
            {
              "name": "length",
              "type": "size_t",
              "direction": "in",
              "comment": "length of the input string"
            }
          ],
          "comment": [
            "Parse N characters of a hex formatted object id into a git_oid",
            "If N is odd, N-1 characters will be parsed instead.\n The remaining space in the git_oid will be set to zero."
          ],
          "group": "oid"
        },
        "git_oid_fromraw": {
          "kind": "function",
          "name": "git_oid_fromraw",
          "location": {
            "file": "oid.h",
            "line": 69,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "out",
              "type": "git_oid *",
              "direction": "in",
              "comment": "oid structure the result is written into."
            },
            {
              "name": "raw",
              "type": "const unsigned char *",
              "direction": "in",
              "comment": "the raw input bytes to be copied."
            }
          ],
          "comment": [
            "Copy an already raw oid into a git_oid structure."
          ],
          "group": "oid"
        },
        "git_oid_fmt": {
          "kind": "function",
          "name": "git_oid_fmt",
          "location": {
            "file": "oid.h",
            "line": 81,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "str",
              "type": "char *",
              "direction": "in",
              "comment": "output hex string; must be pointing at the start of\n\t\tthe hex sequence and have at least the number of bytes\n\t\tneeded for an oid encoded in hex (40 bytes). Only the\n\t\toid digits are written; a '\n\\\n0' terminator must be added\n\t\tby the caller if it is required."
            },
            {
              "name": "oid",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "oid structure to format."
            }
          ],
          "comment": [
            "Format a git_oid into a hex string."
          ],
          "group": "oid"
        },
        "git_oid_pathfmt": {
          "kind": "function",
          "name": "git_oid_pathfmt",
          "location": {
            "file": "oid.h",
            "line": 96,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "str",
              "type": "char *",
              "direction": "in",
              "comment": "output hex string; must be pointing at the start of\n\t\tthe hex sequence and have at least the number of bytes\n\t\tneeded for an oid encoded in hex (41 bytes). Only the\n\t\toid digits are written; a '\n\\\n0' terminator must be added\n\t\tby the caller if it is required."
            },
            {
              "name": "oid",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "oid structure to format."
            }
          ],
          "comment": [
            "Format a git_oid into a loose-object path string.",
            "The resulting string is \"aa/...\", where \"aa\" is the first two\n hex digitis of the oid and \"...\" is the remaining 38 digits."
          ],
          "group": "oid"
        },
        "git_oid_allocfmt": {
          "kind": "function",
          "name": "git_oid_allocfmt",
          "location": {
            "file": "oid.h",
            "line": 105,
            "column": 20
          },
          "returns": {
            "type": "char *",
            "comment": "the c-string; NULL if memory is exhausted. Caller must\n\t\t\tdeallocate the string with git__free()."
          },
          "params": [
            {
              "name": "oid",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "the oid structure to format"
            }
          ],
          "comment": [
            "Format a git_oid into a newly allocated c-string."
          ],
          "group": "oid"
        },
        "git_oid_tostr": {
          "kind": "function",
          "name": "git_oid_tostr",
          "location": {
            "file": "oid.h",
            "line": 122,
            "column": 20
          },
          "returns": {
            "type": "char *",
            "comment": "the out buffer pointer, assuming no input parameter\n\t\t\terrors, otherwise a pointer to an empty string."
          },
          "params": [
            {
              "name": "out",
              "type": "char *",
              "direction": "in",
              "comment": "the buffer into which the oid string is output."
            },
            {
              "name": "n",
              "type": "size_t",
              "direction": "in",
              "comment": "the size of the out buffer."
            },
            {
              "name": "oid",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "the oid structure to format."
            }
          ],
          "comment": [
            "Format a git_oid into a buffer as a hex format c-string.",
            "If the buffer is smaller than GIT_OID_HEXSZ+1, then the resulting\n oid c-string will be truncated to n-1 characters. If there are\n any input parameter errors (out == NULL, n == 0, oid == NULL),\n then a pointer to an empty string is returned, so that the return\n value can always be printed."
          ],
          "group": "oid"
        },
        "git_oid_cpy": {
          "kind": "function",
          "name": "git_oid_cpy",
          "location": {
            "file": "oid.h",
            "line": 130,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "out",
              "type": "git_oid *",
              "direction": "in",
              "comment": "oid structure the result is written into."
            },
            {
              "name": "src",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "oid structure to copy from."
            }
          ],
          "comment": [
            "Copy an oid from one structure to another."
          ],
          "group": "oid"
        },
        "git_oid_cmp": {
          "kind": "function",
          "name": "git_oid_cmp",
          "location": {
            "file": "oid.h",
            "line": 139,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "<\n0, 0, >0 if a \n<\n b, a == b, a > b."
          },
          "params": [
            {
              "name": "a",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "first oid structure."
            },
            {
              "name": "b",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "second oid structure."
            }
          ],
          "comment": [
            "Compare two oid structures."
          ],
          "group": "oid"
        },
        "git_oid_ncmp": {
          "kind": "function",
          "name": "git_oid_ncmp",
          "location": {
            "file": "oid.h",
            "line": 150,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 in case of a match"
          },
          "params": [
            {
              "name": "a",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "first oid structure."
            },
            {
              "name": "b",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "second oid structure."
            },
            {
              "name": "len",
              "type": "unsigned int",
              "direction": "in",
              "comment": "the number of hex chars to compare"
            }
          ],
          "comment": [
            "Compare the first 'len' hexadecimal characters (packets of 4 bits)\n of two oid structures."
          ],
          "group": "oid"
        },
        "git_oid_streq": {
          "kind": "function",
          "name": "git_oid_streq",
          "location": {
            "file": "oid.h",
            "line": 160,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "GIT_ENOTOID if str is not a valid hex string,\n 0 in case of a match, GIT_ERROR otherwise."
          },
          "params": [
            {
              "name": "a",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "oid structure."
            },
            {
              "name": "str",
              "type": "const char *",
              "direction": "in",
              "comment": "input hex string of an object id."
            }
          ],
          "comment": [
            "Check if an oid equals an hex formatted object id."
          ],
          "group": "oid"
        },
        "git_oid_iszero": {
          "kind": "function",
          "name": "git_oid_iszero",
          "location": {
            "file": "oid.h",
            "line": 165,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "a",
              "type": "const git_oid *"
            }
          ],
          "comment": [
            "Check is an oid is all zeros."
          ],
          "group": "oid"
        },
        "git_oid_shorten": {
          "kind": "struct",
          "name": "git_oid_shorten",
          "referenceName": "struct git_oid_shorten",
          "opaque": true,
          "comment": [
            "OID Shortener object"
          ],
          "location": {
            "file": "oid.h",
            "line": 170,
            "column": 32
          },
          "group": "oid",
          "returnedBy": [
            "git_oid_shorten_new"
          ],
          "parameterTo": [
            "git_oid_shorten_add",
            "git_oid_shorten_free"
          ]
        },
        "git_oid_shorten_new": {
          "kind": "function",
          "name": "git_oid_shorten_new",
          "location": {
            "file": "oid.h",
            "line": 186,
            "column": 31
          },
          "returns": {
            "type": "git_oid_shorten *",
            "comment": "a `git_oid_shorten` instance, NULL if OOM"
          },
          "params": [
            {
              "name": "min_length",
              "type": "size_t",
              "direction": "in",
              "comment": "The minimal length for all identifiers,\n\t\twhich will be used even if shorter OIDs would still\n\t\tbe unique."
            }
          ],
          "comment": [
            "Create a new OID shortener.",
            "The OID shortener is used to process a list of OIDs\n in text form and return the shortest length that would\n uniquely identify all of them.",
            "E.g. look at the result of `git log --abbrev`."
          ],
          "group": "oid"
        },
        "git_oid_shorten_add": {
          "kind": "function",
          "name": "git_oid_shorten_add",
          "location": {
            "file": "oid.h",
            "line": 212,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "the minimal length to uniquely identify all OIDs\n\t\tadded so far to the set; or an error code (\n<\n0) if an\n\t\terror occurs."
          },
          "params": [
            {
              "name": "os",
              "type": "git_oid_shorten *",
              "direction": "in",
              "comment": "a `git_oid_shorten` instance"
            },
            {
              "name": "text_oid",
              "type": "const char *",
              "direction": "in",
              "comment": "an OID in text form"
            }
          ],
          "comment": [
            "Add a new OID to set of shortened OIDs and calculate\n the minimal length to uniquely identify all the OIDs in\n the set.",
            "The OID is expected to be a 40-char hexadecimal string.\n The OID is owned by the user and will not be modified\n or freed.",
            "For performance reasons, there is a hard-limit of how many\n OIDs can be added to a single set (around ~22000, assuming\n a mostly randomized distribution), which should be enough\n for any kind of program, and keeps the algorithm fast and\n memory-efficient.",
            "Attempting to add more than those OIDs will result in a\n GIT_ENOMEM error"
          ],
          "group": "oid"
        },
        "git_oid_shorten_free": {
          "kind": "function",
          "name": "git_oid_shorten_free",
          "location": {
            "file": "oid.h",
            "line": 219,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "os",
              "type": "git_oid_shorten *",
              "direction": "in",
              "comment": "a `git_oid_shorten` instance"
            }
          ],
          "comment": [
            "Free an OID shortener instance"
          ],
          "group": "oid"
        }
      },
      "info": {
        "summary": "Git object id routines"
      }
    },
    "reflog": {
      "apis": {
        "git_reflog_read": {
          "kind": "function",
          "name": "git_reflog_read",
          "location": {
            "file": "reflog.h",
            "line": 33,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "reflog",
              "type": "git_reflog **",
              "direction": "in",
              "comment": "pointer to reflog"
            },
            {
              "name": "ref",
              "type": "git_reference *",
              "direction": "in",
              "comment": "reference to read the reflog for"
            }
          ],
          "comment": [
            "Read the reflog for the given reference",
            "The reflog must be freed manually by using\n git_reflog_free()."
          ],
          "group": "reflog"
        },
        "git_reflog_write": {
          "kind": "function",
          "name": "git_reflog_write",
          "location": {
            "file": "reflog.h",
            "line": 51,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "ref",
              "type": "git_reference *",
              "direction": "in",
              "comment": "the changed reference"
            },
            {
              "name": "oid_old",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "the OID the reference was pointing to"
            },
            {
              "name": "committer",
              "type": "const git_signature *",
              "direction": "in",
              "comment": "the signature of the committer"
            },
            {
              "name": "msg",
              "type": "const char *",
              "direction": "in",
              "comment": "the reflog message"
            }
          ],
          "comment": [
            "Write a new reflog for the given reference",
            "If there is no reflog file for the given\n reference yet, it will be created.",
            "`oid_old` may be NULL in case it's a new reference.",
            "`msg` is optional and can be NULL."
          ],
          "group": "reflog"
        },
        "git_reflog_rename": {
          "kind": "function",
          "name": "git_reflog_rename",
          "location": {
            "file": "reflog.h",
            "line": 60,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "ref",
              "type": "git_reference *",
              "direction": "in",
              "comment": "the reference"
            },
            {
              "name": "new_name",
              "type": "const char *",
              "direction": "in",
              "comment": "the new name of the reference"
            }
          ],
          "comment": [
            "Rename the reflog for the given reference"
          ],
          "group": "reflog"
        },
        "git_reflog_delete": {
          "kind": "function",
          "name": "git_reflog_delete",
          "location": {
            "file": "reflog.h",
            "line": 68,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "ref",
              "type": "git_reference *",
              "direction": "in",
              "comment": "the reference"
            }
          ],
          "comment": [
            "Delete the reflog for the given reference"
          ],
          "group": "reflog"
        },
        "git_reflog_entrycount": {
          "kind": "function",
          "name": "git_reflog_entrycount",
          "location": {
            "file": "reflog.h",
            "line": 76,
            "column": 26
          },
          "returns": {
            "type": "unsigned int",
            "comment": "the number of log entries"
          },
          "params": [
            {
              "name": "reflog",
              "type": "git_reflog *",
              "direction": "in",
              "comment": "the previously loaded reflog"
            }
          ],
          "comment": [
            "Get the number of log entries in a reflog"
          ],
          "group": "reflog"
        },
        "git_reflog_entry_byindex": {
          "kind": "function",
          "name": "git_reflog_entry_byindex",
          "location": {
            "file": "reflog.h",
            "line": 85,
            "column": 38
          },
          "returns": {
            "type": "const git_reflog_entry *",
            "comment": "the entry; NULL if not found"
          },
          "params": [
            {
              "name": "reflog",
              "type": "git_reflog *",
              "direction": "in",
              "comment": "a previously loaded reflog"
            },
            {
              "name": "idx",
              "type": "unsigned int",
              "direction": "in",
              "comment": "the position to lookup"
            }
          ],
          "comment": [
            "Lookup an entry by its index"
          ],
          "group": "reflog"
        },
        "git_reflog_entry_oidold": {
          "kind": "function",
          "name": "git_reflog_entry_oidold",
          "location": {
            "file": "reflog.h",
            "line": 93,
            "column": 29
          },
          "returns": {
            "type": "const git_oid *",
            "comment": "the old oid"
          },
          "params": [
            {
              "name": "entry",
              "type": "const git_reflog_entry *",
              "direction": "in",
              "comment": "a reflog entry"
            }
          ],
          "comment": [
            "Get the old oid"
          ],
          "group": "reflog"
        },
        "git_reflog_entry_oidnew": {
          "kind": "function",
          "name": "git_reflog_entry_oidnew",
          "location": {
            "file": "reflog.h",
            "line": 101,
            "column": 29
          },
          "returns": {
            "type": "const git_oid *",
            "comment": "the new oid at this time"
          },
          "params": [
            {
              "name": "entry",
              "type": "const git_reflog_entry *",
              "direction": "in",
              "comment": "a reflog entry"
            }
          ],
          "comment": [
            "Get the new oid"
          ],
          "group": "reflog"
        },
        "git_reflog_entry_committer": {
          "kind": "function",
          "name": "git_reflog_entry_committer",
          "location": {
            "file": "reflog.h",
            "line": 109,
            "column": 29
          },
          "returns": {
            "type": "git_signature *",
            "comment": "the committer"
          },
          "params": [
            {
              "name": "entry",
              "type": "const git_reflog_entry *",
              "direction": "in",
              "comment": "a reflog entry"
            }
          ],
          "comment": [
            "Get the committer of this entry"
          ],
          "group": "reflog"
        },
        "git_reflog_entry_msg": {
          "kind": "function",
          "name": "git_reflog_entry_msg",
          "location": {
            "file": "reflog.h",
            "line": 117,
            "column": 20
          },
          "returns": {
            "type": "char *",
            "comment": "the log msg"
          },
          "params": [
            {
              "name": "entry",
              "type": "const git_reflog_entry *",
              "direction": "in",
              "comment": "a reflog entry"
            }
          ],
          "comment": [
            "Get the log msg"
          ],
          "group": "reflog"
        },
        "git_reflog_free": {
          "kind": "function",
          "name": "git_reflog_free",
          "location": {
            "file": "reflog.h",
            "line": 124,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "reflog",
              "type": "git_reflog *",
              "direction": "in",
              "comment": "reflog to free"
            }
          ],
          "comment": [
            "Free the reflog"
          ],
          "group": "reflog"
        },
        "git_reflog_entry": {
          "kind": "struct",
          "name": "git_reflog_entry",
          "referenceName": "struct git_reflog_entry",
          "opaque": true,
          "comment": [
            "Representation of a reference log entry"
          ],
          "location": {
            "file": "types.h",
            "line": 129,
            "column": 33
          },
          "group": "reflog",
          "returnedBy": [
            "git_reflog_entry_byindex"
          ],
          "parameterTo": [
            "git_reflog_entry_oidold",
            "git_reflog_entry_oidnew",
            "git_reflog_entry_committer",
            "git_reflog_entry_msg"
          ]
        },
        "git_reflog": {
          "kind": "struct",
          "name": "git_reflog",
          "referenceName": "struct git_reflog",
          "opaque": true,
          "comment": [
            "Representation of a reference log"
          ],
          "location": {
            "file": "types.h",
            "line": 132,
            "column": 27
          },
          "group": "reflog",
          "parameterTo": [
            "git_reflog_read",
            "git_reflog_entrycount",
            "git_reflog_entry_byindex",
            "git_reflog_free"
          ]
        }
      },
      "info": {
        "summary": "Git reflog management routines"
      }
    },
    "refs": {
      "apis": {
        "git_reference_lookup": {
          "kind": "function",
          "name": "git_reference_lookup",
          "location": {
            "file": "refs.h",
            "line": 33,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "reference_out",
              "type": "git_reference **",
              "direction": "in",
              "comment": "pointer to the looked-up reference"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repository to look up the reference"
            },
            {
              "name": "name",
              "type": "const char *",
              "direction": "in",
              "comment": "the long name for the reference (e.g. HEAD, ref/heads/master, refs/tags/v0.1.0, ...)"
            }
          ],
          "comment": [
            "Lookup a reference by its name in a repository.",
            "The generated reference must be freed by the user."
          ],
          "group": "refs"
        },
        "git_reference_name_to_oid": {
          "kind": "function",
          "name": "git_reference_name_to_oid",
          "location": {
            "file": "refs.h",
            "line": 43,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, -1 if name could not be resolved"
          },
          "params": [
            {
              "name": "out",
              "type": "git_oid *"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "The repository in which to look up the reference"
            },
            {
              "name": "name",
              "type": "const char *",
              "direction": "in",
              "comment": "The long name for the reference"
            }
          ],
          "comment": [
            "Lookup a reference by name and resolve immediately to OID."
          ],
          "group": "refs"
        },
        "git_reference_create_symbolic": {
          "kind": "function",
          "name": "git_reference_create_symbolic",
          "location": {
            "file": "refs.h",
            "line": 64,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "ref_out",
              "type": "git_reference **",
              "direction": "in",
              "comment": "Pointer to the newly created reference"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "Repository where that reference will live"
            },
            {
              "name": "name",
              "type": "const char *",
              "direction": "in",
              "comment": "The name of the reference"
            },
            {
              "name": "target",
              "type": "const char *",
              "direction": "in",
              "comment": "The target of the reference"
            },
            {
              "name": "force",
              "type": "int",
              "direction": "in",
              "comment": "Overwrite existing references"
            }
          ],
          "comment": [
            "Create a new symbolic reference.",
            "The reference will be created in the repository and written\n to the disk.",
            "The generated reference must be freed by the user.",
            "If `force` is true and there already exists a reference\n with the same name, it will be overwritten."
          ],
          "group": "refs"
        },
        "git_reference_create_oid": {
          "kind": "function",
          "name": "git_reference_create_oid",
          "location": {
            "file": "refs.h",
            "line": 84,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "ref_out",
              "type": "git_reference **",
              "direction": "in",
              "comment": "Pointer to the newly created reference"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "Repository where that reference will live"
            },
            {
              "name": "name",
              "type": "const char *",
              "direction": "in",
              "comment": "The name of the reference"
            },
            {
              "name": "id",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "The object id pointed to by the reference."
            },
            {
              "name": "force",
              "type": "int",
              "direction": "in",
              "comment": "Overwrite existing references"
            }
          ],
          "comment": [
            "Create a new object id reference.",
            "The reference will be created in the repository and written\n to the disk.",
            "The generated reference must be freed by the user.",
            "If `force` is true and there already exists a reference\n with the same name, it will be overwritten."
          ],
          "group": "refs"
        },
        "git_reference_oid": {
          "kind": "function",
          "name": "git_reference_oid",
          "location": {
            "file": "refs.h",
            "line": 94,
            "column": 29
          },
          "returns": {
            "type": "const git_oid *",
            "comment": "a pointer to the oid if available, NULL otherwise"
          },
          "params": [
            {
              "name": "ref",
              "type": "git_reference *",
              "direction": "in",
              "comment": "The reference"
            }
          ],
          "comment": [
            "Get the OID pointed to by a reference.",
            "Only available if the reference is direct (i.e. not symbolic)"
          ],
          "group": "refs"
        },
        "git_reference_target": {
          "kind": "function",
          "name": "git_reference_target",
          "location": {
            "file": "refs.h",
            "line": 104,
            "column": 26
          },
          "returns": {
            "type": "const char *",
            "comment": "a pointer to the name if available, NULL otherwise"
          },
          "params": [
            {
              "name": "ref",
              "type": "git_reference *",
              "direction": "in",
              "comment": "The reference"
            }
          ],
          "comment": [
            "Get full name to the reference pointed by this reference",
            "Only available if the reference is symbolic"
          ],
          "group": "refs"
        },
        "git_reference_type": {
          "kind": "function",
          "name": "git_reference_type",
          "location": {
            "file": "refs.h",
            "line": 114,
            "column": 23
          },
          "returns": {
            "type": "git_ref_t",
            "comment": "the type"
          },
          "params": [
            {
              "name": "ref",
              "type": "git_reference *",
              "direction": "in",
              "comment": "The reference"
            }
          ],
          "comment": [
            "Get the type of a reference",
            "Either direct (GIT_REF_OID) or symbolic (GIT_REF_SYMBOLIC)"
          ],
          "group": "refs"
        },
        "git_reference_name": {
          "kind": "function",
          "name": "git_reference_name",
          "location": {
            "file": "refs.h",
            "line": 122,
            "column": 26
          },
          "returns": {
            "type": "const char *",
            "comment": "the full name for the ref"
          },
          "params": [
            {
              "name": "ref",
              "type": "git_reference *",
              "direction": "in",
              "comment": "The reference"
            }
          ],
          "comment": [
            "Get the full name of a reference"
          ],
          "group": "refs"
        },
        "git_reference_resolve": {
          "kind": "function",
          "name": "git_reference_resolve",
          "location": {
            "file": "refs.h",
            "line": 142,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "resolved_ref",
              "type": "git_reference **",
              "direction": "in",
              "comment": "Pointer to the peeled reference"
            },
            {
              "name": "ref",
              "type": "git_reference *",
              "direction": "in",
              "comment": "The reference"
            }
          ],
          "comment": [
            "Resolve a symbolic reference",
            "Thie method iteratively peels a symbolic reference\n until it resolves to a direct reference to an OID.",
            "The peeled reference is returned in the `resolved_ref`\n argument, and must be freed manually once it's no longer\n needed.",
            "If a direct reference is passed as an argument,\n a copy of that reference is returned. This copy must\n be manually freed too."
          ],
          "group": "refs"
        },
        "git_reference_owner": {
          "kind": "function",
          "name": "git_reference_owner",
          "location": {
            "file": "refs.h",
            "line": 150,
            "column": 30
          },
          "returns": {
            "type": "git_repository *",
            "comment": "a pointer to the repo"
          },
          "params": [
            {
              "name": "ref",
              "type": "git_reference *",
              "direction": "in",
              "comment": "The reference"
            }
          ],
          "comment": [
            "Get the repository where a reference resides"
          ],
          "group": "refs"
        },
        "git_reference_set_target": {
          "kind": "function",
          "name": "git_reference_set_target",
          "location": {
            "file": "refs.h",
            "line": 165,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "ref",
              "type": "git_reference *",
              "direction": "in",
              "comment": "The reference"
            },
            {
              "name": "target",
              "type": "const char *",
              "direction": "in",
              "comment": "The new target for the reference"
            }
          ],
          "comment": [
            "Set the symbolic target of a reference.",
            "The reference must be a symbolic reference, otherwise\n this method will fail.",
            "The reference will be automatically updated in\n memory and on disk."
          ],
          "group": "refs"
        },
        "git_reference_set_oid": {
          "kind": "function",
          "name": "git_reference_set_oid",
          "location": {
            "file": "refs.h",
            "line": 180,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "ref",
              "type": "git_reference *",
              "direction": "in",
              "comment": "The reference"
            },
            {
              "name": "id",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "The new target OID for the reference"
            }
          ],
          "comment": [
            "Set the OID target of a reference.",
            "The reference must be a direct reference, otherwise\n this method will fail.",
            "The reference will be automatically updated in\n memory and on disk."
          ],
          "group": "refs"
        },
        "git_reference_rename": {
          "kind": "function",
          "name": "git_reference_rename",
          "location": {
            "file": "refs.h",
            "line": 208,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "ref",
              "type": "git_reference *",
              "direction": "in",
              "comment": "The reference to rename"
            },
            {
              "name": "new_name",
              "type": "const char *",
              "direction": "in",
              "comment": "The new name for the reference"
            },
            {
              "name": "force",
              "type": "int",
              "direction": "in",
              "comment": "Overwrite an existing reference"
            }
          ],
          "comment": [
            "Rename an existing reference",
            "This method works for both direct and symbolic references.\n The new name will be checked for validity and may be\n modified into a normalized form.",
            "The given git_reference will be updated in place.",
            "The reference will be immediately renamed in-memory\n and on disk.",
            "If the `force` flag is not enabled, and there's already\n a reference with the given name, the renaming will fail.",
            "IMPORTANT:\n The user needs to write a proper reflog entry if the\n reflog is enabled for the repository. We only rename\n the reflog if it exists."
          ],
          "group": "refs"
        },
        "git_reference_delete": {
          "kind": "function",
          "name": "git_reference_delete",
          "location": {
            "file": "refs.h",
            "line": 221,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "ref",
              "type": "git_reference *",
              "direction": "in",
              "comment": "The reference to remove"
            }
          ],
          "comment": [
            "Delete an existing reference",
            "This method works for both direct and symbolic references.",
            "The reference will be immediately removed on disk and from\n memory. The given reference pointer will no longer be valid."
          ],
          "group": "refs"
        },
        "git_reference_packall": {
          "kind": "function",
          "name": "git_reference_packall",
          "location": {
            "file": "refs.h",
            "line": 236,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "Repository where the loose refs will be packed"
            }
          ],
          "comment": [
            "Pack all the loose references in the repository",
            "This method will load into the cache all the loose\n references on the repository and update the\n `packed-refs` file with them.",
            "Once the `packed-refs` file has been written properly,\n the loose references will be removed from disk."
          ],
          "group": "refs"
        },
        "git_reference_list": {
          "kind": "function",
          "name": "git_reference_list",
          "location": {
            "file": "refs.h",
            "line": 259,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "array",
              "type": "git_strarray *",
              "direction": "in",
              "comment": "Pointer to a git_strarray structure where\n\t\tthe reference names will be stored"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "Repository where to find the refs"
            },
            {
              "name": "list_flags",
              "type": "unsigned int",
              "direction": "in",
              "comment": "Filtering flags for the reference\n\t\tlisting."
            }
          ],
          "comment": [
            "Fill a list with all the references that can be found\n in a repository.",
            "The listed references may be filtered by type, or using\n a bitwise OR of several types. Use the magic value\n `GIT_REF_LISTALL` to obtain all references, including\n packed ones.",
            "The string array will be filled with the names of all\n references; these values are owned by the user and\n should be free'd manually when no longer needed, using\n `git_strarray_free`."
          ],
          "group": "refs"
        },
        "git_reference_foreach": {
          "kind": "function",
          "name": "git_reference_foreach",
          "location": {
            "file": "refs.h",
            "line": 281,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "Repository where to find the refs"
            },
            {
              "name": "list_flags",
              "type": "unsigned int",
              "direction": "in",
              "comment": "Filtering flags for the reference\n\t\tlisting."
            },
            {
              "name": "callback",
              "type": "int (*)(const char *, void *)",
              "direction": "in",
              "comment": "Function which will be called for every listed ref"
            },
            {
              "name": "payload",
              "type": "void *",
              "direction": "in",
              "comment": "Additional data to pass to the callback"
            }
          ],
          "comment": [
            "Perform an operation on each reference in the repository",
            "The processed references may be filtered by type, or using\n a bitwise OR of several types. Use the magic value\n `GIT_REF_LISTALL` to obtain all references, including\n packed ones.",
            "The `callback` function will be called for each of the references\n in the repository, and will receive the name of the reference and\n the `payload` value passed to this method."
          ],
          "group": "refs"
        },
        "git_reference_is_packed": {
          "kind": "function",
          "name": "git_reference_is_packed",
          "location": {
            "file": "refs.h",
            "line": 289,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 in case it's not packed; 1 otherwise"
          },
          "params": [
            {
              "name": "ref",
              "type": "git_reference *",
              "direction": "in",
              "comment": "A git reference"
            }
          ],
          "comment": [
            "Check if a reference has been loaded from a packfile"
          ],
          "group": "refs"
        },
        "git_reference_reload": {
          "kind": "function",
          "name": "git_reference_reload",
          "location": {
            "file": "refs.h",
            "line": 309,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, or an error code"
          },
          "params": [
            {
              "name": "ref",
              "type": "git_reference *",
              "direction": "in",
              "comment": "The reference to reload"
            }
          ],
          "comment": [
            "Reload a reference from disk",
            "Reference pointers may become outdated if the Git\n repository is accessed simultaneously by other clients\n whilt the library is open.",
            "This method forces a reload of the reference from disk,\n to ensure that the provided information is still\n reliable.",
            "If the reload fails (e.g. the reference no longer exists\n on disk, or has become corrupted), an error code will be\n returned and the reference pointer will be invalidated."
          ],
          "group": "refs"
        },
        "git_reference_free": {
          "kind": "function",
          "name": "git_reference_free",
          "location": {
            "file": "refs.h",
            "line": 316,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "ref",
              "type": "git_reference *",
              "direction": "in",
              "comment": "git_reference"
            }
          ],
          "comment": [
            "Free the given reference"
          ],
          "group": "refs"
        },
        "git_reference_cmp": {
          "kind": "function",
          "name": "git_reference_cmp",
          "location": {
            "file": "refs.h",
            "line": 325,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 if the same, else a stable but meaningless ordering."
          },
          "params": [
            {
              "name": "ref1",
              "type": "git_reference *",
              "direction": "in",
              "comment": "The first git_reference"
            },
            {
              "name": "ref2",
              "type": "git_reference *",
              "direction": "in",
              "comment": "The second git_reference"
            }
          ],
          "comment": [
            "Compare two references."
          ],
          "group": "refs"
        },
        "git_reference": {
          "kind": "struct",
          "name": "git_reference",
          "referenceName": "struct git_reference",
          "opaque": true,
          "comment": [
            "In-memory representation of a reference."
          ],
          "location": {
            "file": "types.h",
            "line": 151,
            "column": 30
          },
          "group": "refs",
          "parameterTo": [
            "git_reflog_read",
            "git_reflog_write",
            "git_reflog_rename",
            "git_reflog_delete",
            "git_reference_lookup",
            "git_reference_create_symbolic",
            "git_reference_create_oid",
            "git_reference_oid",
            "git_reference_target",
            "git_reference_type",
            "git_reference_name",
            "git_reference_resolve",
            "git_reference_owner",
            "git_reference_set_target",
            "git_reference_set_oid",
            "git_reference_rename",
            "git_reference_delete",
            "git_reference_is_packed",
            "git_reference_reload",
            "git_reference_free",
            "git_reference_cmp",
            "git_repository_head"
          ]
        }
      },
      "info": {
        "summary": "Git reference management routines"
      }
    },
    "refspec": {
      "apis": {
        "git_refspec_src": {
          "kind": "function",
          "name": "git_refspec_src",
          "location": {
            "file": "refspec.h",
            "line": 28,
            "column": 26
          },
          "returns": {
            "type": "const char *",
            "comment": "the refspec's source specifier"
          },
          "params": [
            {
              "name": "refspec",
              "type": "const git_refspec *",
              "direction": "in",
              "comment": "the refspec"
            }
          ],
          "comment": [
            "Get the source specifier"
          ],
          "group": "refspec"
        },
        "git_refspec_dst": {
          "kind": "function",
          "name": "git_refspec_dst",
          "location": {
            "file": "refspec.h",
            "line": 36,
            "column": 26
          },
          "returns": {
            "type": "const char *",
            "comment": "the refspec's destination specifier"
          },
          "params": [
            {
              "name": "refspec",
              "type": "const git_refspec *",
              "direction": "in",
              "comment": "the refspec"
            }
          ],
          "comment": [
            "Get the destination specifier"
          ],
          "group": "refspec"
        },
        "git_refspec_src_matches": {
          "kind": "function",
          "name": "git_refspec_src_matches",
          "location": {
            "file": "refspec.h",
            "line": 45,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "1 if the refspec matches, 0 otherwise"
          },
          "params": [
            {
              "name": "refspec",
              "type": "const git_refspec *",
              "direction": "in",
              "comment": "the refspec"
            },
            {
              "name": "refname",
              "type": "const char *",
              "direction": "in",
              "comment": "the name of the reference to check"
            }
          ],
          "comment": [
            "Check if a refspec's source descriptor matches a reference"
          ],
          "group": "refspec"
        },
        "git_refspec_transform": {
          "kind": "function",
          "name": "git_refspec_transform",
          "location": {
            "file": "refspec.h",
            "line": 56,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0, GIT_EBUFS or another error"
          },
          "params": [
            {
              "name": "out",
              "type": "char *",
              "direction": "in",
              "comment": "where to store the target name"
            },
            {
              "name": "outlen",
              "type": "size_t",
              "direction": "in",
              "comment": "the size ouf the `out` buffer"
            },
            {
              "name": "spec",
              "type": "const git_refspec *",
              "direction": "in",
              "comment": "the refspec"
            },
            {
              "name": "name",
              "type": "const char *",
              "direction": "in",
              "comment": "the name of the reference to transform"
            }
          ],
          "comment": [
            "Transform a reference to its target following the refspec's rules"
          ],
          "group": "refspec"
        },
        "git_refspec": {
          "kind": "struct",
          "name": "git_refspec",
          "referenceName": "struct git_refspec",
          "opaque": true,
          "location": {
            "file": "types.h",
            "line": 169,
            "column": 28
          },
          "group": "refspec",
          "returnedBy": [
            "git_remote_fetchspec",
            "git_remote_pushspec"
          ],
          "parameterTo": [
            "git_refspec_src",
            "git_refspec_dst",
            "git_refspec_src_matches",
            "git_refspec_transform"
          ]
        }
      },
      "info": {
        "summary": "Git refspec attributes"
      }
    },
    "remote": {
      "apis": {
        "git_remote_new": {
          "kind": "function",
          "name": "git_remote_new",
          "location": {
            "file": "remote.h",
            "line": 46,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_remote **",
              "direction": "in",
              "comment": "pointer to the new remote object"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the associtated repository"
            },
            {
              "name": "name",
              "type": "const char *",
              "direction": "in",
              "comment": "the remote's name"
            },
            {
              "name": "url",
              "type": "const char *",
              "direction": "in",
              "comment": "the remote repository's URL"
            },
            {
              "name": "fetch",
              "type": "const char *",
              "direction": "in",
              "comment": "the fetch refspec to use for this remote"
            }
          ],
          "comment": [
            "Create a remote in memory",
            "Create a remote with the default refspecs in memory. You can use\n this when you have a URL instead of a remote's name."
          ],
          "group": "remote"
        },
        "git_remote_load": {
          "kind": "function",
          "name": "git_remote_load",
          "location": {
            "file": "remote.h",
            "line": 56,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_remote **",
              "direction": "in",
              "comment": "pointer to the new remote object"
            },
            {
              "name": "repo",
              "type": "git_repository *"
            },
            {
              "name": "name",
              "type": "const char *",
              "direction": "in",
              "comment": "the remote's name"
            }
          ],
          "comment": [
            "Get the information for a particular remote"
          ],
          "group": "remote"
        },
        "git_remote_save": {
          "kind": "function",
          "name": "git_remote_save",
          "location": {
            "file": "remote.h",
            "line": 64,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "remote",
              "type": "const git_remote *",
              "direction": "in",
              "comment": "the remote to save to config"
            }
          ],
          "comment": [
            "Save a remote to its repository's configuration"
          ],
          "group": "remote"
        },
        "git_remote_name": {
          "kind": "function",
          "name": "git_remote_name",
          "location": {
            "file": "remote.h",
            "line": 72,
            "column": 26
          },
          "returns": {
            "type": "const char *",
            "comment": "a pointer to the name"
          },
          "params": [
            {
              "name": "remote",
              "type": "git_remote *",
              "direction": "in",
              "comment": "the remote"
            }
          ],
          "comment": [
            "Get the remote's name"
          ],
          "group": "remote"
        },
        "git_remote_url": {
          "kind": "function",
          "name": "git_remote_url",
          "location": {
            "file": "remote.h",
            "line": 80,
            "column": 26
          },
          "returns": {
            "type": "const char *",
            "comment": "a pointer to the url"
          },
          "params": [
            {
              "name": "remote",
              "type": "git_remote *",
              "direction": "in",
              "comment": "the remote"
            }
          ],
          "comment": [
            "Get the remote's url"
          ],
          "group": "remote"
        },
        "git_remote_set_fetchspec": {
          "kind": "function",
          "name": "git_remote_set_fetchspec",
          "location": {
            "file": "remote.h",
            "line": 89,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error value"
          },
          "params": [
            {
              "name": "remote",
              "type": "git_remote *",
              "direction": "in",
              "comment": "the remote\n \\apram\n spec the new fetch refspec"
            },
            {
              "name": "spec",
              "type": "const char *"
            }
          ],
          "comment": [
            "Set the remote's fetch refspec"
          ],
          "group": "remote"
        },
        "git_remote_fetchspec": {
          "kind": "function",
          "name": "git_remote_fetchspec",
          "location": {
            "file": "remote.h",
            "line": 97,
            "column": 33
          },
          "returns": {
            "type": "const git_refspec *",
            "comment": "a pointer to the fetch refspec or NULL if it doesn't exist"
          },
          "params": [
            {
              "name": "remote",
              "type": "git_remote *",
              "direction": "in",
              "comment": "the remote"
            }
          ],
          "comment": [
            "Get the fetch refspec"
          ],
          "group": "remote"
        },
        "git_remote_set_pushspec": {
          "kind": "function",
          "name": "git_remote_set_pushspec",
          "location": {
            "file": "remote.h",
            "line": 106,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error value"
          },
          "params": [
            {
              "name": "remote",
              "type": "git_remote *",
              "direction": "in",
              "comment": "the remote\n \\apram\n spec the new push refspec"
            },
            {
              "name": "spec",
              "type": "const char *"
            }
          ],
          "comment": [
            "Set the remote's push refspec"
          ],
          "group": "remote"
        },
        "git_remote_pushspec": {
          "kind": "function",
          "name": "git_remote_pushspec",
          "location": {
            "file": "remote.h",
            "line": 115,
            "column": 33
          },
          "returns": {
            "type": "const git_refspec *",
            "comment": "a pointer to the push refspec or NULL if it doesn't exist"
          },
          "params": [
            {
              "name": "remote",
              "type": "git_remote *",
              "direction": "in",
              "comment": "the remote"
            }
          ],
          "comment": [
            "Get the push refspec"
          ],
          "group": "remote"
        },
        "git_remote_connect": {
          "kind": "function",
          "name": "git_remote_connect",
          "location": {
            "file": "remote.h",
            "line": 128,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "remote",
              "type": "git_remote *",
              "direction": "in",
              "comment": "the remote to connect to"
            },
            {
              "name": "direction",
              "type": "int",
              "direction": "in",
              "comment": "whether you want to receive or send data"
            }
          ],
          "comment": [
            "Open a connection to a remote",
            "The transport is selected based on the URL. The direction argument\n is due to a limitation of the git protocol (over TCP or SSH) which\n starts up a specific binary which can only do the one or the other."
          ],
          "group": "remote"
        },
        "git_remote_ls": {
          "kind": "function",
          "name": "git_remote_ls",
          "location": {
            "file": "remote.h",
            "line": 140,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "remote",
              "type": "git_remote *",
              "direction": "in",
              "comment": "the remote"
            },
            {
              "name": "list_cb",
              "type": "git_headlist_cb",
              "referenceType": "int (*)(git_remote_head *, void *)"
            },
            {
              "name": "payload",
              "type": "void *"
            }
          ],
          "comment": [
            "Get a list of refs at the remote",
            "The remote (or more exactly its transport) must be connected. The\n memory belongs to the remote."
          ],
          "group": "remote"
        },
        "git_remote_download": {
          "kind": "function",
          "name": "git_remote_download",
          "location": {
            "file": "remote.h",
            "line": 155,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "remote",
              "type": "git_remote *",
              "direction": "in",
              "comment": "the remote to download from"
            },
            {
              "name": "bytes",
              "type": "git_off_t *"
            },
            {
              "name": "stats",
              "type": "git_indexer_stats *"
            }
          ],
          "comment": [
            "Download the packfile",
            "Negotiate what objects should be downloaded and download the\n packfile with those objects. The packfile is downloaded with a\n temporary filename, as it's final name is not known yet. If there\n was no packfile needed (all the objects were available locally),\n filename will be NULL and the function will return success."
          ],
          "group": "remote"
        },
        "git_remote_connected": {
          "kind": "function",
          "name": "git_remote_connected",
          "location": {
            "file": "remote.h",
            "line": 165,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "1 if it's connected, 0 otherwise."
          },
          "params": [
            {
              "name": "remote",
              "type": "git_remote *"
            }
          ],
          "comment": [
            "Check whether the remote is connected",
            "Check whether the remote's underlying transport is connected to the\n remote host."
          ],
          "group": "remote"
        },
        "git_remote_disconnect": {
          "kind": "function",
          "name": "git_remote_disconnect",
          "location": {
            "file": "remote.h",
            "line": 175,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "remote",
              "type": "git_remote *",
              "direction": "in",
              "comment": "the remote to disconnect from"
            }
          ],
          "comment": [
            "Disconnect from the remote",
            "Close the connection to the remote and free the underlying\n transport."
          ],
          "group": "remote"
        },
        "git_remote_free": {
          "kind": "function",
          "name": "git_remote_free",
          "location": {
            "file": "remote.h",
            "line": 185,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "remote",
              "type": "git_remote *",
              "direction": "in",
              "comment": "the remote to free"
            }
          ],
          "comment": [
            "Free the memory associated with a remote",
            "This also disconnects from the remote, if the connection\n has not been closed yet (using git_remote_disconnect)."
          ],
          "group": "remote"
        },
        "git_remote_update_tips": {
          "kind": "function",
          "name": "git_remote_update_tips",
          "location": {
            "file": "remote.h",
            "line": 193,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "remote",
              "type": "git_remote *",
              "direction": "in",
              "comment": "the remote to update"
            },
            {
              "name": "cb",
              "type": "int (*)(const char *, const git_oid *, const git_oid *)",
              "direction": "in",
              "comment": "callback to run on each ref update. 'a' is the old value, 'b' is then new value"
            }
          ],
          "comment": [
            "Update the tips to the new state"
          ],
          "group": "remote"
        },
        "git_remote_valid_url": {
          "kind": "function",
          "name": "git_remote_valid_url",
          "location": {
            "file": "remote.h",
            "line": 201,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "url",
              "type": "const char *"
            }
          ],
          "comment": [
            "Return whether a string is a valid remote URL"
          ],
          "group": "remote"
        },
        "git_remote_supported_url": {
          "kind": "function",
          "name": "git_remote_supported_url",
          "location": {
            "file": "remote.h",
            "line": 209,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "1 if the url is supported, 0 otherwise"
          },
          "params": [
            {
              "name": "url",
              "type": "const char *",
              "direction": "in",
              "comment": "the url to check"
            }
          ],
          "comment": [
            "Return whether the passed URL is supported by this version of the library."
          ],
          "group": "remote"
        },
        "git_remote_list": {
          "kind": "function",
          "name": "git_remote_list",
          "location": {
            "file": "remote.h",
            "line": 220,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "remotes_list",
              "type": "git_strarray *",
              "direction": "in",
              "comment": "a string array with the names of the remotes"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repository to query"
            }
          ],
          "comment": [
            "Get a list of the configured remotes for a repo",
            "The string array must be freed by the user."
          ],
          "group": "remote"
        },
        "git_remote_add": {
          "kind": "function",
          "name": "git_remote_add",
          "location": {
            "file": "remote.h",
            "line": 230,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "out",
              "type": "git_remote **",
              "direction": "in",
              "comment": "the resulting remote"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repository in which to create the remote"
            },
            {
              "name": "name",
              "type": "const char *",
              "direction": "in",
              "comment": "the remote's name"
            },
            {
              "name": "url",
              "type": "const char *",
              "direction": "in",
              "comment": "the remote's url"
            }
          ],
          "comment": [
            "Add a remote with the default fetch refspec to the repository's configuration"
          ],
          "group": "remote"
        },
        "git_remote": {
          "kind": "struct",
          "name": "git_remote",
          "referenceName": "struct git_remote",
          "opaque": true,
          "location": {
            "file": "types.h",
            "line": 170,
            "column": 27
          },
          "group": "remote",
          "parameterTo": [
            "git_remote_new",
            "git_remote_load",
            "git_remote_save",
            "git_remote_name",
            "git_remote_url",
            "git_remote_set_fetchspec",
            "git_remote_fetchspec",
            "git_remote_set_pushspec",
            "git_remote_pushspec",
            "git_remote_connect",
            "git_remote_ls",
            "git_remote_download",
            "git_remote_connected",
            "git_remote_disconnect",
            "git_remote_free",
            "git_remote_update_tips",
            "git_remote_add"
          ]
        }
      },
      "info": {
        "summary": "Git remote management functions"
      }
    },
    "repository": {
      "apis": {
        "git_repository_open": {
          "kind": "function",
          "name": "git_repository_open",
          "location": {
            "file": "repository.h",
            "line": 36,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "repository",
              "type": "git_repository **",
              "direction": "in",
              "comment": "pointer to the repo which will be opened"
            },
            {
              "name": "path",
              "type": "const char *",
              "direction": "in",
              "comment": "the path to the repository"
            }
          ],
          "comment": [
            "Open a git repository.",
            "The 'path' argument must point to either a git repository\n folder, or an existing work dir.",
            "The method will automatically detect if 'path' is a normal\n or bare repository or fail is 'path' is neither."
          ],
          "group": "repository"
        },
        "git_repository_discover": {
          "kind": "function",
          "name": "git_repository_discover",
          "location": {
            "file": "repository.h",
            "line": 66,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "repository_path",
              "type": "char *",
              "direction": "in",
              "comment": "The user allocated buffer which will\n contain the found path."
            },
            {
              "name": "size",
              "type": "size_t",
              "direction": "in",
              "comment": "repository_path size"
            },
            {
              "name": "start_path",
              "type": "const char *",
              "direction": "in",
              "comment": "The base path where the lookup starts."
            },
            {
              "name": "across_fs",
              "type": "int",
              "direction": "in",
              "comment": "If true, then the lookup will not stop when a\n filesystem device change is detected while exploring parent directories."
            },
            {
              "name": "ceiling_dirs",
              "type": "const char *",
              "direction": "in",
              "comment": "A GIT_PATH_LIST_SEPARATOR separated list of\n absolute symbolic link free paths. The lookup will stop when any\n of this paths is reached. Note that the lookup always performs on\n start_path no matter start_path appears in ceiling_dirs ceiling_dirs\n might be NULL (which is equivalent to an empty string)"
            }
          ],
          "comment": [
            "Look for a git repository and copy its path in the given buffer.\n The lookup start from base_path and walk across parent directories\n if nothing has been found. The lookup ends when the first repository\n is found, or when reaching a directory referenced in ceiling_dirs\n or when the filesystem changes (in case across_fs is true).",
            "The method will automatically detect if the repository is bare\n (if there is a repository)."
          ],
          "group": "repository"
        },
        "undefined": {
          "kind": "enum",
          "members": [
            {
              "name": "GIT_REPOSITORY_OPEN_NO_SEARCH",
              "value": "1"
            },
            {
              "name": "GIT_REPOSITORY_OPEN_CROSS_FS",
              "value": "2"
            }
          ],
          "location": {
            "file": "repository.h",
            "line": 73,
            "column": 1
          },
          "group": "repository"
        },
        "git_repository_open_ext": {
          "kind": "function",
          "name": "git_repository_open_ext",
          "location": {
            "file": "repository.h",
            "line": 81,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository **"
            },
            {
              "name": "start_path",
              "type": "const char *"
            },
            {
              "name": "flags",
              "type": "uint32_t"
            },
            {
              "name": "ceiling_dirs",
              "type": "const char *"
            }
          ],
          "comment": [
            "Find and open a repository with extended controls."
          ],
          "group": "repository"
        },
        "git_repository_free": {
          "kind": "function",
          "name": "git_repository_free",
          "location": {
            "file": "repository.h",
            "line": 98,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "repository handle to close. If NULL nothing occurs."
            }
          ],
          "comment": [
            "Free a previously allocated repository",
            "Note that after a repository is free'd, all the objects it has spawned\n will still exist until they are manually closed by the user\n with `git_object_free`, but accessing any of the attributes of\n an object without a backing repository will result in undefined\n behavior"
          ],
          "group": "repository"
        },
        "git_repository_init": {
          "kind": "function",
          "name": "git_repository_init",
          "location": {
            "file": "repository.h",
            "line": 114,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "repo_out",
              "type": "git_repository **",
              "direction": "in",
              "comment": "pointer to the repo which will be created or reinitialized"
            },
            {
              "name": "path",
              "type": "const char *",
              "direction": "in",
              "comment": "the path to the repository"
            },
            {
              "name": "is_bare",
              "type": "unsigned int",
              "direction": "in",
              "comment": "if true, a Git repository without a working directory is created\n\t\tat the pointed path. If false, provided path will be considered as the working\n\t\tdirectory into which the .git directory will be created."
            }
          ],
          "comment": [
            "Creates a new Git repository in the given folder.",
            "TODO:\n\t- Reinit the repository"
          ],
          "group": "repository"
        },
        "git_repository_head": {
          "kind": "function",
          "name": "git_repository_head",
          "location": {
            "file": "repository.h",
            "line": 124,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success; error code otherwise"
          },
          "params": [
            {
              "name": "head_out",
              "type": "git_reference **",
              "direction": "in",
              "comment": "pointer to the reference which will be retrieved"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "a repository object"
            }
          ],
          "comment": [
            "Retrieve and resolve the reference pointed at by HEAD."
          ],
          "group": "repository"
        },
        "git_repository_head_detached": {
          "kind": "function",
          "name": "git_repository_head_detached",
          "location": {
            "file": "repository.h",
            "line": 136,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "1 if HEAD is detached, 0 if i'ts not; error code if there\n was an error."
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "Repo to test"
            }
          ],
          "comment": [
            "Check if a repository's HEAD is detached",
            "A repository's HEAD is detached when it points directly to a commit\n instead of a branch."
          ],
          "group": "repository"
        },
        "git_repository_head_orphan": {
          "kind": "function",
          "name": "git_repository_head_orphan",
          "location": {
            "file": "repository.h",
            "line": 148,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "1 if the current branch is an orphan, 0 if it's not; error\n code if therewas an error"
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "Repo to test"
            }
          ],
          "comment": [
            "Check if the current branch is an orphan",
            "An orphan branch is one named from HEAD but which doesn't exist in\n the refs namespace, because it doesn't have any commit to point to."
          ],
          "group": "repository"
        },
        "git_repository_is_empty": {
          "kind": "function",
          "name": "git_repository_is_empty",
          "location": {
            "file": "repository.h",
            "line": 160,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "1 if the repository is empty, 0 if it isn't, error code\n if the repository is corrupted"
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "Repo to test"
            }
          ],
          "comment": [
            "Check if a repository is empty",
            "An empty repository has just been initialized and contains\n no commits."
          ],
          "group": "repository"
        },
        "git_repository_path": {
          "kind": "function",
          "name": "git_repository_path",
          "location": {
            "file": "repository.h",
            "line": 171,
            "column": 26
          },
          "returns": {
            "type": "const char *",
            "comment": "the path to the repository"
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "A repository object"
            }
          ],
          "comment": [
            "Get the path of this repository",
            "This is the path of the `.git` folder for normal repositories,\n or of the repository itself for bare repositories."
          ],
          "group": "repository"
        },
        "git_repository_workdir": {
          "kind": "function",
          "name": "git_repository_workdir",
          "location": {
            "file": "repository.h",
            "line": 182,
            "column": 26
          },
          "returns": {
            "type": "const char *",
            "comment": "the path to the working dir, if it exists"
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "A repository object"
            }
          ],
          "comment": [
            "Get the path of the working directory for this repository",
            "If the repository is bare, this function will always return\n NULL."
          ],
          "group": "repository"
        },
        "git_repository_set_workdir": {
          "kind": "function",
          "name": "git_repository_set_workdir",
          "location": {
            "file": "repository.h",
            "line": 199,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0, or an error code"
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "A repository object"
            },
            {
              "name": "workdir",
              "type": "const char *",
              "direction": "in",
              "comment": "The path to a working directory"
            }
          ],
          "comment": [
            "Set the path to the working directory for this repository",
            "The working directory doesn't need to be the same one\n that contains the `.git` folder for this repository.",
            "If this repository is bare, setting its working directory\n will turn it into a normal repository, capable of performing\n all the common workdir operations (checkout, status, index\n manipulation, etc)."
          ],
          "group": "repository"
        },
        "git_repository_is_bare": {
          "kind": "function",
          "name": "git_repository_is_bare",
          "location": {
            "file": "repository.h",
            "line": 207,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "1 if the repository is bare, 0 otherwise."
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "Repo to test"
            }
          ],
          "comment": [
            "Check if a repository is bare"
          ],
          "group": "repository"
        },
        "git_repository_config": {
          "kind": "function",
          "name": "git_repository_config",
          "location": {
            "file": "repository.h",
            "line": 223,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0, or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_config **",
              "direction": "in",
              "comment": "Pointer to store the loaded config file"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "A repository object"
            }
          ],
          "comment": [
            "Get the configuration file for this repository.",
            "If a configuration file has not been set, the default\n config set for the repository will be returned, including\n global and system configurations (if they are available).",
            "The configuration file must be freed once it's no longer\n being used by the user."
          ],
          "group": "repository"
        },
        "git_repository_set_config": {
          "kind": "function",
          "name": "git_repository_set_config",
          "location": {
            "file": "repository.h",
            "line": 238,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "A repository object"
            },
            {
              "name": "config",
              "type": "git_config *",
              "direction": "in",
              "comment": "A Config object"
            }
          ],
          "comment": [
            "Set the configuration file for this repository",
            "This configuration file will be used for all configuration\n queries involving this repository.",
            "The repository will keep a reference to the config file;\n the user must still free the config after setting it\n to the repository, or it will leak."
          ],
          "group": "repository"
        },
        "git_repository_odb": {
          "kind": "function",
          "name": "git_repository_odb",
          "location": {
            "file": "repository.h",
            "line": 254,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0, or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_odb **",
              "direction": "in",
              "comment": "Pointer to store the loaded ODB"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "A repository object"
            }
          ],
          "comment": [
            "Get the Object Database for this repository.",
            "If a custom ODB has not been set, the default\n database for the repository will be returned (the one\n located in `.git/objects`).",
            "The ODB must be freed once it's no longer being used by\n the user."
          ],
          "group": "repository"
        },
        "git_repository_set_odb": {
          "kind": "function",
          "name": "git_repository_set_odb",
          "location": {
            "file": "repository.h",
            "line": 269,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "A repository object"
            },
            {
              "name": "odb",
              "type": "git_odb *",
              "direction": "in",
              "comment": "An ODB object"
            }
          ],
          "comment": [
            "Set the Object Database for this repository",
            "The ODB will be used for all object-related operations\n involving this repository.",
            "The repository will keep a reference to the ODB; the user\n must still free the ODB object after setting it to the\n repository, or it will leak."
          ],
          "group": "repository"
        },
        "git_repository_index": {
          "kind": "function",
          "name": "git_repository_index",
          "location": {
            "file": "repository.h",
            "line": 285,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0, or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_index **",
              "direction": "in",
              "comment": "Pointer to store the loaded index"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "A repository object"
            }
          ],
          "comment": [
            "Get the Index file for this repository.",
            "If a custom index has not been set, the default\n index for the repository will be returned (the one\n located in `.git/index`).",
            "The index must be freed once it's no longer being used by\n the user."
          ],
          "group": "repository"
        },
        "git_repository_set_index": {
          "kind": "function",
          "name": "git_repository_set_index",
          "location": {
            "file": "repository.h",
            "line": 300,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "A repository object"
            },
            {
              "name": "index",
              "type": "git_index *",
              "direction": "in",
              "comment": "An index object"
            }
          ],
          "comment": [
            "Set the index file for this repository",
            "This index will be used for all index-related operations\n involving this repository.",
            "The repository will keep a reference to the index file;\n the user must still free the index after setting it\n to the repository, or it will leak."
          ],
          "group": "repository"
        },
        "git_repository": {
          "kind": "struct",
          "name": "git_repository",
          "referenceName": "struct git_repository",
          "opaque": true,
          "comment": [
            "Representation of an existing git repository,\n including all its object contents"
          ],
          "location": {
            "file": "types.h",
            "line": 93,
            "column": 31
          },
          "group": "repository",
          "returnedBy": [
            "git_object_owner",
            "git_reference_owner",
            "git_revwalk_repository"
          ],
          "parameterTo": [
            "git_attr_get",
            "git_attr_get_many",
            "git_attr_foreach",
            "git_attr_cache_flush",
            "git_attr_add_macro",
            "git_blob_lookup",
            "git_blob_lookup_prefix",
            "git_blob_create_fromfile",
            "git_blob_create_fromdisk",
            "git_blob_create_frombuffer",
            "git_branch_create",
            "git_branch_delete",
            "git_branch_list",
            "git_branch_move",
            "git_commit_lookup",
            "git_commit_lookup_prefix",
            "git_commit_create",
            "git_commit_create_v",
            "git_diff_tree_to_tree",
            "git_diff_index_to_tree",
            "git_diff_workdir_to_index",
            "git_diff_workdir_to_tree",
            "git_merge_base",
            "git_note_read",
            "git_note_create",
            "git_note_remove",
            "git_note_default_ref",
            "git_note_foreach",
            "git_object_lookup",
            "git_object_lookup_prefix",
            "git_reference_lookup",
            "git_reference_name_to_oid",
            "git_reference_create_symbolic",
            "git_reference_create_oid",
            "git_reference_packall",
            "git_reference_list",
            "git_reference_foreach",
            "git_remote_new",
            "git_remote_load",
            "git_remote_list",
            "git_remote_add",
            "git_repository_open",
            "git_repository_open_ext",
            "git_repository_free",
            "git_repository_init",
            "git_repository_head",
            "git_repository_head_detached",
            "git_repository_head_orphan",
            "git_repository_is_empty",
            "git_repository_path",
            "git_repository_workdir",
            "git_repository_set_workdir",
            "git_repository_is_bare",
            "git_repository_config",
            "git_repository_set_config",
            "git_repository_odb",
            "git_repository_set_odb",
            "git_repository_index",
            "git_repository_set_index",
            "git_revwalk_new",
            "git_status_foreach",
            "git_status_foreach_ext",
            "git_status_file",
            "git_status_should_ignore",
            "git_submodule_foreach",
            "git_submodule_lookup",
            "git_tag_lookup",
            "git_tag_lookup_prefix",
            "git_tag_create",
            "git_tag_create_frombuffer",
            "git_tag_create_lightweight",
            "git_tag_delete",
            "git_tag_list",
            "git_tag_list_match",
            "git_tree_lookup",
            "git_tree_lookup_prefix",
            "git_tree_entry_to_object",
            "git_treebuilder_write"
          ]
        }
      },
      "info": {
        "summary": "Git repository management routines"
      }
    },
    "revwalk": {
      "apis": {
        "GIT_SORT_NONE": {
          "kind": "macro",
          "name": "GIT_SORT_NONE",
          "location": {
            "file": "revwalk.h",
            "line": 29,
            "column": 9
          },
          "value": "(0)",
          "comment": "Sort the repository contents in no particular ordering; this sorting is arbitrary, implementation-specific and subject to change at any time. This is the default sorting for new walkers.",
          "group": "revwalk"
        },
        "GIT_SORT_TOPOLOGICAL": {
          "kind": "macro",
          "name": "GIT_SORT_TOPOLOGICAL",
          "location": {
            "file": "revwalk.h",
            "line": 36,
            "column": 9
          },
          "value": "(1 << 0)",
          "comment": "Sort the repository contents in topological order (parents before children); this sorting mode can be combined with time sorting.",
          "group": "revwalk"
        },
        "GIT_SORT_TIME": {
          "kind": "macro",
          "name": "GIT_SORT_TIME",
          "location": {
            "file": "revwalk.h",
            "line": 43,
            "column": 9
          },
          "value": "(1 << 1)",
          "comment": "Sort the repository contents by commit time; this sorting mode can be combined with topological sorting.",
          "group": "revwalk"
        },
        "GIT_SORT_REVERSE": {
          "kind": "macro",
          "name": "GIT_SORT_REVERSE",
          "location": {
            "file": "revwalk.h",
            "line": 50,
            "column": 9
          },
          "value": "(1 << 2)",
          "comment": "Iterate through the repository contents in reverse order; this sorting mode can be combined with any of the above.",
          "group": "revwalk"
        },
        "git_revwalk_new": {
          "kind": "function",
          "name": "git_revwalk_new",
          "location": {
            "file": "revwalk.h",
            "line": 70,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "walker",
              "type": "git_revwalk **",
              "direction": "in",
              "comment": "pointer to the new revision walker"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repo to walk through"
            }
          ],
          "comment": [
            "Allocate a new revision walker to iterate through a repo.",
            "This revision walker uses a custom memory pool and an internal\n commit cache, so it is relatively expensive to allocate.",
            "For maximum performance, this revision walker should be\n reused for different walks.",
            "This revision walker is *not* thread safe: it may only be\n used to walk a repository on a single thread; however,\n it is possible to have several revision walkers in\n several different threads walking the same repository."
          ],
          "group": "revwalk"
        },
        "git_revwalk_reset": {
          "kind": "function",
          "name": "git_revwalk_reset",
          "location": {
            "file": "revwalk.h",
            "line": 85,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "walker",
              "type": "git_revwalk *",
              "direction": "in",
              "comment": "handle to reset."
            }
          ],
          "comment": [
            "Reset the revision walker for reuse.",
            "This will clear all the pushed and hidden commits, and\n leave the walker in a blank state (just like at\n creation) ready to receive new commit pushes and\n start a new walk.",
            "The revision walk is automatically reset when a walk\n is over."
          ],
          "group": "revwalk"
        },
        "git_revwalk_push": {
          "kind": "function",
          "name": "git_revwalk_push",
          "location": {
            "file": "revwalk.h",
            "line": 102,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "walk",
              "type": "git_revwalk *",
              "direction": "in",
              "comment": "the walker being used for the traversal."
            },
            {
              "name": "oid",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "the oid of the commit to start from."
            }
          ],
          "comment": [
            "Mark a commit to start traversal from.",
            "The given OID must belong to a commit on the walked\n repository.",
            "The given commit will be used as one of the roots\n when starting the revision walk. At least one commit\n must be pushed the repository before a walk can\n be started."
          ],
          "group": "revwalk"
        },
        "git_revwalk_push_glob": {
          "kind": "function",
          "name": "git_revwalk_push_glob",
          "location": {
            "file": "revwalk.h",
            "line": 117,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "walk",
              "type": "git_revwalk *",
              "direction": "in",
              "comment": "the walker being used for the traversal"
            },
            {
              "name": "glob",
              "type": "const char *",
              "direction": "in",
              "comment": "the glob pattern references should match"
            }
          ],
          "comment": [
            "Push matching references",
            "The OIDs pinted to by the references that match the given glob\n pattern will be pushed to the revision walker.",
            "A leading 'refs/' is implied it not present as well as a trailing\n '/ *' if the glob lacks '?', '*' or '['."
          ],
          "group": "revwalk"
        },
        "git_revwalk_push_head": {
          "kind": "function",
          "name": "git_revwalk_push_head",
          "location": {
            "file": "revwalk.h",
            "line": 125,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "walk",
              "type": "git_revwalk *",
              "direction": "in",
              "comment": "the walker being used for the traversal"
            }
          ],
          "comment": [
            "Push the repository's HEAD"
          ],
          "group": "revwalk"
        },
        "git_revwalk_hide": {
          "kind": "function",
          "name": "git_revwalk_hide",
          "location": {
            "file": "revwalk.h",
            "line": 140,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "walk",
              "type": "git_revwalk *",
              "direction": "in",
              "comment": "the walker being used for the traversal."
            },
            {
              "name": "oid",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "the oid of commit that will be ignored during the traversal"
            }
          ],
          "comment": [
            "Mark a commit (and its ancestors) uninteresting for the output.",
            "The given OID must belong to a commit on the walked\n repository.",
            "The resolved commit and all its parents will be hidden from the\n output on the revision walk."
          ],
          "group": "revwalk"
        },
        "git_revwalk_hide_glob": {
          "kind": "function",
          "name": "git_revwalk_hide_glob",
          "location": {
            "file": "revwalk.h",
            "line": 156,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "walk",
              "type": "git_revwalk *",
              "direction": "in",
              "comment": "the walker being used for the traversal"
            },
            {
              "name": "glob",
              "type": "const char *",
              "direction": "in",
              "comment": "the glob pattern references should match"
            }
          ],
          "comment": [
            "Hide matching references.",
            "The OIDs pinted to by the references that match the given glob\n pattern and their ancestors will be hidden from the output on the\n revision walk.",
            "A leading 'refs/' is implied it not present as well as a trailing\n '/ *' if the glob lacks '?', '*' or '['."
          ],
          "group": "revwalk"
        },
        "git_revwalk_hide_head": {
          "kind": "function",
          "name": "git_revwalk_hide_head",
          "location": {
            "file": "revwalk.h",
            "line": 164,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "walk",
              "type": "git_revwalk *",
              "direction": "in",
              "comment": "the walker being used for the traversal"
            }
          ],
          "comment": [
            "Hide the repository's HEAD"
          ],
          "group": "revwalk"
        },
        "git_revwalk_push_ref": {
          "kind": "function",
          "name": "git_revwalk_push_ref",
          "location": {
            "file": "revwalk.h",
            "line": 175,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "walk",
              "type": "git_revwalk *",
              "direction": "in",
              "comment": "the walker being used for the traversal"
            },
            {
              "name": "refname",
              "type": "const char *",
              "direction": "in",
              "comment": "the referece to push"
            }
          ],
          "comment": [
            "Push the OID pointed to by a reference",
            "The reference must point to a commit."
          ],
          "group": "revwalk"
        },
        "git_revwalk_hide_ref": {
          "kind": "function",
          "name": "git_revwalk_hide_ref",
          "location": {
            "file": "revwalk.h",
            "line": 186,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "walk",
              "type": "git_revwalk *",
              "direction": "in",
              "comment": "the walker being used for the traversal"
            },
            {
              "name": "refname",
              "type": "const char *",
              "direction": "in",
              "comment": "the referece to hide"
            }
          ],
          "comment": [
            "Hide the OID pointed to by a reference",
            "The reference must point to a commit."
          ],
          "group": "revwalk"
        },
        "git_revwalk_next": {
          "kind": "function",
          "name": "git_revwalk_next",
          "location": {
            "file": "revwalk.h",
            "line": 206,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 if the next commit was found;\n\tGIT_REVWALKOVER if there are no commits left to iterate"
          },
          "params": [
            {
              "name": "oid",
              "type": "git_oid *",
              "direction": "in",
              "comment": "Pointer where to store the oid of the next commit"
            },
            {
              "name": "walk",
              "type": "git_revwalk *",
              "direction": "in",
              "comment": "the walker to pop the commit from."
            }
          ],
          "comment": [
            "Get the next commit from the revision walk.",
            "The initial call to this method is *not* blocking when\n iterating through a repo with a time-sorting mode.",
            "Iterating with Topological or inverted modes makes the initial\n call blocking to preprocess the commit list, but this block should be\n mostly unnoticeable on most repositories (topological preprocessing\n times at 0.3s on the git.git repo).",
            "The revision walker is reset when the walk is over."
          ],
          "group": "revwalk"
        },
        "git_revwalk_sorting": {
          "kind": "function",
          "name": "git_revwalk_sorting",
          "location": {
            "file": "revwalk.h",
            "line": 217,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "walk",
              "type": "git_revwalk *",
              "direction": "in",
              "comment": "the walker being used for the traversal."
            },
            {
              "name": "sort_mode",
              "type": "unsigned int",
              "direction": "in",
              "comment": "combination of GIT_SORT_XXX flags"
            }
          ],
          "comment": [
            "Change the sorting mode when iterating through the\n repository's contents.",
            "Changing the sorting mode resets the walker."
          ],
          "group": "revwalk"
        },
        "git_revwalk_free": {
          "kind": "function",
          "name": "git_revwalk_free",
          "location": {
            "file": "revwalk.h",
            "line": 224,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "walk",
              "type": "git_revwalk *",
              "direction": "in",
              "comment": "traversal handle to close. If NULL nothing occurs."
            }
          ],
          "comment": [
            "Free a revision walker previously allocated."
          ],
          "group": "revwalk"
        },
        "git_revwalk_repository": {
          "kind": "function",
          "name": "git_revwalk_repository",
          "location": {
            "file": "revwalk.h",
            "line": 233,
            "column": 30
          },
          "returns": {
            "type": "git_repository *",
            "comment": "the repository being walked"
          },
          "params": [
            {
              "name": "walk",
              "type": "git_revwalk *",
              "direction": "in",
              "comment": "the revision walker"
            }
          ],
          "comment": [
            "Return the repository on which this walker\n is operating."
          ],
          "group": "revwalk"
        },
        "git_revwalk": {
          "kind": "struct",
          "name": "git_revwalk",
          "referenceName": "struct git_revwalk",
          "opaque": true,
          "comment": [
            "Representation of an in-progress walk through the commits in a repo"
          ],
          "location": {
            "file": "types.h",
            "line": 99,
            "column": 28
          },
          "group": "revwalk",
          "parameterTo": [
            "git_revwalk_new",
            "git_revwalk_reset",
            "git_revwalk_push",
            "git_revwalk_push_glob",
            "git_revwalk_push_head",
            "git_revwalk_hide",
            "git_revwalk_hide_glob",
            "git_revwalk_hide_head",
            "git_revwalk_push_ref",
            "git_revwalk_hide_ref",
            "git_revwalk_next",
            "git_revwalk_sorting",
            "git_revwalk_free",
            "git_revwalk_repository"
          ]
        }
      },
      "info": {
        "summary": "Git revision traversal routines"
      }
    },
    "signature": {
      "apis": {
        "git_signature_new": {
          "kind": "function",
          "name": "git_signature_new",
          "location": {
            "file": "signature.h",
            "line": 33,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "sig_out",
              "type": "git_signature **",
              "direction": "in",
              "comment": "new signature, in case of error NULL"
            },
            {
              "name": "name",
              "type": "const char *",
              "direction": "in",
              "comment": "name of the person"
            },
            {
              "name": "email",
              "type": "const char *",
              "direction": "in",
              "comment": "email of the person"
            },
            {
              "name": "time",
              "type": "git_time_t",
              "direction": "in",
              "comment": "time when the action happened",
              "referenceType": "int64_t"
            },
            {
              "name": "offset",
              "type": "int",
              "direction": "in",
              "comment": "timezone offset in minutes for the time"
            }
          ],
          "comment": [
            "Create a new action signature. The signature must be freed\n manually or using git_signature_free"
          ],
          "group": "signature"
        },
        "git_signature_now": {
          "kind": "function",
          "name": "git_signature_now",
          "location": {
            "file": "signature.h",
            "line": 44,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "sig_out",
              "type": "git_signature **",
              "direction": "in",
              "comment": "new signature, in case of error NULL"
            },
            {
              "name": "name",
              "type": "const char *",
              "direction": "in",
              "comment": "name of the person"
            },
            {
              "name": "email",
              "type": "const char *",
              "direction": "in",
              "comment": "email of the person"
            }
          ],
          "comment": [
            "Create a new action signature with a timestamp of 'now'. The\n signature must be freed manually or using git_signature_free"
          ],
          "group": "signature"
        },
        "git_signature_dup": {
          "kind": "function",
          "name": "git_signature_dup",
          "location": {
            "file": "signature.h",
            "line": 54,
            "column": 29
          },
          "returns": {
            "type": "git_signature *",
            "comment": "a copy of sig, NULL on out of memory"
          },
          "params": [
            {
              "name": "sig",
              "type": "const git_signature *",
              "direction": "in",
              "comment": "signature to duplicated"
            }
          ],
          "comment": [
            "Create a copy of an existing signature.",
            "All internal strings are also duplicated."
          ],
          "group": "signature"
        },
        "git_signature_free": {
          "kind": "function",
          "name": "git_signature_free",
          "location": {
            "file": "signature.h",
            "line": 61,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "sig",
              "type": "git_signature *",
              "direction": "in",
              "comment": "signature to free"
            }
          ],
          "comment": [
            "Free an existing signature"
          ],
          "group": "signature"
        },
        "git_signature": {
          "kind": "struct",
          "name": "git_signature",
          "referenceName": "git_signature",
          "comment": [
            "An action signature (e.g. for committers, taggers, etc)"
          ],
          "members": [
            {
              "name": "name",
              "type": "char *"
            },
            {
              "name": "email",
              "type": "char *",
              "comment": [
                "full name of the author"
              ]
            },
            {
              "name": "when",
              "type": "git_time",
              "comment": [
                "email of the author"
              ],
              "referenceType": "struct git_time"
            }
          ],
          "location": {
            "file": "types.h",
            "line": 144,
            "column": 16
          },
          "group": "signature",
          "returnedBy": [
            "git_commit_committer",
            "git_commit_author",
            "git_reflog_entry_committer",
            "git_signature_dup",
            "git_tag_tagger"
          ],
          "parameterTo": [
            "git_commit_create",
            "git_commit_create_v",
            "git_note_create",
            "git_note_remove",
            "git_reflog_write",
            "git_signature_new",
            "git_signature_now",
            "git_signature_dup",
            "git_signature_free",
            "git_tag_create"
          ]
        }
      },
      "info": {
        "summary": "Git signature creation"
      }
    },
    "status": {
      "apis": {
        "undefined": {
          "kind": "enum",
          "members": [
            {
              "name": "GIT_STATUS_OPT_INCLUDE_UNTRACKED",
              "value": "1"
            },
            {
              "name": "GIT_STATUS_OPT_INCLUDE_IGNORED",
              "value": "2"
            },
            {
              "name": "GIT_STATUS_OPT_INCLUDE_UNMODIFIED",
              "value": "4"
            },
            {
              "name": "GIT_STATUS_OPT_EXCLUDE_SUBMODULED",
              "value": "8"
            },
            {
              "name": "GIT_STATUS_OPT_RECURSE_UNTRACKED_DIRS",
              "value": "16"
            }
          ],
          "comment": [
            "Flags to control status callbacks",
            "- GIT_STATUS_OPT_INCLUDE_UNTRACKED says that callbacks should\n   be made on untracked files.  These will only be made if the\n   workdir files are included in the status \"show\" option.\n - GIT_STATUS_OPT_INCLUDE_IGNORED says that ignored files should\n   get callbacks.  Again, these callbacks will only be made if\n   the workdir files are included in the status \"show\" option.\n   Right now, there is no option to include all files in\n   directories that are ignored completely.\n - GIT_STATUS_OPT_INCLUDE_UNMODIFIED indicates that callback\n   should be made even on unmodified files.\n - GIT_STATUS_OPT_EXCLUDE_SUBMODULES indicates that directories\n   which appear to be submodules should just be skipped over.\n - GIT_STATUS_OPT_RECURSE_UNTRACKED_DIRS indicates that the\n   contents of untracked directories should be included in the\n   status.  Normally if an entire directory is new, then just\n   the top-level directory will be included (with a trailing\n   slash on the entry name).  Given this flag, the directory\n   itself will not be included, but all the files in it will."
          ],
          "location": {
            "file": "status.h",
            "line": 101,
            "column": 1
          },
          "group": "status"
        },
        "git_status_foreach": {
          "kind": "function",
          "name": "git_status_foreach",
          "location": {
            "file": "status.h",
            "line": 47,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success or the return value of the callback that was non-zero"
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "a repository object"
            },
            {
              "name": "callback",
              "type": "int (*)(const char *, unsigned int, void *)",
              "direction": "in",
              "comment": "the function to call on each file"
            },
            {
              "name": "payload",
              "type": "void *"
            }
          ],
          "comment": [
            "Gather file statuses and run a callback for each one.",
            "The callback is passed the path of the file, the status and the data\n pointer passed to this function. If the callback returns something other\n than 0, this function will return that value."
          ],
          "group": "status"
        },
        "git_status_show_t": {
          "kind": "enum",
          "name": "git_status_show_t",
          "referenceName": "git_status_show_t",
          "members": [
            {
              "name": "GIT_STATUS_SHOW_INDEX_AND_WORKDIR",
              "value": "0"
            },
            {
              "name": "GIT_STATUS_SHOW_INDEX_ONLY",
              "value": "1"
            },
            {
              "name": "GIT_STATUS_SHOW_WORKDIR_ONLY",
              "value": "2"
            },
            {
              "name": "GIT_STATUS_SHOW_INDEX_THEN_WORKDIR",
              "value": "3"
            }
          ],
          "comment": [
            "Select the files on which to report status.",
            "- GIT_STATUS_SHOW_INDEX_AND_WORKDIR is the default.  This is the\n   rough equivalent of `git status --porcelain` where each file\n   will receive a callback indicating its status in the index and\n   in the workdir.\n - GIT_STATUS_SHOW_INDEX_ONLY will only make callbacks for index\n   side of status.  The status of the index contents relative to\n   the HEAD will be given.\n - GIT_STATUS_SHOW_WORKDIR_ONLY will only make callbacks for the\n   workdir side of status, reporting the status of workdir content\n   relative to the index.\n - GIT_STATUS_SHOW_INDEX_THEN_WORKDIR behaves like index-only\n   followed by workdir-only, causing two callbacks to be issued\n   per file (first index then workdir).  This is slightly more\n   efficient than making separate calls.  This makes it easier to\n   emulate the output of a plain `git status`."
          ],
          "location": {
            "file": "status.h",
            "line": 71,
            "column": 9
          },
          "group": "status"
        },
        "git_status_options": {
          "kind": "struct",
          "name": "git_status_options",
          "referenceName": "git_status_options",
          "comment": [
            "Options to control how callbacks will be made by\n `git_status_foreach_ext()`."
          ],
          "members": [
            {
              "name": "show",
              "type": "git_status_show_t",
              "referenceType": "enum git_status_show_t"
            },
            {
              "name": "flags",
              "type": "unsigned int"
            },
            {
              "name": "pathspec",
              "type": "git_strarray",
              "referenceType": "struct git_strarray"
            }
          ],
          "location": {
            "file": "status.h",
            "line": 113,
            "column": 9
          },
          "group": "status",
          "parameterTo": [
            "git_status_foreach_ext"
          ]
        },
        "git_status_foreach_ext": {
          "kind": "function",
          "name": "git_status_foreach_ext",
          "location": {
            "file": "status.h",
            "line": 122,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *"
            },
            {
              "name": "opts",
              "type": "const git_status_options *"
            },
            {
              "name": "callback",
              "type": "int (*)(const char *, unsigned int, void *)"
            },
            {
              "name": "payload",
              "type": "void *"
            }
          ],
          "comment": [
            "Gather file status information and run callbacks as requested."
          ],
          "group": "status"
        },
        "git_status_file": {
          "kind": "function",
          "name": "git_status_file",
          "location": {
            "file": "status.h",
            "line": 138,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "GIT_EINVALIDPATH when `path` points at a folder, GIT_ENOTFOUND when\n\t\tthe file doesn't exist in any of HEAD, the index or the worktree,\n\t\t0 otherwise"
          },
          "params": [
            {
              "name": "status_flags",
              "type": "unsigned int *",
              "direction": "in",
              "comment": "the status value"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "a repository object"
            },
            {
              "name": "path",
              "type": "const char *",
              "direction": "in",
              "comment": "the file to retrieve status for, rooted at the repo's workdir"
            }
          ],
          "comment": [
            "Get file status for a single file"
          ],
          "group": "status"
        },
        "git_status_should_ignore": {
          "kind": "function",
          "name": "git_status_should_ignore",
          "location": {
            "file": "status.h",
            "line": 157,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 if ignore rules could be processed for the file (regardless\n         of whether it exists or not), or an error \n<\n 0 if they could not."
          },
          "params": [
            {
              "name": "ignored",
              "type": "int *",
              "direction": "in",
              "comment": "boolean returning 0 if the file is not ignored, 1 if it is"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "a repository object"
            },
            {
              "name": "path",
              "type": "const char *",
              "direction": "in",
              "comment": "the file to check ignores for, rooted at the repo's workdir."
            }
          ],
          "comment": [
            "Test if the ignore rules apply to a given file.",
            "This function simply checks the ignore rules to see if they would apply\n to the given file.  Unlike git_status_file(), this indicates if the file\n would be ignored regardless of whether the file is already in the index\n or in the repository."
          ],
          "group": "status"
        }
      },
      "info": {
        "summary": "Git file status routines"
      }
    },
    "submodule": {
      "apis": {
        "git_submodule_update_t": {
          "kind": "enum",
          "name": "git_submodule_update_t",
          "referenceName": "git_submodule_update_t",
          "members": [
            {
              "name": "GIT_SUBMODULE_UPDATE_CHECKOUT",
              "value": "0"
            },
            {
              "name": "GIT_SUBMODULE_UPDATE_REBASE",
              "value": "1"
            },
            {
              "name": "GIT_SUBMODULE_UPDATE_MERGE",
              "value": "2"
            }
          ],
          "location": {
            "file": "submodule.h",
            "line": 23,
            "column": 9
          },
          "group": "submodule"
        },
        "git_submodule_ignore_t": {
          "kind": "enum",
          "name": "git_submodule_ignore_t",
          "referenceName": "git_submodule_ignore_t",
          "members": [
            {
              "name": "GIT_SUBMODULE_IGNORE_ALL",
              "value": "0"
            },
            {
              "name": "GIT_SUBMODULE_IGNORE_DIRTY",
              "value": "1"
            },
            {
              "name": "GIT_SUBMODULE_IGNORE_UNTRACKED",
              "value": "2"
            },
            {
              "name": "GIT_SUBMODULE_IGNORE_NONE",
              "value": "3"
            }
          ],
          "location": {
            "file": "submodule.h",
            "line": 29,
            "column": 9
          },
          "group": "submodule"
        },
        "git_submodule": {
          "kind": "struct",
          "name": "git_submodule",
          "referenceName": "git_submodule",
          "comment": [
            "Description of submodule",
            "This record describes a submodule found in a repository.  There\n should be an entry for every submodule found in the HEAD and for\n every submodule described in .gitmodules.  The fields are as follows:",
            "- `name` is the name of the submodule from .gitmodules.\n - `path` is the path to the submodule from the repo working directory.\n   It is almost always the same as `name`.\n - `url` is the url for the submodule.\n - `oid` is the HEAD SHA1 for the submodule.\n - `update` is a value from above - see gitmodules(5) update.\n - `ignore` is a value from above - see gitmodules(5) ignore.\n - `fetch_recurse` is 0 or 1 - see gitmodules(5) fetchRecurseSubmodules.\n - `refcount` is for internal use.",
            "If the submodule has been added to .gitmodules but not yet git added,\n then the `oid` will be zero.  If the submodule has been deleted, but\n the delete has not been committed yet, then the `oid` will be set, but\n the `url` will be NULL."
          ],
          "members": [
            {
              "name": "name",
              "type": "char *"
            },
            {
              "name": "path",
              "type": "char *"
            },
            {
              "name": "url",
              "type": "char *"
            },
            {
              "name": "oid",
              "type": "git_oid",
              "referenceType": "struct _git_oid"
            },
            {
              "name": "update",
              "type": "git_submodule_update_t",
              "referenceType": "enum git_submodule_update_t"
            },
            {
              "name": "ignore",
              "type": "git_submodule_ignore_t",
              "referenceType": "enum git_submodule_ignore_t"
            },
            {
              "name": "fetch_recurse",
              "type": "int"
            },
            {
              "name": "refcount",
              "type": "int"
            }
          ],
          "location": {
            "file": "submodule.h",
            "line": 58,
            "column": 9
          },
          "group": "submodule",
          "parameterTo": [
            "git_submodule_lookup"
          ]
        },
        "git_submodule_foreach": {
          "kind": "function",
          "name": "git_submodule_foreach",
          "location": {
            "file": "submodule.h",
            "line": 78,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, -1 on error, or non-zero return value of callback"
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "The repository"
            },
            {
              "name": "callback",
              "type": "int (*)(const char *, void *)",
              "direction": "in",
              "comment": "Function to be called with the name of each submodule.\n        Return a non-zero value to terminate the iteration."
            },
            {
              "name": "payload",
              "type": "void *",
              "direction": "in",
              "comment": "Extra data to pass to callback"
            }
          ],
          "comment": [
            "Iterate over all submodules of a repository."
          ],
          "group": "submodule"
        },
        "git_submodule_lookup": {
          "kind": "function",
          "name": "git_submodule_lookup",
          "location": {
            "file": "submodule.h",
            "line": 96,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, GIT_ENOTFOUND if submodule does not exist, -1 on error"
          },
          "params": [
            {
              "name": "submodule",
              "type": "git_submodule **",
              "direction": "in",
              "comment": "Pointer to submodule description object pointer.."
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "The repository."
            },
            {
              "name": "name",
              "type": "const char *",
              "direction": "in",
              "comment": "The name of the submodule.  Trailing slashes will be ignored."
            }
          ],
          "comment": [
            "Lookup submodule information by name or path.",
            "Given either the submodule name or path (they are ususally the same),\n this returns a structure describing the submodule.  If the submodule\n does not exist, this will return GIT_ENOTFOUND and set the submodule\n pointer to NULL."
          ],
          "group": "submodule"
        }
      },
      "info": {
        "summary": "Git submodule management utilities"
      }
    },
    "tag": {
      "apis": {
        "git_tag_lookup": {
          "kind": "function",
          "name": "git_tag_lookup",
          "location": {
            "file": "tag.h",
            "line": 32,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "tag",
              "type": "git_tag **",
              "direction": "in",
              "comment": "pointer to the looked up tag"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repo to use when locating the tag."
            },
            {
              "name": "id",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "identity of the tag to locate."
            }
          ],
          "comment": [
            "Lookup a tag object from the repository."
          ],
          "group": "tag"
        },
        "git_tag_lookup_prefix": {
          "kind": "function",
          "name": "git_tag_lookup_prefix",
          "location": {
            "file": "tag.h",
            "line": 49,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "tag",
              "type": "git_tag **",
              "direction": "in",
              "comment": "pointer to the looked up tag"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repo to use when locating the tag."
            },
            {
              "name": "id",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "identity of the tag to locate."
            },
            {
              "name": "len",
              "type": "unsigned int",
              "direction": "in",
              "comment": "the length of the short identifier"
            }
          ],
          "comment": [
            "Lookup a tag object from the repository,\n given a prefix of its identifier (short id)."
          ],
          "see": [
            "git_object_lookup_prefix"
          ],
          "group": "tag"
        },
        "git_tag_free": {
          "kind": "function",
          "name": "git_tag_free",
          "location": {
            "file": "tag.h",
            "line": 66,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "tag",
              "type": "git_tag *",
              "direction": "in",
              "comment": "the tag to close"
            }
          ],
          "comment": [
            "Close an open tag",
            "This is a wrapper around git_object_free()",
            "IMPORTANT:\n It *is* necessary to call this method when you stop\n using a tag. Failure to do so will cause a memory leak."
          ],
          "group": "tag"
        },
        "git_tag_id": {
          "kind": "function",
          "name": "git_tag_id",
          "location": {
            "file": "tag.h",
            "line": 78,
            "column": 29
          },
          "returns": {
            "type": "const git_oid *",
            "comment": "object identity for the tag."
          },
          "params": [
            {
              "name": "tag",
              "type": "git_tag *",
              "direction": "in",
              "comment": "a previously loaded tag."
            }
          ],
          "comment": [
            "Get the id of a tag."
          ],
          "group": "tag"
        },
        "git_tag_target": {
          "kind": "function",
          "name": "git_tag_target",
          "location": {
            "file": "tag.h",
            "line": 90,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "target",
              "type": "git_object **",
              "direction": "in",
              "comment": "pointer where to store the target"
            },
            {
              "name": "tag",
              "type": "git_tag *",
              "direction": "in",
              "comment": "a previously loaded tag."
            }
          ],
          "comment": [
            "Get the tagged object of a tag",
            "This method performs a repository lookup for the\n given object and returns it"
          ],
          "group": "tag"
        },
        "git_tag_target_oid": {
          "kind": "function",
          "name": "git_tag_target_oid",
          "location": {
            "file": "tag.h",
            "line": 98,
            "column": 29
          },
          "returns": {
            "type": "const git_oid *",
            "comment": "pointer to the OID"
          },
          "params": [
            {
              "name": "tag",
              "type": "git_tag *",
              "direction": "in",
              "comment": "a previously loaded tag."
            }
          ],
          "comment": [
            "Get the OID of the tagged object of a tag"
          ],
          "group": "tag"
        },
        "git_tag_type": {
          "kind": "function",
          "name": "git_tag_type",
          "location": {
            "file": "tag.h",
            "line": 106,
            "column": 23
          },
          "returns": {
            "type": "git_otype",
            "comment": "type of the tagged object"
          },
          "params": [
            {
              "name": "tag",
              "type": "git_tag *",
              "direction": "in",
              "comment": "a previously loaded tag."
            }
          ],
          "comment": [
            "Get the type of a tag's tagged object"
          ],
          "group": "tag"
        },
        "git_tag_name": {
          "kind": "function",
          "name": "git_tag_name",
          "location": {
            "file": "tag.h",
            "line": 114,
            "column": 26
          },
          "returns": {
            "type": "const char *",
            "comment": "name of the tag"
          },
          "params": [
            {
              "name": "tag",
              "type": "git_tag *",
              "direction": "in",
              "comment": "a previously loaded tag."
            }
          ],
          "comment": [
            "Get the name of a tag"
          ],
          "group": "tag"
        },
        "git_tag_tagger": {
          "kind": "function",
          "name": "git_tag_tagger",
          "location": {
            "file": "tag.h",
            "line": 122,
            "column": 35
          },
          "returns": {
            "type": "const git_signature *",
            "comment": "reference to the tag's author"
          },
          "params": [
            {
              "name": "tag",
              "type": "git_tag *",
              "direction": "in",
              "comment": "a previously loaded tag."
            }
          ],
          "comment": [
            "Get the tagger (author) of a tag"
          ],
          "group": "tag"
        },
        "git_tag_message": {
          "kind": "function",
          "name": "git_tag_message",
          "location": {
            "file": "tag.h",
            "line": 130,
            "column": 26
          },
          "returns": {
            "type": "const char *",
            "comment": "message of the tag"
          },
          "params": [
            {
              "name": "tag",
              "type": "git_tag *",
              "direction": "in",
              "comment": "a previously loaded tag."
            }
          ],
          "comment": [
            "Get the message of a tag"
          ],
          "group": "tag"
        },
        "git_tag_create": {
          "kind": "function",
          "name": "git_tag_create",
          "location": {
            "file": "tag.h",
            "line": 168,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code\n\tA tag object is written to the ODB, and a proper reference\n\tis written in the /refs/tags folder, pointing to it"
          },
          "params": [
            {
              "name": "oid",
              "type": "git_oid *",
              "direction": "in",
              "comment": "Pointer where to store the OID of the\n newly created tag. If the tag already exists, this parameter\n will be the oid of the existing tag, and the function will\n return a GIT_EEXISTS error code."
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "Repository where to store the tag"
            },
            {
              "name": "tag_name",
              "type": "const char *",
              "direction": "in",
              "comment": "Name for the tag; this name is validated\n for consistency. It should also not conflict with an\n already existing tag name"
            },
            {
              "name": "target",
              "type": "const git_object *",
              "direction": "in",
              "comment": "Object to which this tag points. This object\n must belong to the given `repo`."
            },
            {
              "name": "tagger",
              "type": "const git_signature *",
              "direction": "in",
              "comment": "Signature of the tagger for this tag, and\n of the tagging time"
            },
            {
              "name": "message",
              "type": "const char *",
              "direction": "in",
              "comment": "Full message for this tag"
            },
            {
              "name": "force",
              "type": "int",
              "direction": "in",
              "comment": "Overwrite existing references"
            }
          ],
          "comment": [
            "Create a new tag in the repository from an object",
            "A new reference will also be created pointing to\n this tag object. If `force` is true and a reference\n already exists with the given name, it'll be replaced.",
            "The message will be cleaned up from excess whitespace\n it will be made sure that the last line ends with a '\\n\n'."
          ],
          "group": "tag"
        },
        "git_tag_create_frombuffer": {
          "kind": "function",
          "name": "git_tag_create_frombuffer",
          "location": {
            "file": "tag.h",
            "line": 186,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on sucess; error code otherwise"
          },
          "params": [
            {
              "name": "oid",
              "type": "git_oid *",
              "direction": "in",
              "comment": "Pointer where to store the OID of the newly created tag"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "Repository where to store the tag"
            },
            {
              "name": "buffer",
              "type": "const char *",
              "direction": "in",
              "comment": "Raw tag data"
            },
            {
              "name": "force",
              "type": "int",
              "direction": "in",
              "comment": "Overwrite existing tags"
            }
          ],
          "comment": [
            "Create a new tag in the repository from a buffer"
          ],
          "group": "tag"
        },
        "git_tag_create_lightweight": {
          "kind": "function",
          "name": "git_tag_create_lightweight",
          "location": {
            "file": "tag.h",
            "line": 219,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code\n\tA proper reference is written in the /refs/tags folder,\n pointing to the provided target object"
          },
          "params": [
            {
              "name": "oid",
              "type": "git_oid *",
              "direction": "in",
              "comment": "Pointer where to store the OID of the provided\n target object. If the tag already exists, this parameter\n will be filled with the oid of the existing pointed object\n and the function will return a GIT_EEXISTS error code."
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "Repository where to store the lightweight tag"
            },
            {
              "name": "tag_name",
              "type": "const char *",
              "direction": "in",
              "comment": "Name for the tag; this name is validated\n for consistency. It should also not conflict with an\n already existing tag name"
            },
            {
              "name": "target",
              "type": "const git_object *",
              "direction": "in",
              "comment": "Object to which this tag points. This object\n must belong to the given `repo`."
            },
            {
              "name": "force",
              "type": "int",
              "direction": "in",
              "comment": "Overwrite existing references"
            }
          ],
          "comment": [
            "Create a new lightweight tag pointing at a target object",
            "A new direct reference will be created pointing to\n this target object. If `force` is true and a reference\n already exists with the given name, it'll be replaced."
          ],
          "group": "tag"
        },
        "git_tag_delete": {
          "kind": "function",
          "name": "git_tag_delete",
          "location": {
            "file": "tag.h",
            "line": 236,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "Repository where lives the tag"
            },
            {
              "name": "tag_name",
              "type": "const char *",
              "direction": "in",
              "comment": "Name of the tag to be deleted;\n this name is validated for consistency."
            }
          ],
          "comment": [
            "Delete an existing tag reference."
          ],
          "group": "tag"
        },
        "git_tag_list": {
          "kind": "function",
          "name": "git_tag_list",
          "location": {
            "file": "tag.h",
            "line": 253,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "tag_names",
              "type": "git_strarray *",
              "direction": "in",
              "comment": "Pointer to a git_strarray structure where\n\t\tthe tag names will be stored"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "Repository where to find the tags"
            }
          ],
          "comment": [
            "Fill a list with all the tags in the Repository",
            "The string array will be filled with the names of the\n matching tags; these values are owned by the user and\n should be free'd manually when no longer needed, using\n `git_strarray_free`."
          ],
          "group": "tag"
        },
        "git_tag_list_match": {
          "kind": "function",
          "name": "git_tag_list_match",
          "location": {
            "file": "tag.h",
            "line": 275,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "tag_names",
              "type": "git_strarray *",
              "direction": "in",
              "comment": "Pointer to a git_strarray structure where\n\t\tthe tag names will be stored"
            },
            {
              "name": "pattern",
              "type": "const char *",
              "direction": "in",
              "comment": "Standard fnmatch pattern"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "Repository where to find the tags"
            }
          ],
          "comment": [
            "Fill a list with all the tags in the Repository\n which name match a defined pattern",
            "If an empty pattern is provided, all the tags\n will be returned.",
            "The string array will be filled with the names of the\n matching tags; these values are owned by the user and\n should be free'd manually when no longer needed, using\n `git_strarray_free`."
          ],
          "group": "tag"
        },
        "git_tag_peel": {
          "kind": "function",
          "name": "git_tag_peel",
          "location": {
            "file": "tag.h",
            "line": 291,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "tag_target",
              "type": "git_object **",
              "direction": "in",
              "comment": "Pointer to the peeled git_object"
            },
            {
              "name": "tag",
              "type": "git_tag *",
              "direction": "in",
              "comment": "The tag to be processed"
            }
          ],
          "comment": [
            "Recursively peel a tag until a non tag git_object\n is met",
            "The retrieved `tag_target` object is owned by the repository\n and should be closed with the `git_object_free` method."
          ],
          "group": "tag"
        },
        "git_tag": {
          "kind": "struct",
          "name": "git_tag",
          "referenceName": "struct git_tag",
          "opaque": true,
          "comment": [
            "Parsed representation of a tag object."
          ],
          "location": {
            "file": "types.h",
            "line": 102,
            "column": 24
          },
          "group": "tag",
          "parameterTo": [
            "git_tag_lookup",
            "git_tag_lookup_prefix",
            "git_tag_free",
            "git_tag_id",
            "git_tag_target",
            "git_tag_target_oid",
            "git_tag_type",
            "git_tag_name",
            "git_tag_tagger",
            "git_tag_message",
            "git_tag_peel"
          ]
        }
      },
      "info": {
        "summary": "Git tag parsing routines"
      }
    },
    "threads": {
      "apis": {
        "git_threads_init": {
          "kind": "function",
          "name": "git_threads_init",
          "location": {
            "file": "threads.h",
            "line": 31,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "comment": [
            "Init the threading system.",
            "If libgit2 has been built with GIT_THREADS\n on, this function must be called once before\n any other library functions.",
            "If libgit2 has been built without GIT_THREADS\n support, this function is a no-op."
          ],
          "group": "threads"
        },
        "git_threads_shutdown": {
          "kind": "function",
          "name": "git_threads_shutdown",
          "location": {
            "file": "threads.h",
            "line": 43,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "comment": [
            "Shutdown the threading system.",
            "If libgit2 has been built with GIT_THREADS\n on, this function must be called before shutting\n down the library.",
            "If libgit2 has been built without GIT_THREADS\n support, this function is a no-op."
          ],
          "group": "threads"
        }
      },
      "info": {
        "summary": "Library level thread functions"
      }
    },
    "tree": {
      "apis": {
        "git_tree_lookup": {
          "kind": "function",
          "name": "git_tree_lookup",
          "location": {
            "file": "tree.h",
            "line": 32,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "tree",
              "type": "git_tree **",
              "direction": "in",
              "comment": "pointer to the looked up tree"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repo to use when locating the tree."
            },
            {
              "name": "id",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "identity of the tree to locate."
            }
          ],
          "comment": [
            "Lookup a tree object from the repository."
          ],
          "group": "tree"
        },
        "git_tree_lookup_prefix": {
          "kind": "function",
          "name": "git_tree_lookup_prefix",
          "location": {
            "file": "tree.h",
            "line": 49,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "tree",
              "type": "git_tree **",
              "direction": "in",
              "comment": "pointer to the looked up tree"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repo to use when locating the tree."
            },
            {
              "name": "id",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "identity of the tree to locate."
            },
            {
              "name": "len",
              "type": "unsigned int",
              "direction": "in",
              "comment": "the length of the short identifier"
            }
          ],
          "comment": [
            "Lookup a tree object from the repository,\n given a prefix of its identifier (short id)."
          ],
          "see": [
            "git_object_lookup_prefix"
          ],
          "group": "tree"
        },
        "git_tree_free": {
          "kind": "function",
          "name": "git_tree_free",
          "location": {
            "file": "tree.h",
            "line": 66,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "tree",
              "type": "git_tree *",
              "direction": "in",
              "comment": "the tree to close"
            }
          ],
          "comment": [
            "Close an open tree",
            "This is a wrapper around git_object_free()",
            "IMPORTANT:\n It *is* necessary to call this method when you stop\n using a tree. Failure to do so will cause a memory leak."
          ],
          "group": "tree"
        },
        "git_tree_id": {
          "kind": "function",
          "name": "git_tree_id",
          "location": {
            "file": "tree.h",
            "line": 78,
            "column": 29
          },
          "returns": {
            "type": "const git_oid *",
            "comment": "object identity for the tree."
          },
          "params": [
            {
              "name": "tree",
              "type": "git_tree *",
              "direction": "in",
              "comment": "a previously loaded tree."
            }
          ],
          "comment": [
            "Get the id of a tree."
          ],
          "group": "tree"
        },
        "git_tree_entrycount": {
          "kind": "function",
          "name": "git_tree_entrycount",
          "location": {
            "file": "tree.h",
            "line": 86,
            "column": 26
          },
          "returns": {
            "type": "unsigned int",
            "comment": "the number of entries in the tree"
          },
          "params": [
            {
              "name": "tree",
              "type": "git_tree *",
              "direction": "in",
              "comment": "a previously loaded tree."
            }
          ],
          "comment": [
            "Get the number of entries listed in a tree"
          ],
          "group": "tree"
        },
        "git_tree_entry_byname": {
          "kind": "function",
          "name": "git_tree_entry_byname",
          "location": {
            "file": "tree.h",
            "line": 95,
            "column": 36
          },
          "returns": {
            "type": "const git_tree_entry *",
            "comment": "the tree entry; NULL if not found"
          },
          "params": [
            {
              "name": "tree",
              "type": "git_tree *",
              "direction": "in",
              "comment": "a previously loaded tree."
            },
            {
              "name": "filename",
              "type": "const char *",
              "direction": "in",
              "comment": "the filename of the desired entry"
            }
          ],
          "comment": [
            "Lookup a tree entry by its filename"
          ],
          "group": "tree"
        },
        "git_tree_entry_byindex": {
          "kind": "function",
          "name": "git_tree_entry_byindex",
          "location": {
            "file": "tree.h",
            "line": 104,
            "column": 36
          },
          "returns": {
            "type": "const git_tree_entry *",
            "comment": "the tree entry; NULL if not found"
          },
          "params": [
            {
              "name": "tree",
              "type": "git_tree *",
              "direction": "in",
              "comment": "a previously loaded tree."
            },
            {
              "name": "idx",
              "type": "unsigned int",
              "direction": "in",
              "comment": "the position in the entry list"
            }
          ],
          "comment": [
            "Lookup a tree entry by its position in the tree"
          ],
          "group": "tree"
        },
        "git_tree_entry_attributes": {
          "kind": "function",
          "name": "git_tree_entry_attributes",
          "location": {
            "file": "tree.h",
            "line": 112,
            "column": 26
          },
          "returns": {
            "type": "unsigned int",
            "comment": "attributes as an integer"
          },
          "params": [
            {
              "name": "entry",
              "type": "const git_tree_entry *",
              "direction": "in",
              "comment": "a tree entry"
            }
          ],
          "comment": [
            "Get the UNIX file attributes of a tree entry"
          ],
          "group": "tree"
        },
        "git_tree_entry_name": {
          "kind": "function",
          "name": "git_tree_entry_name",
          "location": {
            "file": "tree.h",
            "line": 120,
            "column": 26
          },
          "returns": {
            "type": "const char *",
            "comment": "the name of the file"
          },
          "params": [
            {
              "name": "entry",
              "type": "const git_tree_entry *",
              "direction": "in",
              "comment": "a tree entry"
            }
          ],
          "comment": [
            "Get the filename of a tree entry"
          ],
          "group": "tree"
        },
        "git_tree_entry_id": {
          "kind": "function",
          "name": "git_tree_entry_id",
          "location": {
            "file": "tree.h",
            "line": 128,
            "column": 29
          },
          "returns": {
            "type": "const git_oid *",
            "comment": "the oid of the object"
          },
          "params": [
            {
              "name": "entry",
              "type": "const git_tree_entry *",
              "direction": "in",
              "comment": "a tree entry"
            }
          ],
          "comment": [
            "Get the id of the object pointed by the entry"
          ],
          "group": "tree"
        },
        "git_tree_entry_type": {
          "kind": "function",
          "name": "git_tree_entry_type",
          "location": {
            "file": "tree.h",
            "line": 136,
            "column": 23
          },
          "returns": {
            "type": "git_otype",
            "comment": "the type of the pointed object"
          },
          "params": [
            {
              "name": "entry",
              "type": "const git_tree_entry *",
              "direction": "in",
              "comment": "a tree entry"
            }
          ],
          "comment": [
            "Get the type of the object pointed by the entry"
          ],
          "group": "tree"
        },
        "git_tree_entry_to_object": {
          "kind": "function",
          "name": "git_tree_entry_to_object",
          "location": {
            "file": "tree.h",
            "line": 146,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "object_out",
              "type": "git_object **"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "repository where to lookup the pointed object"
            },
            {
              "name": "entry",
              "type": "const git_tree_entry *",
              "direction": "in",
              "comment": "a tree entry"
            }
          ],
          "comment": [
            "Convert a tree entry to the git_object it points too."
          ],
          "group": "tree"
        },
        "git_tree_create_fromindex": {
          "kind": "function",
          "name": "git_tree_create_fromindex",
          "location": {
            "file": "tree.h",
            "line": 164,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "oid",
              "type": "git_oid *",
              "direction": "in",
              "comment": "Pointer where to store the written tree"
            },
            {
              "name": "index",
              "type": "git_index *",
              "direction": "in",
              "comment": "Index to write"
            }
          ],
          "comment": [
            "Write a tree to the ODB from the index file",
            "This method will scan the index and write a representation\n of its current state back to disk; it recursively creates\n tree objects for each of the subtrees stored in the index,\n but only returns the OID of the root tree. This is the OID\n that can be used e.g. to create a commit.",
            "The index instance cannot be bare, and needs to be associated\n to an existing repository."
          ],
          "group": "tree"
        },
        "git_treebuilder_create": {
          "kind": "function",
          "name": "git_treebuilder_create",
          "location": {
            "file": "tree.h",
            "line": 183,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on sucess; error code otherwise"
          },
          "params": [
            {
              "name": "builder_p",
              "type": "git_treebuilder **",
              "direction": "in",
              "comment": "Pointer where to store the tree builder"
            },
            {
              "name": "source",
              "type": "const git_tree *",
              "direction": "in",
              "comment": "Source tree to initialize the builder (optional)"
            }
          ],
          "comment": [
            "Create a new tree builder.",
            "The tree builder can be used to create or modify\n trees in memory and write them as tree objects to the\n database.",
            "If the `source` parameter is not NULL, the tree builder\n will be initialized with the entries of the given tree.",
            "If the `source` parameter is NULL, the tree builder will\n have no entries and will have to be filled manually."
          ],
          "group": "tree"
        },
        "git_treebuilder_clear": {
          "kind": "function",
          "name": "git_treebuilder_clear",
          "location": {
            "file": "tree.h",
            "line": 190,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "bld",
              "type": "git_treebuilder *",
              "direction": "in",
              "comment": "Builder to clear"
            }
          ],
          "comment": [
            "Clear all the entires in the builder"
          ],
          "group": "tree"
        },
        "git_treebuilder_free": {
          "kind": "function",
          "name": "git_treebuilder_free",
          "location": {
            "file": "tree.h",
            "line": 201,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "bld",
              "type": "git_treebuilder *",
              "direction": "in",
              "comment": "Builder to free"
            }
          ],
          "comment": [
            "Free a tree builder",
            "This will clear all the entries and free to builder.\n Failing to free the builder after you're done using it\n will result in a memory leak"
          ],
          "group": "tree"
        },
        "git_treebuilder_get": {
          "kind": "function",
          "name": "git_treebuilder_get",
          "location": {
            "file": "tree.h",
            "line": 213,
            "column": 36
          },
          "returns": {
            "type": "const git_tree_entry *",
            "comment": "pointer to the entry; NULL if not found"
          },
          "params": [
            {
              "name": "bld",
              "type": "git_treebuilder *",
              "direction": "in",
              "comment": "Tree builder"
            },
            {
              "name": "filename",
              "type": "const char *",
              "direction": "in",
              "comment": "Name of the entry"
            }
          ],
          "comment": [
            "Get an entry from the builder from its filename",
            "The returned entry is owned by the builder and should\n not be freed manually."
          ],
          "group": "tree"
        },
        "git_treebuilder_insert": {
          "kind": "function",
          "name": "git_treebuilder_insert",
          "location": {
            "file": "tree.h",
            "line": 234,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "entry_out",
              "type": "git_tree_entry **",
              "direction": "in",
              "comment": "Pointer to store the entry (optional)"
            },
            {
              "name": "bld",
              "type": "git_treebuilder *",
              "direction": "in",
              "comment": "Tree builder"
            },
            {
              "name": "filename",
              "type": "const char *",
              "direction": "in",
              "comment": "Filename of the entry"
            },
            {
              "name": "id",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "SHA1 oid of the entry"
            },
            {
              "name": "attributes",
              "type": "unsigned int",
              "direction": "in",
              "comment": "Folder attributes of the entry"
            }
          ],
          "comment": [
            "Add or update an entry to the builder",
            "Insert a new entry for `filename` in the builder with the\n given attributes.",
            "if an entry named `filename` already exists, its attributes\n will be updated with the given ones.",
            "The optional pointer `entry_out` can be used to retrieve a\n pointer to the newly created/updated entry."
          ],
          "group": "tree"
        },
        "git_treebuilder_remove": {
          "kind": "function",
          "name": "git_treebuilder_remove",
          "location": {
            "file": "tree.h",
            "line": 242,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "bld",
              "type": "git_treebuilder *",
              "direction": "in",
              "comment": "Tree builder"
            },
            {
              "name": "filename",
              "type": "const char *",
              "direction": "in",
              "comment": "Filename of the entry to remove"
            }
          ],
          "comment": [
            "Remove an entry from the builder by its filename"
          ],
          "group": "tree"
        },
        "git_treebuilder_filter": {
          "kind": "function",
          "name": "git_treebuilder_filter",
          "location": {
            "file": "tree.h",
            "line": 255,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "bld",
              "type": "git_treebuilder *",
              "direction": "in",
              "comment": "Tree builder"
            },
            {
              "name": "filter",
              "type": "int (*)(const git_tree_entry *, void *)",
              "direction": "in",
              "comment": "Callback to filter entries"
            },
            {
              "name": "payload",
              "type": "void *"
            }
          ],
          "comment": [
            "Filter the entries in the tree",
            "The `filter` callback will be called for each entry\n in the tree with a pointer to the entry and the\n provided `payload`: if the callback returns 1, the\n entry will be filtered (removed from the builder)."
          ],
          "group": "tree"
        },
        "git_treebuilder_write": {
          "kind": "function",
          "name": "git_treebuilder_write",
          "location": {
            "file": "tree.h",
            "line": 269,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "oid",
              "type": "git_oid *",
              "direction": "in",
              "comment": "Pointer where to store the written OID"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "Repository where to store the object"
            },
            {
              "name": "bld",
              "type": "git_treebuilder *",
              "direction": "in",
              "comment": "Tree builder to write"
            }
          ],
          "comment": [
            "Write the contents of the tree builder as a tree object",
            "The tree builder will be written to the given `repo`, and\n it's identifying SHA1 hash will be stored in the `oid`\n pointer."
          ],
          "group": "tree"
        },
        "git_tree_get_subtree": {
          "kind": "function",
          "name": "git_tree_get_subtree",
          "location": {
            "file": "tree.h",
            "line": 283,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success; GIT_ENOTFOUND if the path does not lead to a subtree"
          },
          "params": [
            {
              "name": "subtree",
              "type": "git_tree **",
              "direction": "in",
              "comment": "Pointer where to store the subtree"
            },
            {
              "name": "root",
              "type": "git_tree *",
              "direction": "in",
              "comment": "A previously loaded tree which will be the root of the relative path"
            },
            {
              "name": "subtree_path",
              "type": "const char *",
              "direction": "in",
              "comment": "Path to the contained subtree"
            }
          ],
          "comment": [
            "Retrieve a subtree contained in a tree, given its\n relative path.",
            "The returned tree is owned by the repository and\n should be closed with the `git_object_free` method."
          ],
          "group": "tree"
        },
        "git_treewalk_cb": {
          "kind": "callback",
          "name": "git_treewalk_cb",
          "type": "int (*)(const char *, git_tree_entry *, void *)",
          "comment": [
            "Callback for the tree traversal method"
          ],
          "location": {
            "file": "tree.h",
            "line": 286,
            "column": 15
          },
          "params": [
            {
              "type": "const char *"
            },
            {
              "type": "git_tree_entry *"
            },
            {
              "type": "void *"
            }
          ],
          "group": "tree",
          "parameterTo": [
            "git_tree_walk"
          ],
          "typedef": true
        },
        "git_treewalk_mode": {
          "kind": "enum",
          "name": "git_treewalk_mode",
          "referenceName": "enum git_treewalk_mode",
          "members": [
            {
              "name": "GIT_TREEWALK_PRE",
              "value": "0"
            },
            {
              "name": "GIT_TREEWALK_POST",
              "value": "1"
            }
          ],
          "comment": [
            "Tree traversal modes"
          ],
          "location": {
            "file": "tree.h",
            "line": 289,
            "column": 6
          },
          "group": "tree"
        },
        "git_tree_walk": {
          "kind": "function",
          "name": "git_tree_walk",
          "location": {
            "file": "tree.h",
            "line": 313,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "tree",
              "type": "git_tree *",
              "direction": "in",
              "comment": "The tree to walk"
            },
            {
              "name": "callback",
              "type": "git_treewalk_cb",
              "direction": "in",
              "comment": "Function to call on each tree entry",
              "referenceType": "int (*)(const char *, git_tree_entry *, void *)"
            },
            {
              "name": "mode",
              "type": "int",
              "direction": "in",
              "comment": "Traversal mode (pre or post-order)"
            },
            {
              "name": "payload",
              "type": "void *",
              "direction": "in",
              "comment": "Opaque pointer to be passed on each callback"
            }
          ],
          "comment": [
            "Traverse the entries in a tree and its subtrees in\n post or pre order",
            "The entries will be traversed in the specified order,\n children subtrees will be automatically loaded as required,\n and the `callback` will be called once per entry with\n the current (relative) root for the entry and the entry\n data itself.",
            "If the callback returns a negative value, the passed entry\n will be skiped on the traversal."
          ],
          "group": "tree"
        },
        "git_tree_entry": {
          "kind": "struct",
          "name": "git_tree_entry",
          "referenceName": "struct git_tree_entry",
          "opaque": true,
          "comment": [
            "Representation of each one of the entries in a tree object."
          ],
          "location": {
            "file": "types.h",
            "line": 111,
            "column": 31
          },
          "group": "tree",
          "returnedBy": [
            "git_tree_entry_byname",
            "git_tree_entry_byindex",
            "git_treebuilder_get"
          ],
          "parameterTo": [
            "git_tree_entry_attributes",
            "git_tree_entry_name",
            "git_tree_entry_id",
            "git_tree_entry_type",
            "git_tree_entry_to_object",
            "git_treebuilder_insert",
            "git_treewalk_cb"
          ]
        },
        "git_tree": {
          "kind": "struct",
          "name": "git_tree",
          "referenceName": "struct git_tree",
          "opaque": true,
          "comment": [
            "Representation of a tree object."
          ],
          "location": {
            "file": "types.h",
            "line": 114,
            "column": 25
          },
          "group": "tree",
          "parameterTo": [
            "git_commit_tree",
            "git_commit_create",
            "git_commit_create_v",
            "git_diff_tree_to_tree",
            "git_diff_index_to_tree",
            "git_diff_workdir_to_tree",
            "git_index_read_tree",
            "git_tree_lookup",
            "git_tree_lookup_prefix",
            "git_tree_free",
            "git_tree_id",
            "git_tree_entrycount",
            "git_tree_entry_byname",
            "git_tree_entry_byindex",
            "git_treebuilder_create",
            "git_tree_get_subtree",
            "git_tree_walk"
          ]
        },
        "git_treebuilder": {
          "kind": "struct",
          "name": "git_treebuilder",
          "referenceName": "struct git_treebuilder",
          "opaque": true,
          "comment": [
            "Constructor for in-memory trees"
          ],
          "location": {
            "file": "types.h",
            "line": 117,
            "column": 32
          },
          "group": "tree",
          "parameterTo": [
            "git_treebuilder_create",
            "git_treebuilder_clear",
            "git_treebuilder_free",
            "git_treebuilder_get",
            "git_treebuilder_insert",
            "git_treebuilder_remove",
            "git_treebuilder_filter",
            "git_treebuilder_write"
          ]
        }
      },
      "info": {
        "summary": "Git tree parsing, loading routines"
      }
    },
    "types": {
      "apis": {
        "git_off_t": {
          "kind": "alias",
          "name": "git_off_t",
          "type": "int64_t",
          "location": {
            "file": "types.h",
            "line": 58,
            "column": 17
          },
          "group": "types",
          "parameterTo": [
            "git_remote_download"
          ],
          "typedef": true
        },
        "git_time_t": {
          "kind": "alias",
          "name": "git_time_t",
          "type": "int64_t",
          "location": {
            "file": "types.h",
            "line": 59,
            "column": 17
          },
          "group": "types",
          "returnedBy": [
            "git_commit_time"
          ],
          "parameterTo": [
            "git_signature_new"
          ],
          "typedef": true
        },
        "git_otype": {
          "kind": "enum",
          "name": "git_otype",
          "referenceName": "git_otype",
          "members": [
            {
              "name": "GIT_OBJ_ANY",
              "value": "-2",
              "comment": [
                "Object can be any of the following"
              ]
            },
            {
              "name": "GIT_OBJ_BAD",
              "value": "-1",
              "comment": [
                "Object is invalid."
              ]
            },
            {
              "name": "GIT_OBJ__EXT1",
              "value": "0",
              "comment": [
                "Reserved for future use."
              ]
            },
            {
              "name": "GIT_OBJ_COMMIT",
              "value": "1",
              "comment": [
                "A commit object."
              ]
            },
            {
              "name": "GIT_OBJ_TREE",
              "value": "2",
              "comment": [
                "A tree (directory listing) object."
              ]
            },
            {
              "name": "GIT_OBJ_BLOB",
              "value": "3",
              "comment": [
                "A file revision object."
              ]
            },
            {
              "name": "GIT_OBJ_TAG",
              "value": "4",
              "comment": [
                "An annotated tag object."
              ]
            },
            {
              "name": "GIT_OBJ__EXT2",
              "value": "5",
              "comment": [
                "Reserved for future use."
              ]
            },
            {
              "name": "GIT_OBJ_OFS_DELTA",
              "value": "6",
              "comment": [
                "A delta, base is given by an offset."
              ]
            },
            {
              "name": "GIT_OBJ_REF_DELTA",
              "value": "7",
              "comment": [
                "A delta, base is given by object id."
              ]
            }
          ],
          "comment": [
            "Basic type (loose or packed) of any Git object."
          ],
          "location": {
            "file": "types.h",
            "line": 64,
            "column": 9
          },
          "group": "types",
          "returnedBy": [
            "git_object_type",
            "git_object_string2type",
            "git_odb_object_type",
            "git_tag_type",
            "git_tree_entry_type"
          ],
          "parameterTo": [
            "git_object_lookup",
            "git_object_lookup_prefix",
            "git_object_type2string",
            "git_object_typeisloose",
            "git_object__size",
            "git_odb_read_header",
            "git_odb_write",
            "git_odb_open_wstream",
            "git_odb_hash",
            "git_odb_hashfile"
          ]
        },
        "git_time": {
          "kind": "struct",
          "name": "git_time",
          "referenceName": "git_time",
          "comment": [
            "Time in a signature"
          ],
          "members": [
            {
              "name": "time",
              "type": "git_time_t",
              "referenceType": "int64_t"
            },
            {
              "name": "offset",
              "type": "int",
              "comment": [
                "time in seconds from epoch"
              ]
            }
          ],
          "location": {
            "file": "types.h",
            "line": 138,
            "column": 16
          },
          "group": "types"
        },
        "git_ref_t": {
          "kind": "enum",
          "name": "git_ref_t",
          "referenceName": "git_ref_t",
          "members": [
            {
              "name": "GIT_REF_INVALID",
              "value": "0"
            },
            {
              "name": "GIT_REF_OID",
              "value": "1",
              "comment": [
                "Invalid reference"
              ]
            },
            {
              "name": "GIT_REF_SYMBOLIC",
              "value": "2",
              "comment": [
                "A reference which points at an object id"
              ]
            },
            {
              "name": "GIT_REF_PACKED",
              "value": "4",
              "comment": [
                "A reference which points at another reference"
              ]
            },
            {
              "name": "GIT_REF_HAS_PEEL",
              "value": "8",
              "comment": [
                "A reference which points at another reference"
              ]
            },
            {
              "name": "GIT_REF_LISTALL",
              "value": "7",
              "comment": [
                "A reference which points at another reference"
              ]
            }
          ],
          "comment": [
            "Basic type of any Git reference."
          ],
          "location": {
            "file": "types.h",
            "line": 154,
            "column": 9
          },
          "group": "types",
          "returnedBy": [
            "git_reference_type"
          ]
        }
      },
      "info": {
        "summary": "libgit2 base & compatibility types"
      }
    },
    "version": {
      "apis": {
        "LIBGIT2_VERSION": {
          "kind": "macro",
          "name": "LIBGIT2_VERSION",
          "location": {
            "file": "version.h",
            "line": 10,
            "column": 9
          },
          "value": "\"0.17.0\"",
          "comment": "",
          "group": "version"
        },
        "LIBGIT2_VER_MAJOR": {
          "kind": "macro",
          "name": "LIBGIT2_VER_MAJOR",
          "location": {
            "file": "version.h",
            "line": 11,
            "column": 9
          },
          "value": "0",
          "comment": "",
          "group": "version"
        },
        "LIBGIT2_VER_MINOR": {
          "kind": "macro",
          "name": "LIBGIT2_VER_MINOR",
          "location": {
            "file": "version.h",
            "line": 12,
            "column": 9
          },
          "value": "17",
          "comment": "",
          "group": "version"
        },
        "LIBGIT2_VER_REVISION": {
          "kind": "macro",
          "name": "LIBGIT2_VER_REVISION",
          "location": {
            "file": "version.h",
            "line": 13,
            "column": 9
          },
          "value": "0",
          "comment": "",
          "group": "version"
        }
      },
      "info": {}
    },
    "windows": {
      "apis": {
        "gitwin_set_codepage": {
          "kind": "function",
          "name": "gitwin_set_codepage",
          "location": {
            "file": "windows.h",
            "line": 41,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "codepage",
              "type": "unsigned int",
              "direction": "in",
              "comment": "numeric codepage identifier"
            }
          ],
          "comment": [
            "Set the active codepage for Windows syscalls",
            "All syscalls performed by the library will assume\n this codepage when converting paths and strings\n to use by the Windows kernel.",
            "The default value of UTF-8 will work automatically\n with most Git repositories created on Unix systems.",
            "This settings needs only be changed when working\n with repositories that contain paths in specific,\n non-UTF codepages.",
            "A full list of all available codepage identifiers may\n be found at:",
            "http://msdn.microsoft.com/en-us/library/windows/desktop/dd317756(v=vs.85).aspx"
          ],
          "group": "windows"
        },
        "gitwin_get_codepage": {
          "kind": "function",
          "name": "gitwin_get_codepage",
          "location": {
            "file": "windows.h",
            "line": 48,
            "column": 26
          },
          "returns": {
            "type": "unsigned int",
            "comment": "numeric codepage identifier"
          },
          "comment": [
            "Return the active codepage for Windows syscalls"
          ],
          "group": "windows"
        },
        "gitwin_set_utf8": {
          "kind": "function",
          "name": "gitwin_set_utf8",
          "location": {
            "file": "windows.h",
            "line": 54,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "comment": [
            "Set the active Windows codepage to UTF-8 (this is\n the default value)"
          ],
          "group": "windows"
        }
      },
      "info": {
        "summary": "Windows-specific functions"
      }
    }
  }
}
